{"id":46,"name":"Permutations","slug":"permutations","link":"https://leetcode.com/problems/permutations","percent":43.276067401495,"level":"Medium","category":"algorithms","totalAC":"170.9K","totalSubmit":"394.7K","desc":"\r\nGiven a collection of distinct numbers, return all possible permutations.\r\n\r\n\r\n\r\nFor example,\r\n[1,2,3] have the following permutations:\r\n\r\n[\r\n  [1,2,3],\r\n  [1,3,2],\r\n  [2,1,3],\r\n  [2,3,1],\r\n  [3,1,2],\r\n  [3,2,1]\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> permute(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    public List<List<Integer>> permute(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def permute(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** permute(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> Permute(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number[][]}\r\n */\r\nvar permute = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef permute(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func permute(_ nums: [Int]) -> [[Int]] {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func permute(nums []int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def permute(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"}],"testcase":"[1,2,3]","testable":true}