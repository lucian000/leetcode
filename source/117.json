{
 "id": 117,
 "name": "Populating Next Right Pointers in Each Node II",
 "key": "populating-next-right-pointers-in-each-node-ii",
 "link": "https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii",
 "percent": 33.727516645135644,
 "level": "Medium",
 "totalAC": "",
 "totalSubmit": "",
 "desc": "Follow up for problem \"Populating Next Right Pointers in Each Node\".\r\nWhat if the given tree could be any binary tree? Would your previous solution still work?\r\n\r\nNote:\r\nYou may only use constant extra space.\r\n\r\n\r\nFor example,\r\nGiven the following binary tree,\r\n\r\n         1\r\n       /  \\\r\n      2    3\r\n     / \\    \\\r\n    4   5    7\r\n\r\n\r\n\r\nAfter calling your function, the tree should look like:\r\n\r\n         1 -> NULL\r\n       /  \\\r\n      2 -> 3 -> NULL\r\n     / \\    \\\r\n    4-> 5 -> 7 -> NULL\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for binary tree with next pointer.\r\n * struct TreeLinkNode {\r\n *  int val;\r\n *  TreeLinkNode *left, *right, *next;\r\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void connect(TreeLinkNode *root) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for binary tree with next pointer.\r\n * public class TreeLinkNode {\r\n *     int val;\r\n *     TreeLinkNode left, right, next;\r\n *     TreeLinkNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void connect(TreeLinkNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for binary tree with next pointer.\r\n# class TreeLinkNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    # @param root, a tree link node\r\n    # @return nothing\r\n    def connect(self, root):"
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for binary tree with next pointer.\r\n * struct TreeLinkNode {\r\n *  int val;\r\n *  struct TreeLinkNode *left, *right, *next;\r\n * };\r\n *\r\n */\r\nvoid connect(struct TreeLinkNode *root) {\r\n    \r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for binary tree with next pointer.\r\n * function TreeLinkNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = this.next = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {TreeLinkNode} root\r\n * @return {void} Do not return anything, modify tree in-place instead.\r\n */\r\nvar connect = function(root) {\r\n    \r\n};"
  }
 ],
 "testcase": "{}",
 "testable": false
}