{"id":284,"name":"Peeking Iterator","slug":"peeking-iterator","link":"https://leetcode.com/problems/peeking-iterator","percent":35.384284674912365,"level":"Medium","category":"algorithms","totalAC":"42.8K","totalSubmit":"121K","desc":"Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that support the peek() operation -- it essentially peek() at the element that will be returned by the next call to next().\r\n\r\n\r\nHere is an example. Assume that the iterator is initialized to the beginning of the list: [1, 2, 3].\r\n\r\nCall next() gets you 1, the first element in the list.\r\n\r\nNow you call peek() and it returns 2, the next element. Calling next() after that still return 2.\r\n\r\nYou call next() the final time and it returns 3, the last element. Calling hasNext() after that should return false.\r\n\r\n\r\nFollow up: How would you extend your design to be generic and work with all types, not just integer?\r\n\r\nCredits:Special thanks to @porker2008 for adding this problem and creating all test cases.","templates":[{"value":"cpp","text":"C++","defaultCode":"// Below is the interface for Iterator, which is already defined for you.\r\n// **DO NOT** modify the interface for Iterator.\r\nclass Iterator {\r\n    struct Data;\r\n\tData* data;\r\npublic:\r\n\tIterator(const vector<int>& nums);\r\n\tIterator(const Iterator& iter);\r\n\tvirtual ~Iterator();\r\n\t// Returns the next element in the iteration.\r\n\tint next();\r\n\t// Returns true if the iteration has more elements.\r\n\tbool hasNext() const;\r\n};\r\n\r\n\r\nclass PeekingIterator : public Iterator {\r\npublic:\r\n\tPeekingIterator(const vector<int>& nums) : Iterator(nums) {\r\n\t    // Initialize any member here.\r\n\t    // **DO NOT** save a copy of nums and manipulate it directly.\r\n\t    // You should only use the Iterator interface methods.\r\n\t    \r\n\t}\r\n\r\n    // Returns the next element in the iteration without advancing the iterator.\r\n\tint peek() {\r\n        \r\n\t}\r\n\r\n\t// hasNext() and next() should behave the same as in the Iterator interface.\r\n\t// Override them if needed.\r\n\tint next() {\r\n\t    \r\n\t}\r\n\r\n\tbool hasNext() const {\r\n\t    \r\n\t}\r\n};"},{"value":"java","text":"Java","defaultCode":"// Java Iterator interface reference:\r\n// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\r\nclass PeekingIterator implements Iterator<Integer> {\r\n\r\n\tpublic PeekingIterator(Iterator<Integer> iterator) {\r\n\t    // initialize any member here.\r\n\t    \r\n\t}\r\n\r\n    // Returns the next element in the iteration without advancing the iterator.\r\n\tpublic Integer peek() {\r\n        \r\n\t}\r\n\r\n\t// hasNext() and next() should behave the same as in the Iterator interface.\r\n\t// Override them if needed.\r\n\t@Override\r\n\tpublic Integer next() {\r\n\t    \r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean hasNext() {\r\n\t    \r\n\t}\r\n}"},{"value":"python","text":"Python","defaultCode":"# Below is the interface for Iterator, which is already defined for you.\r\n#\r\n# class Iterator(object):\r\n#     def __init__(self, nums):\r\n#         \"\"\"\r\n#         Initializes an iterator object to the beginning of a list.\r\n#         :type nums: List[int]\r\n#         \"\"\"\r\n#\r\n#     def hasNext(self):\r\n#         \"\"\"\r\n#         Returns true if the iteration has more elements.\r\n#         :rtype: bool\r\n#         \"\"\"\r\n#\r\n#     def next(self):\r\n#         \"\"\"\r\n#         Returns the next element in the iteration.\r\n#         :rtype: int\r\n#         \"\"\"\r\n\r\nclass PeekingIterator(object):\r\n    def __init__(self, iterator):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        :type iterator: Iterator\r\n        \"\"\"\r\n        \r\n\r\n    def peek(self):\r\n        \"\"\"\r\n        Returns the next element in the iteration without advancing the iterator.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def next(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def hasNext(self):\r\n        \"\"\"\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n# Your PeekingIterator object will be instantiated and called as such:\r\n# iter = PeekingIterator(Iterator(nums))\r\n# while iter.hasNext():\r\n#     val = iter.peek()   # Get the next element but not advance the iterator.\r\n#     iter.next()         # Should return the same value as [val]."}],"testcase":"[1,2,3,4]\n[0,1,1,2,2,1,1,2,0,1,0,2,0]","testable":false}