{"id":130,"name":"Surrounded Regions","slug":"surrounded-regions","link":"https://leetcode.com/problems/surrounded-regions","percent":18.270881417116428,"level":"Medium","category":"algorithms","totalAC":"82.8K","totalSubmit":"453.2K","desc":"\r\nGiven a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.\r\n\r\nA region is captured by flipping all 'O's into 'X's in that surrounded region.\r\n\r\n\r\n\r\nFor example,\r\n\r\nX X X X\r\nX O O X\r\nX X O X\r\nX O X X\r\n\r\n\r\n\r\n\r\nAfter running your function, the board should be:\r\n\r\nX X X X\r\nX X X X\r\nX X X X\r\nX O X X\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    void solve(vector<vector<char>>& board) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    public void solve(char[][] board) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def solve(self, board):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :rtype: void Do not return anything, modify board in-place instead.\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"void solve(char** board, int boardRowSize, int boardColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public void Solve(char[,] board) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[][]} board\r\n * @return {void} Do not return anything, modify board in-place instead.\r\n */\r\nvar solve = function(board) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} board\r\n# @return {Void} Do not return anything, modify board in-place instead.\r\ndef solve(board)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func solve(_ board: inout [[Character]]) {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func solve(board [][]byte)  {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def solve(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"}],"testcase":"[\"XXXX\",\"XOOX\",\"XXOX\",\"XOXX\"]","testable":true}