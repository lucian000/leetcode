{"id":190,"name":"Reverse Bits","slug":"reverse-bits","link":"https://leetcode.com/problems/reverse-bits","percent":29.542022871100254,"level":"Easy","category":"algorithms","totalAC":"106.4K","totalSubmit":"360.3K","desc":"Reverse bits of a given 32 bits unsigned integer.\r\n\r\nFor example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).\r\n\r\n\r\nFollow up:\r\nIf this function is called many times, how would you optimize it?\r\n\r\n\r\nRelated problem: Reverse Integer\r\n\r\nCredits:Special thanks to @ts for adding this problem and creating all test cases.","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    uint32_t reverseBits(uint32_t n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    // you need treat n as an unsigned value\r\n    public int reverseBits(int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution:\r\n    # @param n, an integer\r\n    # @return an integer\r\n    def reverseBits(self, n):\r\n        "},{"value":"c","text":"C","defaultCode":"uint32_t reverseBits(uint32_t n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public uint reverseBits(uint n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n - a positive integer\r\n * @return {number} - a positive integer\r\n */\r\nvar reverseBits = function(n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n, a positive integer\r\n# @return {Integer}\r\ndef reverse_bits(n)\r\n    \r\nend"}],"testcase":"           0 (00000000000000000000000000000000)","testable":false}