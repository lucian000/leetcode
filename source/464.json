{
 "id": 464,
 "name": "Can I Win",
 "key": "can-i-win",
 "link": "https://leetcode.com/problems/can-i-win",
 "percent": 24.51753314530636,
 "level": "Medium",
 "totalAC": "",
 "totalSubmit": "",
 "desc": "In the \"100 game,\" two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins. \r\n\r\nWhat if we change the game so that players cannot re-use integers? \r\n\r\nFor example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total >= 100.\r\n\r\nGiven an integer maxChoosableInteger and another integer desiredTotal, determine if the first player to move can force a win, assuming both players play optimally. \r\n\r\nYou can always assume that maxChoosableInteger will not be larger than 20 and desiredTotal will not be larger than 300.\r\n\r\n\r\nExample\r\n\r\nInput:\r\nmaxChoosableInteger = 10\r\ndesiredTotal = 11\r\n\r\nOutput:\r\nfalse\r\n\r\nExplanation:\r\nNo matter which integer the first player choose, the first player will lose.\r\nThe first player can choose an integer from 1 up to 10.\r\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\r\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\r\nSame with other integers chosen by the first player, the second player will always win.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool canIWin(int maxChoosableInteger, int desiredTotal) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def canIWin(self, maxChoosableInteger, desiredTotal):\r\n        \"\"\"\r\n        :type maxChoosableInteger: int\r\n        :type desiredTotal: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool canIWin(int maxChoosableInteger, int desiredTotal) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool CanIWin(int maxChoosableInteger, int desiredTotal) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number} maxChoosableInteger\r\n * @param {number} desiredTotal\r\n * @return {boolean}\r\n */\r\nvar canIWin = function(maxChoosableInteger, desiredTotal) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} max_choosable_integer\r\n# @param {Integer} desired_total\r\n# @return {Boolean}\r\ndef can_i_win(max_choosable_integer, desired_total)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func canIWin(_ maxChoosableInteger: Int, _ desiredTotal: Int) -> Bool {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func canIWin(maxChoosableInteger int, desiredTotal int) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def canIWin(maxChoosableInteger: Int, desiredTotal: Int): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "10\n11",
 "testable": true
}