{"id":525,"name":"Contiguous Array","key":"contiguous-array","link":"https://leetcode.com/problems/contiguous-array","percent":38.15770401507465,"level":"Medium","totalAC":"","totalSubmit":"","desc":"Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1. \r\n\r\n\r\nExample 1:\r\n\r\nInput: [0,1]\r\nOutput: 2\r\nExplanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [0,1,0]\r\nOutput: 2\r\nExplanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\r\n\r\n\r\n\r\nNote:\r\nThe length of the given binary array will not exceed 50,000.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findMaxLength(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\n    public int findMaxLength(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findMaxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int findMaxLength(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindMaxLength(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxLength = function(nums) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_max_length(nums)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMaxLength(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findMaxLength(nums []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findMaxLength(nums: Array[Int]): Int = {\n        \n    }\n}"}],"testcase":"[0,1]","testable":true}