{"text": ["[331] Verify Preorder Serialization of a Binary Tree  \t(File: 331.verify-preorder-serialization-of-a-binary-tree.py)\n", "\n", "https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree\n", "\n", "* Medium (35.99%)\n", "* Total Accepted:    NaN\n", "* Total Submissions: NaN\n", "* Testcase Example:  '\"9,3,4,#,#,1,#,#,2,#,6,#,#\"'\n", "\n", "One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.\n", "\n", "\n", "     _9_\n", "    /   \\\n", "   3     2\n", "  / \\   / \\\n", " 4   1  #  6\n", "/ \\ / \\   / \\\n", "# # # #   # #\n", "\n", "\n", "For example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where # represents a null node.\n", "\n", "\n", "Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.\n", "\n", "Each comma separated value in the string must be either an integer or a character '#' representing null pointer.\n", "\n", "You may assume that the input format is always valid, for example it could never contain two consecutive commas such as \"1,,3\".\n", "\n", "Example 1:\n", "\"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n", "Return true\n", "Example 2:\n", "\"1,#\"\n", "Return false\n", "Example 3:\n", "\"9,#,#,1\"\n", "Return false\n", "\n", "Credits:Special thanks to @dietpepsi for adding this problem and creating all test cases.\n"], "filename": "331.verify-preorder-serialization-of-a-binary-tree.py"}