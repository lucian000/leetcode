{"id":191,"name":"Number of 1 Bits","key":"number-of-1-bits","link":"https://leetcode.com/problems/number-of-1-bits","percent":39.4246908439427,"level":"Easy","totalAC":"","totalSubmit":"","desc":"Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).\r\n\r\nFor example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should return 3.\r\n\r\nCredits:Special thanks to @ts for adding this problem and creating all test cases.","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int hammingWeight(uint32_t n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    // you need to treat n as an unsigned value\r\n    public int hammingWeight(int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def hammingWeight(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int hammingWeight(uint32_t n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int HammingWeight(uint n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n - a positive integer\r\n * @return {number}\r\n */\r\nvar hammingWeight = function(n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n, a positive integer\r\n# @return {Integer}\r\ndef hamming_weight(n)\r\n    \r\nend"}],"testcase":"           0 (00000000000000000000000000000000)","testable":false}