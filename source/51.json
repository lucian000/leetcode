{"id":51,"name":"N-Queens","slug":"n-queens","link":"https://leetcode.com/problems/n-queens","percent":30.73344645478637,"level":"Hard","category":"algorithms","totalAC":"80.7K","totalSubmit":"262.4K","desc":"The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.\r\n\r\n\r\n\r\nGiven an integer n, return all distinct solutions to the n-queens puzzle.\r\n\r\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.\r\n\r\nFor example,\r\nThere exist two distinct solutions to the 4-queens puzzle:\r\n\r\n[\r\n [\".Q..\",  // Solution 1\r\n  \"...Q\",\r\n  \"Q...\",\r\n  \"..Q.\"],\r\n\r\n [\"..Q.\",  // Solution 2\r\n  \"Q...\",\r\n  \"...Q\",\r\n  \".Q..\"]\r\n]\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<string>> solveNQueens(int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    public List<List<String>> solveNQueens(int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def solveNQueens(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: List[List[str]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar*** solveNQueens(int n, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<string>> SolveNQueens(int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @return {string[][]}\r\n */\r\nvar solveNQueens = function(n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @return {String[][]}\r\ndef solve_n_queens(n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func solveNQueens(_ n: Int) -> [[String]] {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func solveNQueens(n int) [][]string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def solveNQueens(n: Int): List[List[String]] = {\n        \n    }\n}"}],"testcase":"4","testable":true}