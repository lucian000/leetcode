{"id":223,"name":"Rectangle Area","slug":"rectangle-area","link":"https://leetcode.com/problems/rectangle-area","percent":32.773854387687244,"level":"Medium","category":"algorithms","totalAC":"62.1K","totalSubmit":"189.5K","desc":"Find the total area covered by two rectilinear rectangles in a 2D plane.\r\nEach rectangle is defined by its bottom left corner and top right corner as shown in the figure.\r\n\r\n\r\n\r\n\r\nAssume that the total area is never beyond the maximum possible value of int.\r\n\r\n\r\nCredits:Special thanks to @mithmatt for adding this problem, creating the above image and all test cases.","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def computeArea(self, A, B, C, D, E, F, G, H):\r\n        \"\"\"\r\n        :type A: int\r\n        :type B: int\r\n        :type C: int\r\n        :type D: int\r\n        :type E: int\r\n        :type F: int\r\n        :type G: int\r\n        :type H: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int ComputeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} A\r\n * @param {number} B\r\n * @param {number} C\r\n * @param {number} D\r\n * @param {number} E\r\n * @param {number} F\r\n * @param {number} G\r\n * @param {number} H\r\n * @return {number}\r\n */\r\nvar computeArea = function(A, B, C, D, E, F, G, H) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} a\r\n# @param {Integer} b\r\n# @param {Integer} c\r\n# @param {Integer} d\r\n# @param {Integer} e\r\n# @param {Integer} f\r\n# @param {Integer} g\r\n# @param {Integer} h\r\n# @return {Integer}\r\ndef compute_area(a, b, c, d, e, f, g, h)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func computeArea(_ A: Int, _ B: Int, _ C: Int, _ D: Int, _ E: Int, _ F: Int, _ G: Int, _ H: Int) -> Int {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func computeArea(A int, B int, C int, D int, E int, F int, G int, H int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def computeArea(A: Int, B: Int, C: Int, D: Int, E: Int, F: Int, G: Int, H: Int): Int = {\n        \n    }\n}"}],"testcase":"-2\n-2\n2\n2\n-2\n-2\n2\n2","testable":true}