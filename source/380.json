{"id":380,"name":"Insert Delete GetRandom O(1)","key":"insert-delete-getrandom-o1","link":"https://leetcode.com/problems/insert-delete-getrandom-o1","percent":39.0151649468695,"level":"Medium","totalAC":"","totalSubmit":"","desc":"Design a data structure that supports all following operations in average O(1) time.\r\n\r\n\r\n\r\ninsert(val): Inserts an item val to the set if not already present.\r\nremove(val): Removes an item val from the set if present.\r\ngetRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.\r\n\r\n\r\n\r\nExample:\r\n\r\n// Init an empty set.\r\nRandomizedSet randomSet = new RandomizedSet();\r\n\r\n// Inserts 1 to the set. Returns true as 1 was inserted successfully.\r\nrandomSet.insert(1);\r\n\r\n// Returns false as 2 does not exist in the set.\r\nrandomSet.remove(2);\r\n\r\n// Inserts 2 to the set, returns true. Set now contains [1,2].\r\nrandomSet.insert(2);\r\n\r\n// getRandom should return either 1 or 2 randomly.\r\nrandomSet.getRandom();\r\n\r\n// Removes 1 from the set, returns true. Set now contains [2].\r\nrandomSet.remove(1);\r\n\r\n// 2 was already in the set, so return false.\r\nrandomSet.insert(2);\r\n\r\n// Since 2 is the only number in the set, getRandom always return 2.\r\nrandomSet.getRandom();\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class RandomizedSet {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    RandomizedSet() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\r\n    bool insert(int val) {\r\n        \r\n    }\r\n    \r\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\r\n    bool remove(int val) {\r\n        \r\n    }\r\n    \r\n    /** Get a random element from the set. */\r\n    int getRandom() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your RandomizedSet object will be instantiated and called as such:\r\n * RandomizedSet obj = new RandomizedSet();\r\n * bool param_1 = obj.insert(val);\r\n * bool param_2 = obj.remove(val);\r\n * int param_3 = obj.getRandom();\r\n */"},{"value":"java","text":"Java","defaultCode":"public class RandomizedSet {\r\n\r\n    /** Initialize your data structure here. */\r\n    public RandomizedSet() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\r\n    public boolean insert(int val) {\r\n        \r\n    }\r\n    \r\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\r\n    public boolean remove(int val) {\r\n        \r\n    }\r\n    \r\n    /** Get a random element from the set. */\r\n    public int getRandom() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your RandomizedSet object will be instantiated and called as such:\r\n * RandomizedSet obj = new RandomizedSet();\r\n * boolean param_1 = obj.insert(val);\r\n * boolean param_2 = obj.remove(val);\r\n * int param_3 = obj.getRandom();\r\n */"},{"value":"python","text":"Python","defaultCode":"class RandomizedSet(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def insert(self, val):\r\n        \"\"\"\r\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\r\n        :type val: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def remove(self, val):\r\n        \"\"\"\r\n        Removes a value from the set. Returns true if the set contained the specified element.\r\n        :type val: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def getRandom(self):\r\n        \"\"\"\r\n        Get a random element from the set.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your RandomizedSet object will be instantiated and called as such:\r\n# obj = RandomizedSet()\r\n# param_1 = obj.insert(val)\r\n# param_2 = obj.remove(val)\r\n# param_3 = obj.getRandom()"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} RandomizedSet;\n\n/** Initialize your data structure here. */\nRandomizedSet* randomizedSetCreate() {\n    \n}\n\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\nbool randomizedSetInsert(RandomizedSet* obj, int val) {\n    \n}\n\n/** Removes a value from the set. Returns true if the set contained the specified element. */\nbool randomizedSetRemove(RandomizedSet* obj, int val) {\n    \n}\n\n/** Get a random element from the set. */\nint randomizedSetGetRandom(RandomizedSet* obj) {\n    \n}\n\nvoid randomizedSetFree(RandomizedSet* obj) {\n    \n}\n\n/**\n * Your RandomizedSet struct will be instantiated and called as such:\n * struct RandomizedSet* obj = randomizedSetCreate();\n * bool param_1 = randomizedSetInsert(obj, val);\n * bool param_2 = randomizedSetRemove(obj, val);\n * int param_3 = randomizedSetGetRandom(obj);\n * randomizedSetFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class RandomizedSet {\r\n\r\n    /** Initialize your data structure here. */\r\n    public RandomizedSet() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\r\n    public bool Insert(int val) {\r\n        \r\n    }\r\n    \r\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\r\n    public bool Remove(int val) {\r\n        \r\n    }\r\n    \r\n    /** Get a random element from the set. */\r\n    public int GetRandom() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your RandomizedSet object will be instantiated and called as such:\r\n * RandomizedSet obj = new RandomizedSet();\r\n * bool param_1 = obj.Insert(val);\r\n * bool param_2 = obj.Remove(val);\r\n * int param_3 = obj.GetRandom();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar RandomizedSet = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \r\n * @param {number} val\r\n * @return {boolean}\r\n */\r\nRandomizedSet.prototype.insert = function(val) {\r\n    \r\n};\r\n\r\n/**\r\n * Removes a value from the set. Returns true if the set contained the specified element. \r\n * @param {number} val\r\n * @return {boolean}\r\n */\r\nRandomizedSet.prototype.remove = function(val) {\r\n    \r\n};\r\n\r\n/**\r\n * Get a random element from the set.\r\n * @return {number}\r\n */\r\nRandomizedSet.prototype.getRandom = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your RandomizedSet object will be instantiated and called as such:\r\n * var obj = Object.create(RandomizedSet).createNew()\r\n * var param_1 = obj.insert(val)\r\n * var param_2 = obj.remove(val)\r\n * var param_3 = obj.getRandom()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class RandomizedSet\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Inserts a value to the set. Returns true if the set did not already contain the specified element.\r\n    :type val: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def insert(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Removes a value from the set. Returns true if the set contained the specified element.\r\n    :type val: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def remove(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get a random element from the set.\r\n    :rtype: Integer\r\n=end\r\n    def get_random()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your RandomizedSet object will be instantiated and called as such:\r\n# obj = RandomizedSet.new()\r\n# param_1 = obj.insert(val)\r\n# param_2 = obj.remove(val)\r\n# param_3 = obj.get_random()"},{"value":"golang","text":"Go","defaultCode":"type RandomizedSet struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() RandomizedSet {\r\n    \r\n}\r\n\r\n\r\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\r\nfunc (this *RandomizedSet) Insert(val int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Removes a value from the set. Returns true if the set contained the specified element. */\r\nfunc (this *RandomizedSet) Remove(val int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Get a random element from the set. */\r\nfunc (this *RandomizedSet) GetRandom() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your RandomizedSet object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * param_1 := obj.Insert(val);\r\n * param_2 := obj.Remove(val);\r\n * param_3 := obj.GetRandom();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"\n    /** Initialize your data structure here. */class RandomizedSet() {\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    def insert(int val) : Boolean = {\n\n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    def remove(int val) : Boolean = {\n\n    }\n    \n    /** Get a random element from the set. */\n    def getRandom() : Int = {\n\n    }\n}\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet();\n * Boolean param_1 = obj.insert(val);\n * Boolean param_2 = obj.remove(val);\n * Int param_3 = obj.getRandom();\n */"}],"testcase":"[\"RandomizedSet\",\"insert\",\"remove\",\"insert\",\"getRandom\",\"remove\",\"insert\",\"getRandom\"]\n[[],[1],[2],[2],[],[1],[2],[]]","testable":true}