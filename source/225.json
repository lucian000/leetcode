{"id":225,"name":"Implement Stack using Queues","key":"implement-stack-using-queues","link":"https://leetcode.com/problems/implement-stack-using-queues","percent":32.61957938245657,"level":"Easy","totalAC":"","totalSubmit":"","desc":"\r\nImplement the following operations of a stack using queues.\r\n\r\n\r\npush(x) -- Push element x onto stack.\r\n\r\n\r\npop() -- Removes the element on top of the stack.\r\n\r\n\r\ntop() -- Get the top element.\r\n\r\n\r\nempty() -- Return whether the stack is empty.\r\n\r\n\r\nNotes:\r\n\r\nYou must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.\r\nDepending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.\r\nYou may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).\r\n\r\n\r\n\r\nCredits:Special thanks to @jianchao.li.fighter for adding this problem and all test cases.","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyStack {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    MyStack() {\r\n        \r\n    }\r\n    \r\n    /** Push element x onto stack. */\r\n    void push(int x) {\r\n        \r\n    }\r\n    \r\n    /** Removes the element on top of the stack and returns that element. */\r\n    int pop() {\r\n        \r\n    }\r\n    \r\n    /** Get the top element. */\r\n    int top() {\r\n        \r\n    }\r\n    \r\n    /** Returns whether the stack is empty. */\r\n    bool empty() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MyStack object will be instantiated and called as such:\r\n * MyStack obj = new MyStack();\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * int param_3 = obj.top();\r\n * bool param_4 = obj.empty();\r\n */"},{"value":"java","text":"Java","defaultCode":"public class MyStack {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyStack() {\r\n        \r\n    }\r\n    \r\n    /** Push element x onto stack. */\r\n    public void push(int x) {\r\n        \r\n    }\r\n    \r\n    /** Removes the element on top of the stack and returns that element. */\r\n    public int pop() {\r\n        \r\n    }\r\n    \r\n    /** Get the top element. */\r\n    public int top() {\r\n        \r\n    }\r\n    \r\n    /** Returns whether the stack is empty. */\r\n    public boolean empty() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyStack object will be instantiated and called as such:\r\n * MyStack obj = new MyStack();\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * int param_3 = obj.top();\r\n * boolean param_4 = obj.empty();\r\n */"},{"value":"python","text":"Python","defaultCode":"class MyStack(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def push(self, x):\r\n        \"\"\"\r\n        Push element x onto stack.\r\n        :type x: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def pop(self):\r\n        \"\"\"\r\n        Removes the element on top of the stack and returns that element.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def top(self):\r\n        \"\"\"\r\n        Get the top element.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def empty(self):\r\n        \"\"\"\r\n        Returns whether the stack is empty.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyStack object will be instantiated and called as such:\r\n# obj = MyStack()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.empty()"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} MyStack;\n\n/** Initialize your data structure here. */\nMyStack* myStackCreate(int maxSize) {\n    \n}\n\n/** Push element x onto stack. */\nvoid myStackPush(MyStack* obj, int x) {\n    \n}\n\n/** Removes the element on top of the stack and returns that element. */\nint myStackPop(MyStack* obj) {\n    \n}\n\n/** Get the top element. */\nint myStackTop(MyStack* obj) {\n    \n}\n\n/** Returns whether the stack is empty. */\nbool myStackEmpty(MyStack* obj) {\n    \n}\n\nvoid myStackFree(MyStack* obj) {\n    \n}\n\n/**\n * Your MyStack struct will be instantiated and called as such:\n * struct MyStack* obj = myStackCreate(maxSize);\n * myStackPush(obj, x);\n * int param_2 = myStackPop(obj);\n * int param_3 = myStackTop(obj);\n * bool param_4 = myStackEmpty(obj);\n * myStackFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MyStack {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyStack() {\r\n        \r\n    }\r\n    \r\n    /** Push element x onto stack. */\r\n    public void Push(int x) {\r\n        \r\n    }\r\n    \r\n    /** Removes the element on top of the stack and returns that element. */\r\n    public int Pop() {\r\n        \r\n    }\r\n    \r\n    /** Get the top element. */\r\n    public int Top() {\r\n        \r\n    }\r\n    \r\n    /** Returns whether the stack is empty. */\r\n    public bool Empty() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyStack object will be instantiated and called as such:\r\n * MyStack obj = new MyStack();\r\n * obj.Push(x);\r\n * int param_2 = obj.Pop();\r\n * int param_3 = obj.Top();\r\n * bool param_4 = obj.Empty();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar MyStack = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Push element x onto stack. \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nMyStack.prototype.push = function(x) {\r\n    \r\n};\r\n\r\n/**\r\n * Removes the element on top of the stack and returns that element.\r\n * @return {number}\r\n */\r\nMyStack.prototype.pop = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Get the top element.\r\n * @return {number}\r\n */\r\nMyStack.prototype.top = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Returns whether the stack is empty.\r\n * @return {boolean}\r\n */\r\nMyStack.prototype.empty = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MyStack object will be instantiated and called as such:\r\n * var obj = Object.create(MyStack).createNew()\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * var param_3 = obj.top()\r\n * var param_4 = obj.empty()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyStack\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Push element x onto stack.\r\n    :type x: Integer\r\n    :rtype: Void\r\n=end\r\n    def push(x)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Removes the element on top of the stack and returns that element.\r\n    :rtype: Integer\r\n=end\r\n    def pop()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get the top element.\r\n    :rtype: Integer\r\n=end\r\n    def top()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns whether the stack is empty.\r\n    :rtype: Boolean\r\n=end\r\n    def empty()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MyStack object will be instantiated and called as such:\r\n# obj = MyStack.new()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.empty()"},{"value":"golang","text":"Go","defaultCode":"type MyStack struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() MyStack {\r\n    \r\n}\r\n\r\n\r\n/** Push element x onto stack. */\r\nfunc (this *MyStack) Push(x int)  {\r\n    \r\n}\r\n\r\n\r\n/** Removes the element on top of the stack and returns that element. */\r\nfunc (this *MyStack) Pop() int {\r\n    \r\n}\r\n\r\n\r\n/** Get the top element. */\r\nfunc (this *MyStack) Top() int {\r\n    \r\n}\r\n\r\n\r\n/** Returns whether the stack is empty. */\r\nfunc (this *MyStack) Empty() bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MyStack object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Push(x);\r\n * param_2 := obj.Pop();\r\n * param_3 := obj.Top();\r\n * param_4 := obj.Empty();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"\n    /** Initialize your data structure here. */class MyStack() {\n    \n    /** Push element x onto stack. */\n    def push(int x) {\n\n    }\n    \n    /** Removes the element on top of the stack and returns that element. */\n    def pop() : Int = {\n\n    }\n    \n    /** Get the top element. */\n    def top() : Int = {\n\n    }\n    \n    /** Returns whether the stack is empty. */\n    def empty() : Boolean = {\n\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * var obj = new MyStack();\n * obj.push(x);\n * Int param_2 = obj.pop();\n * Int param_3 = obj.top();\n * Boolean param_4 = obj.empty();\n */"}],"testcase":"[\"MyStack\",\"empty\"]\n[[],[]]","testable":true}