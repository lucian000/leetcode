{
 "id": 166,
 "name": "Fraction to Recurring Decimal",
 "key": "fraction-to-recurring-decimal",
 "link": "https://leetcode.com/problems/fraction-to-recurring-decimal",
 "percent": 17.397278637978417,
 "level": "Medium",
 "totalAC": "",
 "totalSubmit": "",
 "desc": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\r\n\r\nIf the fractional part is repeating, enclose the repeating part in parentheses.\r\n\r\nFor example,\r\n\r\nGiven numerator = 1, denominator = 2, return \"0.5\".\r\nGiven numerator = 2, denominator = 1, return \"2\".\r\nGiven numerator = 2, denominator = 3, return \"0.(6)\".\r\n\r\n\r\n\r\nCredits:Special thanks to @Shangrila for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    string fractionToDecimal(int numerator, int denominator) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public String fractionToDecimal(int numerator, int denominator) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def fractionToDecimal(self, numerator, denominator):\r\n        \"\"\"\r\n        :type numerator: int\r\n        :type denominator: int\r\n        :rtype: str\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "char* fractionToDecimal(int numerator, int denominator) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public string FractionToDecimal(int numerator, int denominator) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number} numerator\r\n * @param {number} denominator\r\n * @return {string}\r\n */\r\nvar fractionToDecimal = function(numerator, denominator) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} numerator\r\n# @param {Integer} denominator\r\n# @return {String}\r\ndef fraction_to_decimal(numerator, denominator)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func fractionToDecimal(_ numerator: Int, _ denominator: Int) -> String {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func fractionToDecimal(numerator int, denominator int) string {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def fractionToDecimal(numerator: Int, denominator: Int): String = {\n        \n    }\n}"
  }
 ],
 "testcase": "1\n5",
 "testable": true
}