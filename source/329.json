{
 "id": 329,
 "name": "Longest Increasing Path in a Matrix",
 "key": "longest-increasing-path-in-a-matrix",
 "link": "https://leetcode.com/problems/longest-increasing-path-in-a-matrix",
 "percent": 36.16624879842234,
 "level": "Hard",
 "totalAC": "",
 "totalSubmit": "",
 "desc": "Given an integer matrix, find the length of the longest increasing path.\r\n\r\n\r\nFrom each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).\r\n\r\n\r\nExample 1:\r\n\r\nnums = [\r\n  [9,9,4],\r\n  [6,6,8],\r\n  [2,1,1]\r\n]\r\n\r\n\r\n\r\n\r\nReturn 4\r\n\r\nThe longest increasing path is [1, 2, 6, 9].\r\n\r\n\r\nExample 2:\r\n\r\nnums = [\r\n  [3,4,5],\r\n  [3,2,6],\r\n  [2,2,1]\r\n]\r\n\r\n\r\n\r\n\r\nReturn 4\r\n\r\nThe longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\r\n\r\nCredits:Special thanks to @dietpepsi for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int longestIncreasingPath(int[][] matrix) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def longestIncreasingPath(self, matrix):\r\n        \"\"\"\r\n        :type matrix: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int longestIncreasingPath(int** matrix, int matrixRowSize, int matrixColSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int LongestIncreasingPath(int[,] matrix) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[][]} matrix\r\n * @return {number}\r\n */\r\nvar longestIncreasingPath = function(matrix) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[][]} matrix\r\n# @return {Integer}\r\ndef longest_increasing_path(matrix)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func longestIncreasingPath(_ matrix: [[Int]]) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func longestIncreasingPath(matrix [][]int) int {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def longestIncreasingPath(matrix: Array[Array[Int]]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "[[9,9,4],[6,6,8],[2,1,1]]",
 "testable": true
}