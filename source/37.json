{"id":37,"name":"Sudoku Solver","key":"sudoku-solver","link":"https://leetcode.com/problems/sudoku-solver","percent":29.82826749527369,"level":"Hard","totalAC":"","totalSubmit":"","desc":"Write a program to solve a Sudoku puzzle by filling the empty cells.\r\n\r\nEmpty cells are indicated by the character '.'.\r\n\r\nYou may assume that there will be only one unique solution.\r\n\r\n\r\n\r\nA sudoku puzzle...\r\n\r\n\r\n\r\n\r\n...and its solution numbers marked in red.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    void solveSudoku(vector<vector<char>>& board) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    public void solveSudoku(char[][] board) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def solveSudoku(self, board):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :rtype: void Do not return anything, modify board in-place instead.\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"void solveSudoku(char** board, int boardRowSize, int boardColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public void SolveSudoku(char[,] board) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[][]} board\r\n * @return {void} Do not return anything, modify board in-place instead.\r\n */\r\nvar solveSudoku = function(board) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} board\r\n# @return {Void} Do not return anything, modify board in-place instead.\r\ndef solve_sudoku(board)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func solveSudoku(_ board: inout [[Character]]) {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func solveSudoku(board [][]byte)  {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\n        \n    }\n}"}],"testcase":"[\"..9748...\",\"7........\",\".2.1.9...\",\"..7...24.\",\".64.1.59.\",\".98...3..\",\"...8.3.2.\",\"........6\",\"...2759..\"]","testable":true}