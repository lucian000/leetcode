{
 "id": 150,
 "name": "Evaluate Reverse Polish Notation",
 "key": "evaluate-reverse-polish-notation",
 "link": "https://leetcode.com/problems/evaluate-reverse-polish-notation",
 "percent": 26.99131303504068,
 "level": "Medium",
 "totalAC": "",
 "totalSubmit": "",
 "desc": "\r\nEvaluate the value of an arithmetic expression in Reverse Polish Notation.\r\n\r\n\r\n\r\nValid operators are +, -, *, /. Each operand may be an integer or another expression.\r\n\r\n\r\n\r\nSome examples:\r\n\r\n  [\"2\", \"1\", \"+\", \"3\", \"*\"] -> ((2 + 1) * 3) -> 9\r\n  [\"4\", \"13\", \"5\", \"/\", \"+\"] -> (4 + (13 / 5)) -> 6\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int evalRPN(vector<string>& tokens) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int evalRPN(String[] tokens) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def evalRPN(self, tokens):\r\n        \"\"\"\r\n        :type tokens: List[str]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int evalRPN(char** tokens, int tokensSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int EvalRPN(string[] tokens) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string[]} tokens\r\n * @return {number}\r\n */\r\nvar evalRPN = function(tokens) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String[]} tokens\r\n# @return {Integer}\r\ndef eval_rpn(tokens)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func evalRPN(_ tokens: [String]) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func evalRPN(tokens []string) int {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def evalRPN(tokens: Array[String]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "[\"18\"]",
 "testable": true
}