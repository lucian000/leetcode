{
 "id": 399,
 "name": "Evaluate Division",
 "key": "evaluate-division",
 "link": "https://leetcode.com/problems/evaluate-division",
 "percent": 40.72697653107977,
 "level": "Medium",
 "totalAC": "",
 "totalSubmit": "",
 "desc": "\r\nEquations are given in the format A / B = k, where  A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.\r\n\r\nExample:\r\nGiven  a / b = 2.0, b / c = 3.0. queries are:  a / c = ?,  b / a = ?, a / e = ?,  a / a = ?, x / x = ? . return  [6.0, 0.5, -1.0, 1.0, -1.0 ].\r\n\r\n\r\nThe input is:  vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return  vector<double>.\r\n\r\n\r\nAccording to the example above:\r\nequations = [ [\"a\", \"b\"], [\"b\", \"c\"] ],\r\nvalues = [2.0, 3.0],\r\nqueries = [ [\"a\", \"c\"], [\"b\", \"a\"], [\"a\", \"e\"], [\"a\", \"a\"], [\"x\", \"x\"] ]. \r\n\r\n\r\n\r\nThe input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    vector<double> calcEquation(vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public double[] calcEquation(String[][] equations, double[] values, String[][] queries) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def calcEquation(self, equations, values, queries):\r\n        \"\"\"\r\n        :type equations: List[List[str]]\r\n        :type values: List[float]\r\n        :type queries: List[List[str]]\r\n        :rtype: List[float]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\ndouble* calcEquation(char*** equations, int equationsRowSize, int equationsColSize, double* values, int valuesSize, char*** queries, int queriesRowSize, int queriesColSize, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public double[] CalcEquation(string[,] equations, double[] values, string[,] queries) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string[][]} equations\r\n * @param {number[]} values\r\n * @param {string[][]} queries\r\n * @return {number[]}\r\n */\r\nvar calcEquation = function(equations, values, queries) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {string[][]} equations\r\n# @param {Float[]} values\r\n# @param {string[][]} queries\r\n# @return {Float[]}\r\ndef calc_equation(equations, values, queries)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func calcEquation(_ equations: [[String]], _ values: [Double], _ queries: [[String]]) -> [Double] {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func calcEquation(equations [][]string, values []float64, queries [][]string) []float64 {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def calcEquation(equations: Array[Array[String]], values: Array[Double], queries: Array[Array[String]]): Array[Double] = {\n        \n    }\n}"
  }
 ],
 "testcase": "[ [\"a\",\"b\"],[\"b\",\"c\"] ]\n[2.0,3.0]\n[ [\"a\",\"c\"],[\"b\",\"c\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"] ]",
 "testable": true
}