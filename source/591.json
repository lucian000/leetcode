{"text": ["[591] Tag Validator  \t(File: 591.tag-validator.py)\n", "\n", "https://leetcode.com/problems/tag-validator\n", "\n", "* Hard (26.43%)\n", "* Total Accepted:    NaN\n", "* Total Submissions: NaN\n", "* Testcase Example:  '\"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"'\n", "\n", "Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold:\n", "\n", "The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\n", "A closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\n", "A valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.\n", "A valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.\n", "A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\n", "A < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME  (not necessarily valid).\n", "The cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>. \n", "CDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters. \n", "\n", "\n", "Valid Code Examples:\n", "\n", "Input: \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\n", "Output: True\n", "Explanation: \n", "The code is wrapped in a closed tag : <DIV> and </DIV>. \n", "The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \n", "Although CDATA_CONTENT has unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as tag.\n", "So TAG_CONTENT is valid, and then the code is valid. Thus return true.\n", "\n", "Input: \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\n", "Output: True\n", "Explanation:\n", "We first separate the code into : start_tag|tag_content|end_tag.\n", "start_tag -> \"<DIV>\"\n", "end_tag -> \"</DIV>\"\n", "tag_content could also be separated into : text1|cdata|text2.\n", "text1 -> \">>  ![cdata[]] \"\n", "cdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"\n", "text2 -> \"]]>>]\"\n", "\n", "The reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\n", "The reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.\n", "\n", "\n", "\n", "Invalid Code Examples:\n", "\n", "Input: \"<A>  <B> </A>   </B>\"\n", "Output: False\n", "Explanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.\n", "\n", "Input: \"<DIV>  div tag is not closed  <DIV>\"\n", "Output: False\n", "\n", "Input: \"<DIV>  unmatched <  </DIV>\"\n", "Output: False\n", "\n", "Input: \"<DIV> closed tags with invalid tag name  <b>123</b> </DIV>\"\n", "Output: False\n", "\n", "Input: \"<DIV> unmatched tags with invalid tag name  </1234567890> and <CDATA[[]]>  </DIV>\"\n", "Output: False\n", "\n", "Input: \"<DIV>  unmatched start tag <B>  and unmatched end tag </C>  </DIV>\"\n", "Output: False\n", "\n", "\n", "\n", "Note:\n", "\n", "For simplicity, you could assume the input code (including the any characters mentioned above) only contain letters, digits, '<','>','/','!','[',']' and ' '.\n", "\n", "\n"], "filename": "591.tag-validator.py"}