{"id":312,"name":"Burst Balloons","key":"burst-balloons","link":"https://leetcode.com/problems/burst-balloons","percent":42.39356714923642,"level":"Hard","totalAC":"","totalSubmit":"","desc":"\r\n    Given n balloons, indexed from 0 to n-1. Each balloon is painted with a\r\n    number on it represented by array nums.\r\n\r\n    You are asked to burst all the balloons. If the you burst\r\n    balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left\r\n    and right are adjacent indices of i. After the burst, the left and right\r\n    then becomes adjacent.\r\n\r\n\r\n    Find the maximum coins you can collect by bursting the balloons wisely.\r\n\r\n\r\n    Note: \r\n    (1) You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.\r\n    (2) 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100\r\n\r\n\r\n\r\n\r\n    Example:\r\n\r\n\r\n    Given [3, 1, 5, 8]\r\n\r\n\r\n    Return 167\r\n\r\n\r\n    nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []\r\n   coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\r\n\r\n\r\nCredits:Special thanks to @dietpepsi for adding this problem and creating all test cases.","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int maxCoins(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    public int maxCoins(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def maxCoins(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int maxCoins(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MaxCoins(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maxCoins = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef max_coins(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxCoins(_ nums: [Int]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxCoins(nums []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxCoins(nums: Array[Int]): Int = {\n        \n    }\n}"}],"testcase":"[3,1,5,8]","testable":true}