{"id":373,"name":"Find K Pairs with Smallest Sums","slug":"find-k-pairs-with-smallest-sums","link":"https://leetcode.com/problems/find-k-pairs-with-smallest-sums","percent":30.571459671274628,"level":"Medium","category":"algorithms","totalAC":"28.1K","totalSubmit":"91.9K","desc":"\r\nYou are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k. \r\n\r\n\r\nDefine a pair (u,v) which consists of one element from the first array and one element from the second array.\r\n\r\nFind the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.\r\n\r\n\r\nExample 1:\r\n\r\nGiven nums1 = [1,7,11], nums2 = [2,4,6],  k = 3\r\n\r\nReturn: [1,2],[1,4],[1,6]\r\n\r\nThe first 3 pairs are returned from the sequence:\r\n[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\r\n\r\n\r\n\r\nExample 2:\r\n\r\nGiven nums1 = [1,1,2], nums2 = [1,2,3],  k = 2\r\n\r\nReturn: [1,1],[1,1]\r\n\r\nThe first 2 pairs are returned from the sequence:\r\n[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\r\n\r\n\r\n\r\nExample 3:\r\n\r\nGiven nums1 = [1,2], nums2 = [3],  k = 3 \r\n\r\nReturn: [1,3],[2,3]\r\n\r\nAll possible pairs are returned from the sequence:\r\n[1,3],[2,3]\r\n\r\n\r\n\r\nCredits:Special thanks to @elmirap and @StefanPochmann for adding this problem and creating all test cases.","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<pair<int, int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def kSmallestPairs(self, nums1, nums2, k):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :type k: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** kSmallestPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int[]> KSmallestPairs(int[] nums1, int[] nums2, int k) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @param {number} k\r\n * @return {number[][]}\r\n */\r\nvar kSmallestPairs = function(nums1, nums2, k) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @param {Integer} k\r\n# @return {Integer[][]}\r\ndef k_smallest_pairs(nums1, nums2, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func kSmallestPairs(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> [[Int]] {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func kSmallestPairs(nums1 []int, nums2 []int, k int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def kSmallestPairs(nums1: Array[Int], nums2: Array[Int], k: Int): List[Array[Int]] = {\n        \n    }\n}"}],"testcase":"[1,7,11]\n[2,4,6]\n3","testable":true}