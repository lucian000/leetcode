{"id":386,"name":"Lexicographical Numbers","slug":"lexicographical-numbers","link":"https://leetcode.com/problems/lexicographical-numbers","percent":40.93987704490987,"level":"Medium","category":"algorithms","totalAC":"19.6K","totalSubmit":"48K","desc":"\r\nGiven an integer n, return 1 - n in lexicographical order.\r\n\r\n\r\n\r\nFor example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].\r\n\r\n\r\n\r\nPlease optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> lexicalOrder(int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    public List<Integer> lexicalOrder(int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def lexicalOrder(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> LexicalOrder(int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @return {number[]}\r\n */\r\nvar lexicalOrder = function(n) {\r\n    \r\n};"}],"testcase":"13","testable":true}