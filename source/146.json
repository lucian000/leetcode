{"text": ["[146] LRU Cache  \t(File: 146.lru-cache.py)\n", "\n", "https://leetcode.com/problems/lru-cache\n", "\n", "* Hard (17.41%)\n", "* Total Accepted:    NaN\n", "* Total Submissions: NaN\n", "* Testcase Example:  '[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]'\n", "\n", "\n", "Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.\n", "\n", "\n", "\n", "get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.\n", "put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\n", "\n", "\n", "Follow up:\n", "Could you do both operations in O(1) time complexity?\n", "\n", "Example:\n", "\n", "LRUCache cache = new LRUCache( 2 /* capacity */ );\n", "\n", "cache.put(1, 1);\n", "cache.put(2, 2);\n", "cache.get(1);       // returns 1\n", "cache.put(3, 3);    // evicts key 2\n", "cache.get(2);       // returns -1 (not found)\n", "cache.put(4, 4);    // evicts key 1\n", "cache.get(1);       // returns -1 (not found)\n", "cache.get(3);       // returns 3\n", "cache.get(4);       // returns 4\n", "\n", "\n"], "filename": "146.lru-cache.py"}