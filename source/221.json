{
 "id": 221,
 "name": "Maximal Square",
 "key": "maximal-square",
 "link": "https://leetcode.com/problems/maximal-square",
 "percent": 28.579759657992497,
 "level": "Medium",
 "totalAC": "",
 "totalSubmit": "",
 "desc": "\r\nGiven a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\r\n\r\n\r\nFor example, given the following matrix:\r\n\r\n1 0 1 0 0\r\n1 0 1 1 1\r\n1 1 1 1 1\r\n1 0 0 1 0\r\n\r\nReturn 4.\r\n\r\n\r\nCredits:Special thanks to @Freezen for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int maximalSquare(vector<vector<char>>& matrix) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int maximalSquare(char[][] matrix) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def maximalSquare(self, matrix):\r\n        \"\"\"\r\n        :type matrix: List[List[str]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int maximalSquare(char** matrix, int matrixRowSize, int matrixColSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int MaximalSquare(char[,] matrix) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {character[][]} matrix\r\n * @return {number}\r\n */\r\nvar maximalSquare = function(matrix) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Character[][]} matrix\r\n# @return {Integer}\r\ndef maximal_square(matrix)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func maximalSquare(_ matrix: [[Character]]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func maximalSquare(matrix [][]byte) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def maximalSquare(matrix: Array[Array[Char]]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "[\"10100\",\"10111\",\"11111\",\"10010\"]",
 "testable": true
}