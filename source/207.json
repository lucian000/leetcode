{"text": ["[207] Course Schedule  \t(File: 207.course-schedule.py)\n", "\n", "https://leetcode.com/problems/course-schedule\n", "\n", "* Medium (31.76%)\n", "* Total Accepted:    NaN\n", "* Total Submissions: NaN\n", "* Testcase Example:  '2\\n[[1,0]]'\n", "\n", "\n", "There are a total of n courses you have to take, labeled from 0 to n - 1.\n", "\n", "Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\n", "\n", "\n", "Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?\n", "\n", "\n", "For example:\n", "2, [[1,0]]\n", "There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.\n", "\n", "2, [[1,0],[0,1]]\n", "There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n", "\n", "Note:\n", "\n", "The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\n", "You may assume that there are no duplicate edges in the input prerequisites.\n", "\n", "\n", "\n", "click to show more hints.\n", "\n", "Hints:\n", "\n", "This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.\n", "Topological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.\n", "Topological sort could also be done via BFS.\n", "\n", "\n"], "filename": "207.course-schedule.py"}