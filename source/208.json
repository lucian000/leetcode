{"id":208,"name":"Implement Trie (Prefix Tree)","key":"implement-trie-prefix-tree","link":"https://leetcode.com/problems/implement-trie-prefix-tree","percent":27.77602757831539,"level":"Medium","totalAC":"","totalSubmit":"","desc":"\r\nImplement a trie with insert, search, and startsWith methods.\r\n\r\n\r\n\r\nNote:\r\nYou may assume that all inputs are consist of lowercase letters a-z.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Trie {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    Trie() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    void insert(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    bool search(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    bool startsWith(string prefix) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * Trie obj = new Trie();\r\n * obj.insert(word);\r\n * bool param_2 = obj.search(word);\r\n * bool param_3 = obj.startsWith(prefix);\r\n */"},{"value":"java","text":"Java","defaultCode":"public class Trie {\r\n\r\n    /** Initialize your data structure here. */\r\n    public Trie() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    public void insert(String word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    public boolean search(String word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    public boolean startsWith(String prefix) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * Trie obj = new Trie();\r\n * obj.insert(word);\r\n * boolean param_2 = obj.search(word);\r\n * boolean param_3 = obj.startsWith(prefix);\r\n */"},{"value":"python","text":"Python","defaultCode":"class Trie(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def insert(self, word):\r\n        \"\"\"\r\n        Inserts a word into the trie.\r\n        :type word: str\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def search(self, word):\r\n        \"\"\"\r\n        Returns if the word is in the trie.\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def startsWith(self, prefix):\r\n        \"\"\"\r\n        Returns if there is any word in the trie that starts with the given prefix.\r\n        :type prefix: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Trie object will be instantiated and called as such:\r\n# obj = Trie()\r\n# obj.insert(word)\r\n# param_2 = obj.search(word)\r\n# param_3 = obj.startsWith(prefix)"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} Trie;\n\n/** Initialize your data structure here. */\nTrie* trieCreate() {\n    \n}\n\n/** Inserts a word into the trie. */\nvoid trieInsert(Trie* obj, char* word) {\n    \n}\n\n/** Returns if the word is in the trie. */\nbool trieSearch(Trie* obj, char* word) {\n    \n}\n\n/** Returns if there is any word in the trie that starts with the given prefix. */\nbool trieStartsWith(Trie* obj, char* prefix) {\n    \n}\n\nvoid trieFree(Trie* obj) {\n    \n}\n\n/**\n * Your Trie struct will be instantiated and called as such:\n * struct Trie* obj = trieCreate();\n * trieInsert(obj, word);\n * bool param_2 = trieSearch(obj, word);\n * bool param_3 = trieStartsWith(obj, prefix);\n * trieFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Trie {\r\n\r\n    /** Initialize your data structure here. */\r\n    public Trie() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    public void Insert(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    public bool Search(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    public bool StartsWith(string prefix) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * Trie obj = new Trie();\r\n * obj.Insert(word);\r\n * bool param_2 = obj.Search(word);\r\n * bool param_3 = obj.StartsWith(prefix);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar Trie = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Inserts a word into the trie. \r\n * @param {string} word\r\n * @return {void}\r\n */\r\nTrie.prototype.insert = function(word) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns if the word is in the trie. \r\n * @param {string} word\r\n * @return {boolean}\r\n */\r\nTrie.prototype.search = function(word) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns if there is any word in the trie that starts with the given prefix. \r\n * @param {string} prefix\r\n * @return {boolean}\r\n */\r\nTrie.prototype.startsWith = function(prefix) {\r\n    \r\n};\r\n\r\n/** \r\n * Your Trie object will be instantiated and called as such:\r\n * var obj = Object.create(Trie).createNew()\r\n * obj.insert(word)\r\n * var param_2 = obj.search(word)\r\n * var param_3 = obj.startsWith(prefix)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Trie\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Inserts a word into the trie.\r\n    :type word: String\r\n    :rtype: Void\r\n=end\r\n    def insert(word)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns if the word is in the trie.\r\n    :type word: String\r\n    :rtype: Boolean\r\n=end\r\n    def search(word)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns if there is any word in the trie that starts with the given prefix.\r\n    :type prefix: String\r\n    :rtype: Boolean\r\n=end\r\n    def starts_with(prefix)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Trie object will be instantiated and called as such:\r\n# obj = Trie.new()\r\n# obj.insert(word)\r\n# param_2 = obj.search(word)\r\n# param_3 = obj.starts_with(prefix)"},{"value":"golang","text":"Go","defaultCode":"type Trie struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() Trie {\r\n    \r\n}\r\n\r\n\r\n/** Inserts a word into the trie. */\r\nfunc (this *Trie) Insert(word string)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns if the word is in the trie. */\r\nfunc (this *Trie) Search(word string) bool {\r\n    \r\n}\r\n\r\n\r\n/** Returns if there is any word in the trie that starts with the given prefix. */\r\nfunc (this *Trie) StartsWith(prefix string) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Insert(word);\r\n * param_2 := obj.Search(word);\r\n * param_3 := obj.StartsWith(prefix);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"\n    /** Initialize your data structure here. */class Trie() {\n    \n    /** Inserts a word into the trie. */\n    def insert(String word) {\n\n    }\n    \n    /** Returns if the word is in the trie. */\n    def search(String word) : Boolean = {\n\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    def startsWith(String prefix) : Boolean = {\n\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie();\n * obj.insert(word);\n * Boolean param_2 = obj.search(word);\n * Boolean param_3 = obj.startsWith(prefix);\n */"}],"testcase":"[\"Trie\",\"search\"]\n[[],[\"a\"]]","testable":true}