{"text": ["[211] Add and Search Word - Data structure design  \t(File: 211.add-and-search-word-data-structure-design.py)\n", "\n", "https://leetcode.com/problems/add-and-search-word-data-structure-design\n", "\n", "* Medium (22.33%)\n", "* Total Accepted:    NaN\n", "* Total Submissions: NaN\n", "* Testcase Example:  '[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]'\n", "\n", "\n", "Design a data structure that supports the following two operations:\n", "\n", "\n", "void addWord(word)\n", "bool search(word)\n", "\n", "\n", "\n", "search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.\n", "\n", "\n", "For example:\n", "\n", "addWord(\"bad\")\n", "addWord(\"dad\")\n", "addWord(\"mad\")\n", "search(\"pad\") -> false\n", "search(\"bad\") -> true\n", "search(\".ad\") -> true\n", "search(\"b..\") -> true\n", "\n", "\n", "\n", "Note:\n", "You may assume that all words are consist of lowercase letters a-z.\n", "\n", "\n", "click to show hint.\n", "\n", "You should be familiar with how a Trie works. If not, please work on this problem: Implement Trie (Prefix Tree) first.\n", "\n"], "filename": "211.add-and-search-word-data-structure-design.py"}