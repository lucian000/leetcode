{
 "id": 637,
 "ids": "637",
 "state": "None",
 "name": "Average of Levels in Binary Tree",
 "key": "average-of-levels-in-binary-tree",
 "link": "https://leetcode.com/problems/average-of-levels-in-binary-tree",
 "locked": false,
 "percent": 58.49172286940527,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "7.6K",
 "totalSubmit": "13.1K",
 "desc": "Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.\r\n\r\nExample 1:\r\n\r\nInput:\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\nOutput: [3, 14.5, 11]\r\nExplanation:\r\nThe average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].\r\n\r\n\r\n\r\nNote:\r\n\r\nThe range of node's value is in the range of 32-bit signed integer.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<double> averageOfLevels(TreeNode* root) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public List<Double> averageOfLevels(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def averageOfLevels(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: List[float]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def averageOfLevels(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: List[float]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\ndouble* averageOfLevels(struct TreeNode* root, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<double> AverageOfLevels(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar averageOfLevels = function(root) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Float[]}\r\ndef average_of_levels(root)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func averageOfLevels(_ root: TreeNode?) -> list<double> {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc averageOfLevels(root *TreeNode) []float64 {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def averageOfLevels(root: TreeNode): Array[Double] = {\r\n        \r\n    }\r\n}"
  }
 ],
 "testcase": "'[3,9,20,15,7]'",
 "testable": true,
 "slug": "average-of-levels-in-binary-tree",
 "category": "algorithms",
 "fname": "637.average-of-levels-in-binary-tree.algorithms.py",
 "test_your": {
  "code_answer": [
   "[3.00000,14.50000,11.00000]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "49 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502638345.59_784204_36"
 },
 "test_expected": {
  "code_answer": [
   "[3.00000,14.50000,11.00000]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "82 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502638345.61_784204_36"
 },
 "submit_chart": [
  [
   "58",
   "0.0504"
  ],
  [
   "62",
   "0.4034"
  ],
  [
   "65",
   "1.5633"
  ],
  [
   "66",
   "1.0590"
  ],
  [
   "68",
   "2.5719"
  ],
  [
   "69",
   "4.1351"
  ],
  [
   "72",
   "9.1780"
  ],
  [
   "73",
   "0.6051"
  ],
  [
   "75",
   "6.8583"
  ],
  [
   "76",
   "4.1856"
  ],
  [
   "78",
   "3.5804"
  ],
  [
   "79",
   "7.2113"
  ],
  [
   "82",
   "10.8926"
  ],
  [
   "83",
   "0.0504"
  ],
  [
   "85",
   "5.2950"
  ],
  [
   "86",
   "3.0257"
  ],
  [
   "88",
   "2.2189"
  ],
  [
   "89",
   "5.3454"
  ],
  [
   "92",
   "4.8411"
  ],
  [
   "93",
   "0.1009"
  ],
  [
   "95",
   "2.3197"
  ],
  [
   "96",
   "0.9077"
  ],
  [
   "98",
   "0.7564"
  ],
  [
   "99",
   "1.4120"
  ],
  [
   "102",
   "2.5719"
  ],
  [
   "105",
   "1.4624"
  ],
  [
   "106",
   "0.8069"
  ],
  [
   "108",
   "0.5547"
  ],
  [
   "109",
   "1.3616"
  ],
  [
   "112",
   "1.6137"
  ],
  [
   "115",
   "0.8069"
  ],
  [
   "116",
   "0.2521"
  ],
  [
   "118",
   "0.2521"
  ],
  [
   "119",
   "0.6051"
  ],
  [
   "122",
   "1.0590"
  ],
  [
   "125",
   "0.7060"
  ],
  [
   "126",
   "0.5043"
  ],
  [
   "128",
   "0.2521"
  ],
  [
   "129",
   "0.3530"
  ],
  [
   "132",
   "0.7060"
  ],
  [
   "135",
   "0.4034"
  ],
  [
   "136",
   "0.3530"
  ],
  [
   "138",
   "0.0504"
  ],
  [
   "139",
   "0.3026"
  ],
  [
   "142",
   "0.5547"
  ],
  [
   "145",
   "0.2017"
  ],
  [
   "146",
   "0.1513"
  ],
  [
   "148",
   "0.0504"
  ],
  [
   "149",
   "0.3026"
  ],
  [
   "152",
   "0.1009"
  ],
  [
   "155",
   "0.1513"
  ],
  [
   "158",
   "0.0504"
  ],
  [
   "159",
   "0.3530"
  ],
  [
   "162",
   "0.3530"
  ],
  [
   "165",
   "0.3026"
  ],
  [
   "166",
   "0.0504"
  ],
  [
   "168",
   "0.1009"
  ],
  [
   "169",
   "0.1513"
  ],
  [
   "172",
   "0.0504"
  ],
  [
   "175",
   "0.1513"
  ],
  [
   "176",
   "0.0504"
  ],
  [
   "179",
   "0.2017"
  ],
  [
   "182",
   "0.1009"
  ],
  [
   "189",
   "0.0504"
  ],
  [
   "192",
   "0.1513"
  ],
  [
   "195",
   "0.1513"
  ],
  [
   "196",
   "0.0504"
  ],
  [
   "198",
   "0.0504"
  ],
  [
   "199",
   "0.0504"
  ],
  [
   "202",
   "0.0504"
  ],
  [
   "216",
   "0.0504"
  ],
  [
   "225",
   "0.0504"
  ],
  [
   "229",
   "0.0504"
  ],
  [
   "232",
   "0.0504"
  ],
  [
   "236",
   "0.0504"
  ],
  [
   "238",
   "0.0504"
  ],
  [
   "239",
   "0.0504"
  ],
  [
   "245",
   "0.0504"
  ],
  [
   "252",
   "0.0504"
  ],
  [
   "265",
   "0.0504"
  ],
  [
   "275",
   "0.0504"
  ],
  [
   "309",
   "0.0504"
  ],
  [
   "315",
   "0.0504"
  ],
  [
   "392",
   "0.0504"
  ],
  [
   "405",
   "0.0504"
  ],
  [
   "452",
   "0.0504"
  ],
  [
   "456",
   "0.0504"
  ],
  [
   "492",
   "0.0504"
  ],
  [
   "499",
   "0.0504"
  ],
  [
   "512",
   "0.0504"
  ],
  [
   "525",
   "0.0504"
  ],
  [
   "532",
   "0.0504"
  ],
  [
   "578",
   "0.0504"
  ],
  [
   "602",
   "0.0504"
  ],
  [
   "625",
   "0.0504"
  ],
  [
   "655",
   "0.0504"
  ],
  [
   "668",
   "0.0504"
  ],
  [
   "672",
   "0.0504"
  ],
  [
   "679",
   "0.0504"
  ],
  [
   "689",
   "0.0504"
  ],
  [
   "705",
   "0.1009"
  ],
  [
   "719",
   "0.0504"
  ],
  [
   "722",
   "0.0504"
  ],
  [
   "725",
   "0.1009"
  ],
  [
   "732",
   "0.1009"
  ],
  [
   "749",
   "0.0504"
  ],
  [
   "765",
   "0.0504"
  ],
  [
   "782",
   "0.0504"
  ],
  [
   "789",
   "0.0504"
  ],
  [
   "982",
   "0.0504"
  ],
  [
   "1005",
   "0.0504"
  ],
  [
   "1375",
   "0.0504"
  ],
  [
   "1405",
   "0.0504"
  ],
  [
   "1476",
   "0.0504"
  ],
  [
   "1699",
   "0.0504"
  ],
  [
   "1738",
   "0.0504"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 64,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "89 ms",
  "compare_result": "1111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 64,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 637,
  "name": "Your",
  "id": 113704297
 }
}