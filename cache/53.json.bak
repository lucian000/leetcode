{
 "id": 53,
 "ids": "53",
 "state": "None",
 "name": "Maximum Subarray",
 "key": "maximum-subarray",
 "link": "https://leetcode.com/problems/maximum-subarray",
 "locked": false,
 "percent": 39.48806853725149,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "207.2K",
 "totalSubmit": "524.6K",
 "desc": "\r\nFind the contiguous subarray within an array (containing at least one number) which has the largest sum.\r\n\r\n\r\nFor example, given the array [-2,1,-3,4,-1,2,1,-5,4],\r\nthe contiguous subarray [4,-1,2,1] has the largest sum = 6.\r\n\r\n\r\nclick to show more practice.\r\n\r\nMore practice:\r\n\r\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int maxSubArray(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int maxSubArray(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def maxSubArray(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\""
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int maxSubArray(int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int MaxSubArray(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maxSubArray = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef max_sub_array(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func maxSubArray(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func maxSubArray(nums []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def maxSubArray(nums: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[-2,1,-3,4,-1,2,1,-5,4]'",
 "testable": true,
 "slug": "maximum-subarray",
 "category": "algorithms",
 "fname": "53.maximum-subarray.algorithms.py",
 "test_your": {
  "code_answer": [
   "6"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502548369.62_784204_18"
 },
 "test_expected": {
  "code_answer": [
   "6"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502548369.64_784204_18"
 },
 "submit_chart": [
  [
   "35",
   "0.1882"
  ],
  [
   "36",
   "0.1882"
  ],
  [
   "38",
   "0.5269"
  ],
  [
   "39",
   "1.5807"
  ],
  [
   "42",
   "6.2100"
  ],
  [
   "43",
   "0.4893"
  ],
  [
   "45",
   "8.0918"
  ],
  [
   "46",
   "5.8336"
  ],
  [
   "48",
   "5.2315"
  ],
  [
   "49",
   "12.3824"
  ],
  [
   "52",
   "14.9417"
  ],
  [
   "53",
   "0.6775"
  ],
  [
   "55",
   "7.4144"
  ],
  [
   "56",
   "3.6884"
  ],
  [
   "58",
   "2.6722"
  ],
  [
   "59",
   "6.2100"
  ],
  [
   "62",
   "5.4196"
  ],
  [
   "63",
   "0.1882"
  ],
  [
   "65",
   "2.1453"
  ],
  [
   "66",
   "1.0538"
  ],
  [
   "68",
   "0.8280"
  ],
  [
   "69",
   "1.5807"
  ],
  [
   "72",
   "1.5807"
  ],
  [
   "75",
   "0.8656"
  ],
  [
   "76",
   "0.4140"
  ],
  [
   "78",
   "0.6022"
  ],
  [
   "79",
   "0.9033"
  ],
  [
   "82",
   "1.0162"
  ],
  [
   "85",
   "0.7151"
  ],
  [
   "86",
   "0.3764"
  ],
  [
   "88",
   "0.0753"
  ],
  [
   "89",
   "0.2258"
  ],
  [
   "92",
   "0.4893"
  ],
  [
   "95",
   "0.1129"
  ],
  [
   "96",
   "0.1129"
  ],
  [
   "98",
   "0.0376"
  ],
  [
   "99",
   "0.0753"
  ],
  [
   "102",
   "0.0376"
  ],
  [
   "105",
   "0.2635"
  ],
  [
   "106",
   "0.0376"
  ],
  [
   "108",
   "0.1129"
  ],
  [
   "109",
   "0.1129"
  ],
  [
   "112",
   "0.3387"
  ],
  [
   "115",
   "0.1505"
  ],
  [
   "118",
   "0.0376"
  ],
  [
   "119",
   "0.1129"
  ],
  [
   "122",
   "0.2635"
  ],
  [
   "125",
   "0.2258"
  ],
  [
   "126",
   "0.0753"
  ],
  [
   "128",
   "0.0376"
  ],
  [
   "129",
   "0.1882"
  ],
  [
   "132",
   "0.1882"
  ],
  [
   "135",
   "0.1882"
  ],
  [
   "139",
   "0.0376"
  ],
  [
   "145",
   "0.0376"
  ],
  [
   "149",
   "0.1129"
  ],
  [
   "152",
   "0.1129"
  ],
  [
   "155",
   "0.0376"
  ],
  [
   "156",
   "0.0376"
  ],
  [
   "159",
   "0.0753"
  ],
  [
   "162",
   "0.0376"
  ],
  [
   "165",
   "0.0753"
  ],
  [
   "168",
   "0.0753"
  ],
  [
   "169",
   "0.0753"
  ],
  [
   "172",
   "0.0753"
  ],
  [
   "175",
   "0.0753"
  ],
  [
   "178",
   "0.0376"
  ],
  [
   "182",
   "0.0753"
  ],
  [
   "188",
   "0.0376"
  ],
  [
   "189",
   "0.1129"
  ],
  [
   "199",
   "0.0376"
  ],
  [
   "202",
   "0.1129"
  ],
  [
   "205",
   "0.0376"
  ],
  [
   "212",
   "0.0376"
  ],
  [
   "219",
   "0.0376"
  ],
  [
   "233",
   "0.0376"
  ],
  [
   "239",
   "0.0376"
  ],
  [
   "259",
   "0.0376"
  ],
  [
   "262",
   "0.0376"
  ],
  [
   "269",
   "0.0376"
  ],
  [
   "275",
   "0.0376"
  ],
  [
   "279",
   "0.0376"
  ],
  [
   "282",
   "0.0376"
  ],
  [
   "289",
   "0.0376"
  ],
  [
   "306",
   "0.0376"
  ],
  [
   "316",
   "0.0753"
  ],
  [
   "319",
   "0.0376"
  ],
  [
   "336",
   "0.0753"
  ],
  [
   "356",
   "0.0376"
  ],
  [
   "359",
   "0.0376"
  ],
  [
   "372",
   "0.0376"
  ],
  [
   "396",
   "0.0376"
  ],
  [
   "426",
   "0.0376"
  ],
  [
   "428",
   "0.0376"
  ],
  [
   "429",
   "0.0376"
  ],
  [
   "445",
   "0.0376"
  ],
  [
   "489",
   "0.0376"
  ],
  [
   "522",
   "0.0376"
  ],
  [
   "529",
   "0.0376"
  ],
  [
   "549",
   "0.0376"
  ],
  [
   "689",
   "0.0376"
  ],
  [
   "826",
   "0.0376"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 202,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "42 ms",
  "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 202,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 53,
  "name": "Your",
  "id": 113566093
 }
}