{
 "id": 455,
 "ids": "455",
 "state": "None",
 "name": "Assign Cookies",
 "key": "assign-cookies",
 "link": "https://leetcode.com/problems/assign-cookies",
 "locked": false,
 "percent": 47.11658138570046,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "27.3K",
 "totalSubmit": "57.8K",
 "desc": "\r\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\r\n\r\n\r\nNote:\r\nYou may assume the greed factor is always positive. \r\nYou cannot assign more than one cookie to one child.\r\n\r\n\r\nExample 1:\r\n\r\nInput: [1,2,3], [1,1]\r\n\r\nOutput: 1\r\n\r\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \r\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\r\nYou need to output 1.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [1,2], [1,2,3]\r\n\r\nOutput: 2\r\n\r\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \r\nYou have 3 cookies and their sizes are big enough to gratify all of the children, \r\nYou need to output 2.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int findContentChildren(vector<int>& g, vector<int>& s) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int findContentChildren(int[] g, int[] s) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def findContentChildren(self, g, s):\r\n        \"\"\"\r\n        :type g: List[int]\r\n        :type s: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int findContentChildren(int* g, int gSize, int* s, int sSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int FindContentChildren(int[] g, int[] s) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} g\r\n * @param {number[]} s\r\n * @return {number}\r\n */\r\nvar findContentChildren = function(g, s) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} g\r\n# @param {Integer[]} s\r\n# @return {Integer}\r\ndef find_content_children(g, s)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func findContentChildren(_ g: [Int], _ s: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func findContentChildren(g []int, s []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def findContentChildren(g: Array[Int], s: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,2,3]\\n[1,1]'",
 "testable": true,
 "slug": "assign-cookies",
 "category": "algorithms",
 "fname": "455.assign-cookies.algorithms.py",
 "test_your": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502012379.37_784204_17"
 },
 "test_expected": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502012379.39_784204_17"
 },
 "submit_chart": [
  [
   "69",
   "0.1757"
  ],
  [
   "72",
   "0.3515"
  ],
  [
   "75",
   "1.4060"
  ],
  [
   "76",
   "0.7030"
  ],
  [
   "78",
   "2.4605"
  ],
  [
   "79",
   "2.8120"
  ],
  [
   "82",
   "9.4903"
  ],
  [
   "83",
   "0.7030"
  ],
  [
   "85",
   "7.3814"
  ],
  [
   "86",
   "4.5694"
  ],
  [
   "88",
   "3.6907"
  ],
  [
   "89",
   "7.2056"
  ],
  [
   "92",
   "7.9086"
  ],
  [
   "93",
   "0.1757"
  ],
  [
   "95",
   "4.9209"
  ],
  [
   "96",
   "2.1090"
  ],
  [
   "98",
   "2.1090"
  ],
  [
   "99",
   "4.3937"
  ],
  [
   "102",
   "3.6907"
  ],
  [
   "105",
   "2.6362"
  ],
  [
   "106",
   "1.0545"
  ],
  [
   "108",
   "0.1757"
  ],
  [
   "109",
   "1.7575"
  ],
  [
   "112",
   "2.6362"
  ],
  [
   "113",
   "0.1757"
  ],
  [
   "115",
   "1.4060"
  ],
  [
   "116",
   "0.3515"
  ],
  [
   "118",
   "0.3515"
  ],
  [
   "119",
   "0.5272"
  ],
  [
   "122",
   "0.8787"
  ],
  [
   "125",
   "1.4060"
  ],
  [
   "126",
   "0.3515"
  ],
  [
   "129",
   "0.3515"
  ],
  [
   "132",
   "0.1757"
  ],
  [
   "135",
   "0.5272"
  ],
  [
   "136",
   "0.5272"
  ],
  [
   "138",
   "0.1757"
  ],
  [
   "139",
   "0.3515"
  ],
  [
   "142",
   "0.1757"
  ],
  [
   "145",
   "0.7030"
  ],
  [
   "146",
   "0.3515"
  ],
  [
   "149",
   "0.5272"
  ],
  [
   "152",
   "0.1757"
  ],
  [
   "156",
   "0.1757"
  ],
  [
   "159",
   "0.1757"
  ],
  [
   "162",
   "0.1757"
  ],
  [
   "165",
   "0.3515"
  ],
  [
   "166",
   "0.1757"
  ],
  [
   "178",
   "0.1757"
  ],
  [
   "188",
   "0.1757"
  ],
  [
   "192",
   "0.5272"
  ],
  [
   "199",
   "0.1757"
  ],
  [
   "202",
   "0.1757"
  ],
  [
   "206",
   "0.1757"
  ],
  [
   "209",
   "0.1757"
  ],
  [
   "222",
   "0.5272"
  ],
  [
   "239",
   "0.1757"
  ],
  [
   "269",
   "0.1757"
  ],
  [
   "272",
   "0.1757"
  ],
  [
   "312",
   "0.1757"
  ],
  [
   "322",
   "0.1757"
  ],
  [
   "345",
   "0.1757"
  ],
  [
   "346",
   "0.1757"
  ],
  [
   "358",
   "0.1757"
  ],
  [
   "362",
   "0.1757"
  ],
  [
   "372",
   "0.1757"
  ],
  [
   "382",
   "0.3515"
  ],
  [
   "385",
   "0.1757"
  ],
  [
   "398",
   "0.1757"
  ],
  [
   "405",
   "0.1757"
  ],
  [
   "425",
   "0.1757"
  ],
  [
   "488",
   "0.1757"
  ],
  [
   "538",
   "0.1757"
  ],
  [
   "666",
   "0.1757"
  ],
  [
   "702",
   "0.1757"
  ],
  [
   "722",
   "0.3515"
  ],
  [
   "732",
   "0.1757"
  ],
  [
   "736",
   "0.1757"
  ],
  [
   "742",
   "0.1757"
  ],
  [
   "746",
   "0.1757"
  ],
  [
   "748",
   "0.3515"
  ],
  [
   "752",
   "0.1757"
  ],
  [
   "762",
   "0.3515"
  ],
  [
   "765",
   "0.1757"
  ],
  [
   "778",
   "0.1757"
  ],
  [
   "779",
   "0.1757"
  ],
  [
   "789",
   "0.1757"
  ],
  [
   "812",
   "0.1757"
  ],
  [
   "822",
   "0.1757"
  ],
  [
   "835",
   "0.1757"
  ],
  [
   "849",
   "0.1757"
  ],
  [
   "872",
   "0.1757"
  ],
  [
   "886",
   "0.1757"
  ],
  [
   "992",
   "0.1757"
  ],
  [
   "998",
   "0.1757"
  ],
  [
   "1036",
   "0.1757"
  ],
  [
   "1115",
   "0.1757"
  ],
  [
   "1126",
   "0.1757"
  ],
  [
   "1132",
   "0.1757"
  ],
  [
   "1209",
   "0.1757"
  ],
  [
   "1252",
   "0.1757"
  ],
  [
   "1262",
   "0.1757"
  ],
  [
   "1295",
   "0.1757"
  ],
  [
   "1305",
   "0.1757"
  ],
  [
   "1325",
   "0.1757"
  ],
  [
   "1342",
   "0.1757"
  ],
  [
   "1349",
   "0.1757"
  ],
  [
   "1392",
   "0.1757"
  ],
  [
   "1395",
   "0.1757"
  ],
  [
   "1398",
   "0.1757"
  ],
  [
   "1422",
   "0.1757"
  ],
  [
   "1432",
   "0.1757"
  ],
  [
   "1435",
   "0.3515"
  ],
  [
   "1445",
   "0.1757"
  ],
  [
   "1552",
   "0.1757"
  ],
  [
   "1602",
   "0.1757"
  ],
  [
   "1649",
   "0.1757"
  ],
  [
   "1695",
   "0.1757"
  ],
  [
   "1735",
   "0.1757"
  ],
  [
   "1795",
   "0.1757"
  ],
  [
   "1859",
   "0.1757"
  ],
  [
   "1879",
   "0.1757"
  ],
  [
   "1882",
   "0.1757"
  ],
  [
   "1892",
   "0.1757"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 21,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "76 ms",
  "compare_result": "111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 21,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 455,
  "name": "Your",
  "id": 112711942
 }
}