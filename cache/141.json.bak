{
 "id": 141,
 "ids": "141",
 "state": "None",
 "name": "Linked List Cycle",
 "key": "linked-list-cycle",
 "link": "https://leetcode.com/problems/linked-list-cycle",
 "locked": false,
 "percent": 35.39824357533385,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "185.8K",
 "totalSubmit": "525K",
 "desc": "\r\nGiven a linked list, determine if it has a cycle in it.\r\n\r\n\r\n\r\nFollow up:\r\nCan you solve it without using extra space?\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool hasCycle(ListNode *head) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public boolean hasCycle(ListNode head) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def hasCycle(self, head):\r\n        \"\"\"\r\n        :type head: ListNode\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nbool hasCycle(struct ListNode *head) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool HasCycle(ListNode head) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {ListNode} head\r\n * @return {boolean}\r\n */\r\nvar hasCycle = function(head) {\r\n    \r\n};"
  }
 ],
 "testcase": "'[]\\nno cycle'",
 "testable": false,
 "slug": "linked-list-cycle",
 "category": "algorithms",
 "fname": "141.linked-list-cycle.algorithms.py",
 "submit_chart": [
  [
   "62",
   "0.2344"
  ],
  [
   "65",
   "1.9531"
  ],
  [
   "66",
   "0.3906"
  ],
  [
   "68",
   "2.0313"
  ],
  [
   "69",
   "5.2344"
  ],
  [
   "72",
   "10.6250"
  ],
  [
   "73",
   "0.1563"
  ],
  [
   "75",
   "7.0313"
  ],
  [
   "76",
   "3.9063"
  ],
  [
   "78",
   "3.2813"
  ],
  [
   "79",
   "7.6563"
  ],
  [
   "82",
   "10.7813"
  ],
  [
   "83",
   "0.2344"
  ],
  [
   "85",
   "6.1719"
  ],
  [
   "86",
   "3.0469"
  ],
  [
   "88",
   "1.9531"
  ],
  [
   "89",
   "5.0781"
  ],
  [
   "92",
   "4.9219"
  ],
  [
   "93",
   "0.0781"
  ],
  [
   "95",
   "2.8906"
  ],
  [
   "96",
   "1.5625"
  ],
  [
   "98",
   "1.1719"
  ],
  [
   "99",
   "1.7969"
  ],
  [
   "102",
   "3.1250"
  ],
  [
   "105",
   "0.7031"
  ],
  [
   "106",
   "0.9375"
  ],
  [
   "108",
   "0.7031"
  ],
  [
   "109",
   "1.3281"
  ],
  [
   "112",
   "1.6406"
  ],
  [
   "115",
   "1.0938"
  ],
  [
   "116",
   "0.3125"
  ],
  [
   "118",
   "0.3125"
  ],
  [
   "119",
   "0.6250"
  ],
  [
   "122",
   "0.8594"
  ],
  [
   "125",
   "0.6250"
  ],
  [
   "126",
   "0.4688"
  ],
  [
   "128",
   "0.1563"
  ],
  [
   "129",
   "0.0781"
  ],
  [
   "132",
   "0.8594"
  ],
  [
   "135",
   "0.3125"
  ],
  [
   "136",
   "0.0781"
  ],
  [
   "138",
   "0.3125"
  ],
  [
   "139",
   "0.2344"
  ],
  [
   "142",
   "0.6250"
  ],
  [
   "145",
   "0.2344"
  ],
  [
   "146",
   "0.1563"
  ],
  [
   "148",
   "0.0781"
  ],
  [
   "149",
   "0.3906"
  ],
  [
   "152",
   "0.3906"
  ],
  [
   "155",
   "0.1563"
  ],
  [
   "159",
   "0.1563"
  ],
  [
   "162",
   "0.1563"
  ],
  [
   "172",
   "0.0781"
  ],
  [
   "175",
   "0.0781"
  ],
  [
   "179",
   "0.0781"
  ],
  [
   "185",
   "0.1563"
  ],
  [
   "192",
   "0.0781"
  ],
  [
   "222",
   "0.1563"
  ],
  [
   "229",
   "0.0781"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 16,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "75 ms",
  "compare_result": "1111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 16,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 141,
  "name": "Your",
  "id": 110812141
 }
}