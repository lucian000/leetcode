{
 "id": 101,
 "ids": "101",
 "state": "None",
 "name": "Symmetric Tree",
 "key": "symmetric-tree",
 "link": "https://leetcode.com/problems/symmetric-tree",
 "locked": false,
 "percent": 38.53106457390729,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "181.6K",
 "totalSubmit": "471.3K",
 "desc": "Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\r\n\r\n\r\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\r\n\r\n    1\r\n   / \\\r\n  2   2\r\n / \\ / \\\r\n3  4 4  3\r\n\r\n\r\n\r\nBut the following [1,2,2,null,3,null,3]  is not:\r\n\r\n    1\r\n   / \\\r\n  2   2\r\n   \\   \\\r\n   3    3\r\n\r\n\r\n\r\n\r\nNote:\r\nBonus points if you could solve it both recursively and iteratively.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool isSymmetric(TreeNode* root) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public boolean isSymmetric(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def isSymmetric(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool isSymmetric(struct TreeNode* root) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool IsSymmetric(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {boolean}\r\n */\r\nvar isSymmetric = function(root) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Boolean}\r\ndef is_symmetric(root)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func isSymmetric(_ root: TreeNode?) -> Bool {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc isSymmetric(root *TreeNode) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def isSymmetric(root: TreeNode): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,2,2,3,4,4,3]'",
 "testable": true,
 "slug": "symmetric-tree",
 "category": "algorithms",
 "fname": "101.symmetric-tree.algorithms.py",
 "test_your": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501603106.3_784204_16"
 },
 "test_expected": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501603106.32_784204_16"
 },
 "submit_chart": [
  [
   "33",
   "0.0688"
  ],
  [
   "35",
   "1.6518"
  ],
  [
   "36",
   "1.0323"
  ],
  [
   "38",
   "4.5423"
  ],
  [
   "39",
   "11.4246"
  ],
  [
   "42",
   "19.2705"
  ],
  [
   "43",
   "1.2388"
  ],
  [
   "45",
   "11.3558"
  ],
  [
   "46",
   "5.4370"
  ],
  [
   "48",
   "3.3723"
  ],
  [
   "49",
   "8.1211"
  ],
  [
   "52",
   "8.3964"
  ],
  [
   "53",
   "0.5506"
  ],
  [
   "55",
   "3.4412"
  ],
  [
   "56",
   "2.3400"
  ],
  [
   "58",
   "1.7206"
  ],
  [
   "59",
   "3.3723"
  ],
  [
   "62",
   "3.3035"
  ],
  [
   "65",
   "1.9270"
  ],
  [
   "66",
   "0.8947"
  ],
  [
   "68",
   "0.5506"
  ],
  [
   "69",
   "1.0323"
  ],
  [
   "72",
   "1.2388"
  ],
  [
   "75",
   "0.4129"
  ],
  [
   "76",
   "0.4818"
  ],
  [
   "78",
   "0.0688"
  ],
  [
   "79",
   "0.5506"
  ],
  [
   "82",
   "0.3441"
  ],
  [
   "85",
   "0.0688"
  ],
  [
   "86",
   "0.0688"
  ],
  [
   "88",
   "0.1376"
  ],
  [
   "89",
   "0.1376"
  ],
  [
   "92",
   "0.1376"
  ],
  [
   "95",
   "0.0688"
  ],
  [
   "96",
   "0.1376"
  ],
  [
   "99",
   "0.2065"
  ],
  [
   "102",
   "0.0688"
  ],
  [
   "109",
   "0.0688"
  ],
  [
   "112",
   "0.0688"
  ],
  [
   "122",
   "0.2753"
  ],
  [
   "125",
   "0.1376"
  ],
  [
   "126",
   "0.0688"
  ],
  [
   "132",
   "0.0688"
  ],
  [
   "162",
   "0.0688"
  ],
  [
   "209",
   "0.0688"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 193,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "45 ms",
  "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 193,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 101,
  "name": "Your",
  "id": 112052208
 }
}