{
 "id": 485,
 "ids": "485",
 "state": "None",
 "name": "Max Consecutive Ones",
 "key": "max-consecutive-ones",
 "link": "https://leetcode.com/problems/max-consecutive-ones",
 "locked": false,
 "percent": 54.208941394486914,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "46.8K",
 "totalSubmit": "86.3K",
 "desc": "Given a binary array, find the maximum number of consecutive 1s in this array.\r\n\r\nExample 1:\r\n\r\nInput: [1,1,0,1,1,1]\r\nOutput: 3\r\nExplanation: The first two digits or the last three digits are consecutive 1s.\r\n    The maximum number of consecutive 1s is 3.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe input array will only contain 0 and 1.\r\nThe length of input array is a positive integer and will not exceed 10,000\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int findMaxConsecutiveOnes(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int findMaxConsecutiveOnes(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def findMaxConsecutiveOnes(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int findMaxConsecutiveOnes(int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int FindMaxConsecutiveOnes(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findMaxConsecutiveOnes = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_max_consecutive_ones(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func findMaxConsecutiveOnes(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func findMaxConsecutiveOnes(nums []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def findMaxConsecutiveOnes(nums: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,0,1,1,0,1]'",
 "testable": true,
 "slug": "max-consecutive-ones",
 "category": "algorithms",
 "fname": "485.max-consecutive-ones.algorithms.py",
 "test_your": {
  "code_answer": [
   "2"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502641042.12_784204_40"
 },
 "test_expected": {
  "code_answer": [
   "2"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502641042.14_784204_40"
 },
 "submit_chart": [
  [
   "62",
   "0.2717"
  ],
  [
   "63",
   "0.0679"
  ],
  [
   "65",
   "0.6114"
  ],
  [
   "66",
   "0.2717"
  ],
  [
   "68",
   "1.2908"
  ],
  [
   "69",
   "2.3777"
  ],
  [
   "72",
   "4.1440"
  ],
  [
   "73",
   "0.4755"
  ],
  [
   "75",
   "4.1440"
  ],
  [
   "76",
   "1.9022"
  ],
  [
   "78",
   "1.4266"
  ],
  [
   "79",
   "4.2799"
  ],
  [
   "82",
   "4.9592"
  ],
  [
   "83",
   "0.1359"
  ],
  [
   "85",
   "3.6685"
  ],
  [
   "86",
   "1.2228"
  ],
  [
   "88",
   "1.0190"
  ],
  [
   "89",
   "3.1929"
  ],
  [
   "92",
   "4.2120"
  ],
  [
   "95",
   "1.9701"
  ],
  [
   "96",
   "1.9022"
  ],
  [
   "98",
   "1.6984"
  ],
  [
   "99",
   "3.3288"
  ],
  [
   "102",
   "5.9103"
  ],
  [
   "103",
   "0.4076"
  ],
  [
   "105",
   "3.5326"
  ],
  [
   "106",
   "1.6984"
  ],
  [
   "108",
   "1.2228"
  ],
  [
   "109",
   "4.2799"
  ],
  [
   "112",
   "4.3478"
  ],
  [
   "113",
   "0.4076"
  ],
  [
   "115",
   "3.0571"
  ],
  [
   "116",
   "1.6984"
  ],
  [
   "118",
   "1.1549"
  ],
  [
   "119",
   "2.2418"
  ],
  [
   "122",
   "3.4647"
  ],
  [
   "123",
   "0.2038"
  ],
  [
   "125",
   "1.3587"
  ],
  [
   "126",
   "0.8152"
  ],
  [
   "128",
   "0.6114"
  ],
  [
   "129",
   "1.3587"
  ],
  [
   "132",
   "1.7663"
  ],
  [
   "135",
   "1.0190"
  ],
  [
   "136",
   "0.4076"
  ],
  [
   "138",
   "0.3397"
  ],
  [
   "139",
   "0.7473"
  ],
  [
   "142",
   "0.8152"
  ],
  [
   "143",
   "0.0679"
  ],
  [
   "145",
   "0.4076"
  ],
  [
   "146",
   "0.4076"
  ],
  [
   "148",
   "0.0679"
  ],
  [
   "149",
   "0.7473"
  ],
  [
   "152",
   "0.4755"
  ],
  [
   "155",
   "0.2038"
  ],
  [
   "156",
   "0.1359"
  ],
  [
   "158",
   "0.2038"
  ],
  [
   "159",
   "0.2038"
  ],
  [
   "162",
   "0.2717"
  ],
  [
   "165",
   "0.2717"
  ],
  [
   "166",
   "0.2717"
  ],
  [
   "168",
   "0.0679"
  ],
  [
   "169",
   "0.4076"
  ],
  [
   "172",
   "0.2038"
  ],
  [
   "175",
   "0.0679"
  ],
  [
   "178",
   "0.1359"
  ],
  [
   "179",
   "0.2717"
  ],
  [
   "182",
   "0.2038"
  ],
  [
   "185",
   "0.1359"
  ],
  [
   "186",
   "0.0679"
  ],
  [
   "189",
   "0.1359"
  ],
  [
   "195",
   "0.0679"
  ],
  [
   "199",
   "0.1359"
  ],
  [
   "202",
   "0.1359"
  ],
  [
   "209",
   "0.0679"
  ],
  [
   "212",
   "0.1359"
  ],
  [
   "216",
   "0.0679"
  ],
  [
   "219",
   "0.0679"
  ],
  [
   "222",
   "0.0679"
  ],
  [
   "225",
   "0.0679"
  ],
  [
   "229",
   "0.0679"
  ],
  [
   "232",
   "0.0679"
  ],
  [
   "238",
   "0.0679"
  ],
  [
   "242",
   "0.1359"
  ],
  [
   "249",
   "0.0679"
  ],
  [
   "252",
   "0.0679"
  ],
  [
   "259",
   "0.0679"
  ],
  [
   "285",
   "0.0679"
  ],
  [
   "315",
   "0.0679"
  ],
  [
   "362",
   "0.0679"
  ],
  [
   "455",
   "0.0679"
  ],
  [
   "535",
   "0.0679"
  ],
  [
   "589",
   "0.0679"
  ],
  [
   "598",
   "0.0679"
  ],
  [
   "602",
   "0.1359"
  ],
  [
   "615",
   "0.0679"
  ],
  [
   "679",
   "0.0679"
  ],
  [
   "688",
   "0.0679"
  ],
  [
   "805",
   "0.0679"
  ],
  [
   "806",
   "0.0679"
  ],
  [
   "812",
   "0.0679"
  ],
  [
   "818",
   "0.0679"
  ],
  [
   "822",
   "0.0679"
  ],
  [
   "855",
   "0.0679"
  ],
  [
   "939",
   "0.0679"
  ],
  [
   "958",
   "0.0679"
  ],
  [
   "1016",
   "0.0679"
  ],
  [
   "1038",
   "0.0679"
  ],
  [
   "1045",
   "0.0679"
  ],
  [
   "1252",
   "0.0679"
  ],
  [
   "1555",
   "0.0679"
  ],
  [
   "1599",
   "0.0679"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 41,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "139 ms",
  "compare_result": "11111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 41,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 485,
  "name": "Your",
  "id": 113707628
 }
}