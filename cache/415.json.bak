{
 "id": 415,
 "ids": "415",
 "state": "None",
 "name": "Add Strings",
 "key": "add-strings",
 "link": "https://leetcode.com/problems/add-strings",
 "locked": false,
 "percent": 41.278271220584195,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "36.1K",
 "totalSubmit": "87.4K",
 "desc": "Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.\r\n\r\nNote:\r\n\r\nThe length of both num1 and num2 is < 5100.\r\nBoth num1 and num2 contains only digits 0-9.\r\nBoth num1 and num2 does not contain any leading zero.\r\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    string addStrings(string num1, string num2) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public String addStrings(String num1, String num2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def addStrings(self, num1, num2):\r\n        \"\"\"\r\n        :type num1: str\r\n        :type num2: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "char* addStrings(char* num1, char* num2) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public string AddStrings(string num1, string num2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} num1\r\n * @param {string} num2\r\n * @return {string}\r\n */\r\nvar addStrings = function(num1, num2) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} num1\r\n# @param {String} num2\r\n# @return {String}\r\ndef add_strings(num1, num2)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func addStrings(_ num1: String, _ num2: String) -> String {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func addStrings(num1 string, num2 string) string {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def addStrings(num1: String, num2: String): String = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"0\"\\n\"0\"'",
 "testable": true,
 "slug": "add-strings",
 "category": "algorithms",
 "fname": "415.add-strings.algorithms.py",
 "test_your": {
  "code_answer": [
   "\"0\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502185781.2_784204_3"
 },
 "test_expected": {
  "code_answer": [
   "\"0\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502185781.22_784204_3"
 },
 "submit_chart": [
  [
   "36",
   "0.3175"
  ],
  [
   "38",
   "0.1587"
  ],
  [
   "39",
   "0.4762"
  ],
  [
   "42",
   "2.8571"
  ],
  [
   "43",
   "0.1587"
  ],
  [
   "45",
   "2.0635"
  ],
  [
   "46",
   "0.9524"
  ],
  [
   "48",
   "0.4762"
  ],
  [
   "49",
   "2.3810"
  ],
  [
   "52",
   "1.9048"
  ],
  [
   "55",
   "2.6984"
  ],
  [
   "56",
   "0.7937"
  ],
  [
   "58",
   "1.1111"
  ],
  [
   "59",
   "3.1746"
  ],
  [
   "62",
   "2.6984"
  ],
  [
   "63",
   "0.1587"
  ],
  [
   "65",
   "2.2222"
  ],
  [
   "66",
   "0.6349"
  ],
  [
   "68",
   "1.4286"
  ],
  [
   "69",
   "3.0159"
  ],
  [
   "72",
   "6.9841"
  ],
  [
   "73",
   "0.1587"
  ],
  [
   "75",
   "5.2381"
  ],
  [
   "76",
   "1.7460"
  ],
  [
   "78",
   "2.2222"
  ],
  [
   "79",
   "6.1905"
  ],
  [
   "82",
   "5.3968"
  ],
  [
   "83",
   "0.1587"
  ],
  [
   "85",
   "2.8571"
  ],
  [
   "86",
   "1.7460"
  ],
  [
   "88",
   "1.2698"
  ],
  [
   "89",
   "3.3333"
  ],
  [
   "92",
   "4.4444"
  ],
  [
   "95",
   "1.9048"
  ],
  [
   "96",
   "1.7460"
  ],
  [
   "98",
   "0.4762"
  ],
  [
   "99",
   "1.2698"
  ],
  [
   "102",
   "2.6984"
  ],
  [
   "105",
   "1.2698"
  ],
  [
   "106",
   "0.6349"
  ],
  [
   "108",
   "0.4762"
  ],
  [
   "109",
   "0.9524"
  ],
  [
   "112",
   "1.1111"
  ],
  [
   "115",
   "0.4762"
  ],
  [
   "116",
   "0.3175"
  ],
  [
   "118",
   "0.1587"
  ],
  [
   "119",
   "0.4762"
  ],
  [
   "122",
   "0.7937"
  ],
  [
   "125",
   "0.7937"
  ],
  [
   "128",
   "0.3175"
  ],
  [
   "129",
   "0.3175"
  ],
  [
   "132",
   "0.4762"
  ],
  [
   "138",
   "0.1587"
  ],
  [
   "142",
   "0.1587"
  ],
  [
   "145",
   "0.1587"
  ],
  [
   "149",
   "0.1587"
  ],
  [
   "162",
   "0.1587"
  ],
  [
   "165",
   "0.1587"
  ],
  [
   "172",
   "0.3175"
  ],
  [
   "175",
   "0.1587"
  ],
  [
   "176",
   "0.1587"
  ],
  [
   "182",
   "0.1587"
  ],
  [
   "189",
   "0.1587"
  ],
  [
   "222",
   "0.1587"
  ],
  [
   "225",
   "0.1587"
  ],
  [
   "239",
   "0.1587"
  ],
  [
   "242",
   "0.1587"
  ],
  [
   "249",
   "0.1587"
  ],
  [
   "252",
   "0.1587"
  ],
  [
   "259",
   "0.4762"
  ],
  [
   "272",
   "0.1587"
  ],
  [
   "302",
   "0.1587"
  ],
  [
   "335",
   "0.1587"
  ],
  [
   "346",
   "0.1587"
  ],
  [
   "389",
   "0.1587"
  ],
  [
   "402",
   "0.1587"
  ],
  [
   "658",
   "0.1587"
  ],
  [
   "662",
   "0.1587"
  ],
  [
   "669",
   "0.1587"
  ],
  [
   "679",
   "0.1587"
  ],
  [
   "682",
   "0.1587"
  ],
  [
   "692",
   "0.1587"
  ],
  [
   "715",
   "0.1587"
  ],
  [
   "729",
   "0.1587"
  ],
  [
   "752",
   "0.1587"
  ],
  [
   "772",
   "0.3175"
  ],
  [
   "782",
   "0.1587"
  ],
  [
   "822",
   "0.1587"
  ],
  [
   "855",
   "0.1587"
  ],
  [
   "875",
   "0.1587"
  ],
  [
   "1039",
   "0.1587"
  ],
  [
   "1042",
   "0.1587"
  ],
  [
   "1052",
   "0.1587"
  ],
  [
   "1056",
   "0.1587"
  ],
  [
   "1059",
   "0.1587"
  ],
  [
   "1062",
   "0.1587"
  ],
  [
   "1065",
   "0.1587"
  ],
  [
   "1068",
   "0.1587"
  ],
  [
   "1072",
   "0.3175"
  ],
  [
   "1079",
   "0.1587"
  ],
  [
   "1082",
   "0.3175"
  ],
  [
   "1089",
   "0.1587"
  ],
  [
   "1092",
   "0.3175"
  ],
  [
   "1096",
   "0.3175"
  ],
  [
   "1102",
   "0.1587"
  ],
  [
   "1105",
   "0.1587"
  ],
  [
   "1112",
   "0.1587"
  ],
  [
   "1116",
   "0.3175"
  ],
  [
   "1122",
   "0.1587"
  ],
  [
   "1138",
   "0.1587"
  ],
  [
   "1145",
   "0.1587"
  ],
  [
   "1182",
   "0.1587"
  ],
  [
   "1305",
   "0.1587"
  ],
  [
   "1386",
   "0.3175"
  ],
  [
   "1395",
   "0.1587"
  ],
  [
   "1412",
   "0.1587"
  ],
  [
   "1418",
   "0.1587"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 315,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "79 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 315,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 415,
  "name": "Your",
  "id": 113002945
 }
}