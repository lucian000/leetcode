{"id": 165, "ids": "165", "state": "None", "name": "Compare Version Numbers", "key": "compare-version-numbers", "link": "https://leetcode.com/problems/compare-version-numbers", "locked": false, "percent": 19.952336320948, "level": "Medium", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "Compare two version numbers version1 and version2.\r\nIf version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.\r\n\r\nYou may assume that the version strings are non-empty and contain only digits and the . character.\r\nThe . character does not represent a decimal point and is used to separate number sequences.\r\nFor instance, 2.5 is not \"two and a half\" or \"half way to version three\", it is the fifth second-level revision of the second first-level revision.\r\n\r\nHere is an example of version numbers ordering:\r\n0.1 < 1.1 < 1.2 < 13.37\r\n\r\nCredits:Special thanks to @ts for adding this problem and creating all test cases.", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    int compareVersion(string version1, string version2) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int compareVersion(String version1, String version2) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def compareVersion(self, version1, version2):\r\n        \"\"\"\r\n        :type version1: str\r\n        :type version2: str\r\n        :rtype: int\r\n        \"\"\""}, {"value": "c", "text": "C", "defaultCode": "int compareVersion(char* version1, char* version2) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int CompareVersion(string version1, string version2) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {string} version1\r\n * @param {string} version2\r\n * @return {number}\r\n */\r\nvar compareVersion = function(version1, version2) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {String} version1\r\n# @param {String} version2\r\n# @return {Integer}\r\ndef compare_version(version1, version2)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\r\n    func compareVersion(_ version1: String, _ version2: String) -> Int {\r\n        \r\n    }\r\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func compareVersion(version1 string, version2 string) int {\r\n    \r\n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def compareVersion(version1: String, version2: String): Int = {\n        \n    }\n}"}], "testcase": "\"1\"\n\"0\"", "testable": true}