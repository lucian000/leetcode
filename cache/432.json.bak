{"id": 432, "ids": "432", "state": "None", "name": "All O`one Data Structure", "key": "all-oone-data-structure", "link": "https://leetcode.com/problems/all-oone-data-structure", "locked": false, "percent": 27.673073334577346, "level": "Hard", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "Implement a data structure supporting the following operations:\r\n\r\n\r\n\r\nInc(Key) - Inserts a new key  with value 1. Or increments an existing key by 1. Key is guaranteed to be a non-empty string.\r\nDec(Key) - If Key's value is 1, remove it from the data structure. Otherwise decrements an existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a non-empty string.\r\nGetMaxKey() - Returns one of the keys with maximal value. If no element exists, return an empty string \"\".\r\nGetMinKey() - Returns one of the keys with minimal value. If no element exists, return an empty string \"\".\r\n\r\n\r\n\r\n\r\nChallenge: Perform all these in O(1) time complexity.\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class AllOne {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    AllOne() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\r\n    void inc(string key) {\r\n        \r\n    }\r\n    \r\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\r\n    void dec(string key) {\r\n        \r\n    }\r\n    \r\n    /** Returns one of the keys with maximal value. */\r\n    string getMaxKey() {\r\n        \r\n    }\r\n    \r\n    /** Returns one of the keys with Minimal value. */\r\n    string getMinKey() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your AllOne object will be instantiated and called as such:\r\n * AllOne obj = new AllOne();\r\n * obj.inc(key);\r\n * obj.dec(key);\r\n * string param_3 = obj.getMaxKey();\r\n * string param_4 = obj.getMinKey();\r\n */"}, {"value": "java", "text": "Java", "defaultCode": "public class AllOne {\r\n\r\n    /** Initialize your data structure here. */\r\n    public AllOne() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\r\n    public void inc(String key) {\r\n        \r\n    }\r\n    \r\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\r\n    public void dec(String key) {\r\n        \r\n    }\r\n    \r\n    /** Returns one of the keys with maximal value. */\r\n    public String getMaxKey() {\r\n        \r\n    }\r\n    \r\n    /** Returns one of the keys with Minimal value. */\r\n    public String getMinKey() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your AllOne object will be instantiated and called as such:\r\n * AllOne obj = new AllOne();\r\n * obj.inc(key);\r\n * obj.dec(key);\r\n * String param_3 = obj.getMaxKey();\r\n * String param_4 = obj.getMinKey();\r\n */"}, {"value": "python", "text": "Python", "defaultCode": "class AllOne(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def inc(self, key):\r\n        \"\"\"\r\n        Inserts a new key <Key> with value 1. Or increments an existing key by 1.\r\n        :type key: str\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def dec(self, key):\r\n        \"\"\"\r\n        Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.\r\n        :type key: str\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def getMaxKey(self):\r\n        \"\"\"\r\n        Returns one of the keys with maximal value.\r\n        :rtype: str\r\n        \"\"\"\r\n        \r\n\r\n    def getMinKey(self):\r\n        \"\"\"\r\n        Returns one of the keys with Minimal value.\r\n        :rtype: str\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your AllOne object will be instantiated and called as such:\r\n# obj = AllOne()\r\n# obj.inc(key)\r\n# obj.dec(key)\r\n# param_3 = obj.getMaxKey()\r\n# param_4 = obj.getMinKey()"}, {"value": "c", "text": "C", "defaultCode": "typedef struct {\n    \n} AllOne;\n\n/** Initialize your data structure here. */\nAllOne* allOneCreate() {\n    \n}\n\n/** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\nvoid allOneInc(AllOne* obj, char* key) {\n    \n}\n\n/** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\nvoid allOneDec(AllOne* obj, char* key) {\n    \n}\n\n/** Returns one of the keys with maximal value. */\nchar* allOneGetMaxKey(AllOne* obj) {\n    \n}\n\n/** Returns one of the keys with Minimal value. */\nchar* allOneGetMinKey(AllOne* obj) {\n    \n}\n\nvoid allOneFree(AllOne* obj) {\n    \n}\n\n/**\n * Your AllOne struct will be instantiated and called as such:\n * struct AllOne* obj = allOneCreate();\n * allOneInc(obj, key);\n * allOneDec(obj, key);\n * char* param_3 = allOneGetMaxKey(obj);\n * char* param_4 = allOneGetMinKey(obj);\n * allOneFree(obj);\n */"}, {"value": "golang", "text": "Go", "defaultCode": "type AllOne struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() AllOne {\r\n    \r\n}\r\n\r\n\r\n/** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\r\nfunc (this *AllOne) Inc(key string)  {\r\n    \r\n}\r\n\r\n\r\n/** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\r\nfunc (this *AllOne) Dec(key string)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns one of the keys with maximal value. */\r\nfunc (this *AllOne) GetMaxKey() string {\r\n    \r\n}\r\n\r\n\r\n/** Returns one of the keys with Minimal value. */\r\nfunc (this *AllOne) GetMinKey() string {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your AllOne object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Inc(key);\r\n * obj.Dec(key);\r\n * param_3 := obj.GetMaxKey();\r\n * param_4 := obj.GetMinKey();\r\n */"}, {"value": "scala", "text": "Scala", "defaultCode": "\n    /** Initialize your data structure here. */class AllOne() {\n    \n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\n    def inc(String key) {\n\n    }\n    \n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\n    def dec(String key) {\n\n    }\n    \n    /** Returns one of the keys with maximal value. */\n    def getMaxKey() : String = {\n\n    }\n    \n    /** Returns one of the keys with Minimal value. */\n    def getMinKey() : String = {\n\n    }\n}\n\n/**\n * Your AllOne object will be instantiated and called as such:\n * var obj = new AllOne();\n * obj.inc(key);\n * obj.dec(key);\n * String param_3 = obj.getMaxKey();\n * String param_4 = obj.getMinKey();\n */"}], "testcase": "'[\"AllOne\",\"getMaxKey\",\"getMinKey\"]\\n[[],[],[]]'", "testable": true}