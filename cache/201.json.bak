{"id": 201, "ids": "201", "state": "None", "name": "Bitwise AND of Numbers Range", "key": "bitwise-and-of-numbers-range", "link": "https://leetcode.com/problems/bitwise-and-of-numbers-range", "locked": false, "percent": 33.87380907389685, "level": "Medium", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "Given a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive.\r\n\r\n\r\nFor example, given the range [5, 7], you should return 4.\r\n\r\n\r\nCredits:Special thanks to @amrsaqr for adding this problem and creating all test cases.", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    int rangeBitwiseAnd(int m, int n) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int rangeBitwiseAnd(int m, int n) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def rangeBitwiseAnd(self, m, n):\r\n        \"\"\"\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "int rangeBitwiseAnd(int m, int n) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int RangeBitwiseAnd(int m, int n) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number} m\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar rangeBitwiseAnd = function(m, n) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer} m\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef range_bitwise_and(m, n)\r\n    \r\nend"}, {"value": "golang", "text": "Go", "defaultCode": "func rangeBitwiseAnd(m int, n int) int {\n    \n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def rangeBitwiseAnd(m: Int, n: Int): Int = {\n        \n    }\n}"}], "testcase": "'0\\n0'", "testable": true}