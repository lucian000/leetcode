{"id": 119, "ids": "119", "state": "None", "name": "Pascal's Triangle II", "key": "pascals-triangle-ii", "link": "https://leetcode.com/problems/pascals-triangle-ii", "locked": false, "percent": 36.53208516154767, "level": "Easy", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "Given an index k, return the kth row of the Pascal's triangle.\r\n\r\n\r\nFor example, given k = 3,\r\nReturn [1,3,3,1].\r\n\r\n\r\n\r\nNote:\r\nCould you optimize your algorithm to use only O(k) extra space?\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    vector<int> getRow(int rowIndex) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public List<Integer> getRow(int rowIndex) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def getRow(self, rowIndex):\r\n        \"\"\"\r\n        :type rowIndex: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* getRow(int rowIndex, int* returnSize) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public IList<int> GetRow(int rowIndex) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number} rowIndex\r\n * @return {number[]}\r\n */\r\nvar getRow = function(rowIndex) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer} row_index\r\n# @return {Integer[]}\r\ndef get_row(row_index)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\n    func getRow(_ rowIndex: Int) -> [Int] {\n        \n    }\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func getRow(rowIndex int) []int {\n    \n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def getRow(rowIndex: Int): List[Int] = {\n        \n    }\n}"}], "testcase": "'0'", "testable": true}