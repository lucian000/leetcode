{"id": 565, "ids": "565", "state": "None", "name": "Array Nesting", "key": "array-nesting", "link": "https://leetcode.com/problems/array-nesting", "locked": false, "percent": 49.666363360630875, "level": "Medium", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "A zero-indexed array A consisting of N different integers is given. The array contains all integers in the range [0, N - 1]. \r\n\r\nSets S[K] for 0 <= K < N are defined as follows:\r\n\r\nS[K] = { A[K], A[A[K]], A[A[A[K]]], ... }.\r\n\r\nSets S[K] are finite for each K and should NOT contain duplicates.\r\n\r\n\r\nWrite a function that given an array A consisting of N integers, return the size of the largest set S[K] for this array.\r\n\r\n\r\nExample 1:\r\n\r\nInput: A = [5,4,0,3,1,6,2]\r\nOutput: 4\r\nExplanation: \r\nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\r\nOne of the longest S[K]:\r\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\r\n\r\n\r\n\r\nNote:\r\n\r\nN is an integer within the range [1, 20,000].\r\nThe elements of A are all distinct.\r\nEach element of array A is an integer within the range [0, N-1].\r\n\r\n\r\n\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    int arrayNesting(vector<int>& nums) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int arrayNesting(int[] nums) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def arrayNesting(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "}, {"value": "python3", "text": "Python3", "defaultCode": "class Solution:\r\n    def arrayNesting(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "int arrayNesting(int* nums, int numsSize) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int ArrayNesting(int[] nums) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar arrayNesting = function(nums) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef array_nesting(nums)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\r\n    func arrayNesting(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func arrayNesting(nums []int) int {\r\n    \r\n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def arrayNesting(nums: Array[Int]): Int = {\n        \n    }\n}"}], "testcase": "[5,4,0,3,1,6,2]", "testable": true}