{"id": 381, "ids": "381", "state": "None", "name": "Insert Delete GetRandom O(1) - Duplicates allowed", "key": "insert-delete-getrandom-o1-duplicates-allowed", "link": "https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed", "locked": false, "percent": 28.699214492426805, "level": "Hard", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "Design a data structure that supports all following operations in average O(1) time.\r\nNote: Duplicate elements are allowed.\r\n\r\n\r\ninsert(val): Inserts an item val to the collection.\r\nremove(val): Removes an item val from the collection if present.\r\ngetRandom: Returns a random element from current collection of elements. The probability of each element being returned is linearly related to the number of same value the collection contains.\r\n\r\n\r\n\r\nExample:\r\n\r\n// Init an empty collection.\r\nRandomizedCollection collection = new RandomizedCollection();\r\n\r\n// Inserts 1 to the collection. Returns true as the collection did not contain 1.\r\ncollection.insert(1);\r\n\r\n// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].\r\ncollection.insert(1);\r\n\r\n// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].\r\ncollection.insert(2);\r\n\r\n// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.\r\ncollection.getRandom();\r\n\r\n// Removes 1 from the collection, returns true. Collection now contains [1,2].\r\ncollection.remove(1);\r\n\r\n// getRandom should return 1 and 2 both equally likely.\r\ncollection.getRandom();\r\n\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class RandomizedCollection {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    RandomizedCollection() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\r\n    bool insert(int val) {\r\n        \r\n    }\r\n    \r\n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\r\n    bool remove(int val) {\r\n        \r\n    }\r\n    \r\n    /** Get a random element from the collection. */\r\n    int getRandom() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your RandomizedCollection object will be instantiated and called as such:\r\n * RandomizedCollection obj = new RandomizedCollection();\r\n * bool param_1 = obj.insert(val);\r\n * bool param_2 = obj.remove(val);\r\n * int param_3 = obj.getRandom();\r\n */"}, {"value": "java", "text": "Java", "defaultCode": "public class RandomizedCollection {\r\n\r\n    /** Initialize your data structure here. */\r\n    public RandomizedCollection() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\r\n    public boolean insert(int val) {\r\n        \r\n    }\r\n    \r\n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\r\n    public boolean remove(int val) {\r\n        \r\n    }\r\n    \r\n    /** Get a random element from the collection. */\r\n    public int getRandom() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your RandomizedCollection object will be instantiated and called as such:\r\n * RandomizedCollection obj = new RandomizedCollection();\r\n * boolean param_1 = obj.insert(val);\r\n * boolean param_2 = obj.remove(val);\r\n * int param_3 = obj.getRandom();\r\n */"}, {"value": "python", "text": "Python", "defaultCode": "class RandomizedCollection(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def insert(self, val):\r\n        \"\"\"\r\n        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\r\n        :type val: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def remove(self, val):\r\n        \"\"\"\r\n        Removes a value from the collection. Returns true if the collection contained the specified element.\r\n        :type val: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def getRandom(self):\r\n        \"\"\"\r\n        Get a random element from the collection.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your RandomizedCollection object will be instantiated and called as such:\r\n# obj = RandomizedCollection()\r\n# param_1 = obj.insert(val)\r\n# param_2 = obj.remove(val)\r\n# param_3 = obj.getRandom()"}, {"value": "c", "text": "C", "defaultCode": "typedef struct {\n    \n} RandomizedCollection;\n\n/** Initialize your data structure here. */\nRandomizedCollection* randomizedCollectionCreate() {\n    \n}\n\n/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\nbool randomizedCollectionInsert(RandomizedCollection* obj, int val) {\n    \n}\n\n/** Removes a value from the collection. Returns true if the collection contained the specified element. */\nbool randomizedCollectionRemove(RandomizedCollection* obj, int val) {\n    \n}\n\n/** Get a random element from the collection. */\nint randomizedCollectionGetRandom(RandomizedCollection* obj) {\n    \n}\n\nvoid randomizedCollectionFree(RandomizedCollection* obj) {\n    \n}\n\n/**\n * Your RandomizedCollection struct will be instantiated and called as such:\n * struct RandomizedCollection* obj = randomizedCollectionCreate();\n * bool param_1 = randomizedCollectionInsert(obj, val);\n * bool param_2 = randomizedCollectionRemove(obj, val);\n * int param_3 = randomizedCollectionGetRandom(obj);\n * randomizedCollectionFree(obj);\n */"}, {"value": "csharp", "text": "C#", "defaultCode": "public class RandomizedCollection {\r\n\r\n    /** Initialize your data structure here. */\r\n    public RandomizedCollection() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\r\n    public bool Insert(int val) {\r\n        \r\n    }\r\n    \r\n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\r\n    public bool Remove(int val) {\r\n        \r\n    }\r\n    \r\n    /** Get a random element from the collection. */\r\n    public int GetRandom() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your RandomizedCollection object will be instantiated and called as such:\r\n * RandomizedCollection obj = new RandomizedCollection();\r\n * bool param_1 = obj.Insert(val);\r\n * bool param_2 = obj.Remove(val);\r\n * int param_3 = obj.GetRandom();\r\n */"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * Initialize your data structure here.\r\n */\r\nvar RandomizedCollection = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Inserts a value to the collection. Returns true if the collection did not already contain the specified element. \r\n * @param {number} val\r\n * @return {boolean}\r\n */\r\nRandomizedCollection.prototype.insert = function(val) {\r\n    \r\n};\r\n\r\n/**\r\n * Removes a value from the collection. Returns true if the collection contained the specified element. \r\n * @param {number} val\r\n * @return {boolean}\r\n */\r\nRandomizedCollection.prototype.remove = function(val) {\r\n    \r\n};\r\n\r\n/**\r\n * Get a random element from the collection.\r\n * @return {number}\r\n */\r\nRandomizedCollection.prototype.getRandom = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your RandomizedCollection object will be instantiated and called as such:\r\n * var obj = Object.create(RandomizedCollection).createNew()\r\n * var param_1 = obj.insert(val)\r\n * var param_2 = obj.remove(val)\r\n * var param_3 = obj.getRandom()\r\n */"}, {"value": "ruby", "text": "Ruby", "defaultCode": "class RandomizedCollection\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Inserts a value to the collection. Returns true if the collection did not already contain the specified element.\r\n    :type val: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def insert(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Removes a value from the collection. Returns true if the collection contained the specified element.\r\n    :type val: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def remove(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get a random element from the collection.\r\n    :rtype: Integer\r\n=end\r\n    def get_random()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your RandomizedCollection object will be instantiated and called as such:\r\n# obj = RandomizedCollection.new()\r\n# param_1 = obj.insert(val)\r\n# param_2 = obj.remove(val)\r\n# param_3 = obj.get_random()"}, {"value": "golang", "text": "Go", "defaultCode": "type RandomizedCollection struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() RandomizedCollection {\r\n    \r\n}\r\n\r\n\r\n/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\r\nfunc (this *RandomizedCollection) Insert(val int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Removes a value from the collection. Returns true if the collection contained the specified element. */\r\nfunc (this *RandomizedCollection) Remove(val int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Get a random element from the collection. */\r\nfunc (this *RandomizedCollection) GetRandom() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your RandomizedCollection object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * param_1 := obj.Insert(val);\r\n * param_2 := obj.Remove(val);\r\n * param_3 := obj.GetRandom();\r\n */"}, {"value": "scala", "text": "Scala", "defaultCode": "\n    /** Initialize your data structure here. */class RandomizedCollection() {\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    def insert(int val) : Boolean = {\n\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    def remove(int val) : Boolean = {\n\n    }\n    \n    /** Get a random element from the collection. */\n    def getRandom() : Int = {\n\n    }\n}\n\n/**\n * Your RandomizedCollection object will be instantiated and called as such:\n * var obj = new RandomizedCollection();\n * Boolean param_1 = obj.insert(val);\n * Boolean param_2 = obj.remove(val);\n * Int param_3 = obj.getRandom();\n */"}], "testcase": "[\"RandomizedCollection\",\"insert\",\"insert\",\"insert\",\"getRandom\",\"remove\",\"getRandom\"]\n[[],[1],[1],[2],[],[1],[]]", "testable": true}