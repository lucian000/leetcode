{
 "id": 234,
 "ids": "234",
 "state": "None",
 "name": "Palindrome Linked List",
 "key": "palindrome-linked-list",
 "link": "https://leetcode.com/problems/palindrome-linked-list",
 "locked": false,
 "percent": 32.571145978510096,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "108.7K",
 "totalSubmit": "333.7K",
 "desc": "Given a singly linked list, determine if it is a palindrome.\r\n\r\nFollow up:\r\nCould you do it in O(n) time and O(1) space?",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool isPalindrome(ListNode* head) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public boolean isPalindrome(ListNode head) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def isPalindrome(self, head):\r\n        \"\"\"\r\n        :type head: ListNode\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nbool isPalindrome(struct ListNode* head) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool IsPalindrome(ListNode head) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {boolean}\r\n */\r\nvar isPalindrome = function(head) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {Boolean}\r\ndef is_palindrome(head)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func isPalindrome(_ head: ListNode?) -> Bool {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc isPalindrome(head *ListNode) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def isPalindrome(head: ListNode): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]'",
 "testable": true,
 "slug": "palindrome-linked-list",
 "category": "algorithms",
 "fname": "234.palindrome-linked-list.algorithms.py",
 "test_your": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502597447.73_784204_32"
 },
 "test_expected": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502597447.75_784204_32"
 },
 "submit_chart": [
  [
   "112",
   "0.0756"
  ],
  [
   "115",
   "0.5291"
  ],
  [
   "116",
   "0.0756"
  ],
  [
   "118",
   "0.4535"
  ],
  [
   "119",
   "0.7559"
  ],
  [
   "122",
   "2.7967"
  ],
  [
   "125",
   "1.8896"
  ],
  [
   "126",
   "1.2094"
  ],
  [
   "128",
   "1.4361"
  ],
  [
   "129",
   "3.4014"
  ],
  [
   "132",
   "5.5933"
  ],
  [
   "133",
   "0.0756"
  ],
  [
   "135",
   "5.5178"
  ],
  [
   "136",
   "2.6455"
  ],
  [
   "138",
   "2.0408"
  ],
  [
   "139",
   "4.9887"
  ],
  [
   "142",
   "7.8609"
  ],
  [
   "145",
   "5.8201"
  ],
  [
   "146",
   "1.8141"
  ],
  [
   "148",
   "2.0408"
  ],
  [
   "149",
   "4.5351"
  ],
  [
   "152",
   "5.3666"
  ],
  [
   "155",
   "3.1746"
  ],
  [
   "156",
   "1.8141"
  ],
  [
   "158",
   "1.2094"
  ],
  [
   "159",
   "2.7211"
  ],
  [
   "162",
   "3.6281"
  ],
  [
   "165",
   "1.8141"
  ],
  [
   "166",
   "1.0582"
  ],
  [
   "168",
   "0.8314"
  ],
  [
   "169",
   "1.2094"
  ],
  [
   "172",
   "1.9652"
  ],
  [
   "175",
   "1.2094"
  ],
  [
   "176",
   "0.5291"
  ],
  [
   "178",
   "0.6047"
  ],
  [
   "179",
   "0.9070"
  ],
  [
   "182",
   "1.2850"
  ],
  [
   "185",
   "1.0582"
  ],
  [
   "186",
   "0.4535"
  ],
  [
   "188",
   "0.3779"
  ],
  [
   "189",
   "0.3779"
  ],
  [
   "192",
   "1.2094"
  ],
  [
   "195",
   "0.6047"
  ],
  [
   "196",
   "0.3023"
  ],
  [
   "198",
   "0.2268"
  ],
  [
   "199",
   "0.3023"
  ],
  [
   "202",
   "0.5291"
  ],
  [
   "205",
   "0.3023"
  ],
  [
   "208",
   "0.1512"
  ],
  [
   "209",
   "0.1512"
  ],
  [
   "212",
   "0.3023"
  ],
  [
   "215",
   "0.2268"
  ],
  [
   "218",
   "0.0756"
  ],
  [
   "219",
   "0.1512"
  ],
  [
   "222",
   "0.1512"
  ],
  [
   "226",
   "0.1512"
  ],
  [
   "228",
   "0.2268"
  ],
  [
   "229",
   "0.1512"
  ],
  [
   "232",
   "0.4535"
  ],
  [
   "235",
   "0.1512"
  ],
  [
   "236",
   "0.4535"
  ],
  [
   "239",
   "0.3779"
  ],
  [
   "242",
   "0.6803"
  ],
  [
   "245",
   "0.1512"
  ],
  [
   "246",
   "0.0756"
  ],
  [
   "249",
   "0.0756"
  ],
  [
   "252",
   "0.2268"
  ],
  [
   "255",
   "0.1512"
  ],
  [
   "256",
   "0.0756"
  ],
  [
   "258",
   "0.0756"
  ],
  [
   "259",
   "0.1512"
  ],
  [
   "262",
   "0.1512"
  ],
  [
   "265",
   "0.1512"
  ],
  [
   "269",
   "0.3023"
  ],
  [
   "272",
   "0.1512"
  ],
  [
   "275",
   "0.0756"
  ],
  [
   "279",
   "0.1512"
  ],
  [
   "282",
   "0.3023"
  ],
  [
   "285",
   "0.2268"
  ],
  [
   "286",
   "0.0756"
  ],
  [
   "289",
   "0.1512"
  ],
  [
   "292",
   "0.0756"
  ],
  [
   "295",
   "0.0756"
  ],
  [
   "298",
   "0.0756"
  ],
  [
   "302",
   "0.1512"
  ],
  [
   "305",
   "0.0756"
  ],
  [
   "306",
   "0.0756"
  ],
  [
   "308",
   "0.0756"
  ],
  [
   "312",
   "0.0756"
  ],
  [
   "315",
   "0.0756"
  ],
  [
   "322",
   "0.0756"
  ],
  [
   "325",
   "0.0756"
  ],
  [
   "326",
   "0.0756"
  ],
  [
   "329",
   "0.0756"
  ],
  [
   "342",
   "0.2268"
  ],
  [
   "359",
   "0.0756"
  ],
  [
   "368",
   "0.0756"
  ],
  [
   "385",
   "0.0756"
  ],
  [
   "392",
   "0.0756"
  ],
  [
   "398",
   "0.0756"
  ],
  [
   "406",
   "0.0756"
  ],
  [
   "415",
   "0.0756"
  ],
  [
   "428",
   "0.0756"
  ],
  [
   "442",
   "0.0756"
  ],
  [
   "502",
   "0.0756"
  ],
  [
   "566",
   "0.0756"
  ],
  [
   "609",
   "0.0756"
  ],
  [
   "745",
   "0.0756"
  ],
  [
   "785",
   "0.0756"
  ],
  [
   "842",
   "0.0756"
  ],
  [
   "846",
   "0.0756"
  ],
  [
   "859",
   "0.0756"
  ],
  [
   "882",
   "0.0756"
  ],
  [
   "892",
   "0.0756"
  ],
  [
   "895",
   "0.0756"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 26,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "165 ms",
  "compare_result": "11111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 26,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 234,
  "name": "Your",
  "id": 113650767
 }
}