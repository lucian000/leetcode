{
 "id": 387,
 "ids": "387",
 "state": "ac",
 "name": "First Unique Character in a String",
 "key": "first-unique-character-in-a-string",
 "link": "https://leetcode.com/problems/first-unique-character-in-a-string",
 "locked": false,
 "percent": 46.44230025931678,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "66.1K",
 "totalSubmit": "142.3K",
 "desc": "\r\nGiven a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.\r\n\r\nExamples:\r\n\r\ns = \"leetcode\"\r\nreturn 0.\r\n\r\ns = \"loveleetcode\",\r\nreturn 2.\r\n\r\n\r\n\r\n\r\nNote: You may assume the string contain only lowercase letters.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int firstUniqChar(string s) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int firstUniqChar(String s) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def firstUniqChar(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int firstUniqChar(char* s) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int FirstUniqChar(string s) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar firstUniqChar = function(s) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\r\n# @return {Integer}\r\ndef first_uniq_char(s)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func firstUniqChar(_ s: String) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func firstUniqChar(s string) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def firstUniqChar(s: String): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"leetcode\"'",
 "testable": true,
 "slug": "first-unique-character-in-a-string",
 "category": "algorithms",
 "fname": "387.first-unique-character-in-a-string.algorithms.py",
 "test_your": {
  "code_answer": [
   "0"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502536775.12_784204_10"
 },
 "test_expected": {
  "code_answer": [
   "0"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502536775.14_784204_10"
 },
 "submit_chart": [
  [
   "56",
   "0.0801"
  ],
  [
   "59",
   "0.1603"
  ],
  [
   "62",
   "1.4423"
  ],
  [
   "63",
   "0.0801"
  ],
  [
   "65",
   "2.5641"
  ],
  [
   "66",
   "1.5224"
  ],
  [
   "68",
   "1.3622"
  ],
  [
   "69",
   "2.6442"
  ],
  [
   "72",
   "2.4038"
  ],
  [
   "75",
   "0.4808"
  ],
  [
   "76",
   "0.4006"
  ],
  [
   "78",
   "0.4808"
  ],
  [
   "79",
   "0.6410"
  ],
  [
   "82",
   "1.7628"
  ],
  [
   "83",
   "0.0801"
  ],
  [
   "85",
   "0.6410"
  ],
  [
   "86",
   "0.4006"
  ],
  [
   "88",
   "0.6410"
  ],
  [
   "89",
   "0.4006"
  ],
  [
   "92",
   "0.4808"
  ],
  [
   "95",
   "0.2404"
  ],
  [
   "96",
   "0.1603"
  ],
  [
   "98",
   "0.0801"
  ],
  [
   "99",
   "0.2404"
  ],
  [
   "102",
   "0.3205"
  ],
  [
   "105",
   "0.6410"
  ],
  [
   "108",
   "0.0801"
  ],
  [
   "109",
   "0.3205"
  ],
  [
   "112",
   "0.0801"
  ],
  [
   "115",
   "0.3205"
  ],
  [
   "118",
   "0.1603"
  ],
  [
   "119",
   "0.0801"
  ],
  [
   "122",
   "0.2404"
  ],
  [
   "125",
   "0.4808"
  ],
  [
   "128",
   "0.0801"
  ],
  [
   "129",
   "0.4808"
  ],
  [
   "132",
   "0.4808"
  ],
  [
   "133",
   "0.0801"
  ],
  [
   "135",
   "0.4006"
  ],
  [
   "136",
   "0.0801"
  ],
  [
   "139",
   "0.4006"
  ],
  [
   "142",
   "0.4006"
  ],
  [
   "145",
   "0.4808"
  ],
  [
   "146",
   "0.4006"
  ],
  [
   "148",
   "0.3205"
  ],
  [
   "149",
   "0.5609"
  ],
  [
   "152",
   "0.8814"
  ],
  [
   "155",
   "0.4006"
  ],
  [
   "156",
   "0.4006"
  ],
  [
   "158",
   "0.0801"
  ],
  [
   "159",
   "0.6410"
  ],
  [
   "162",
   "1.2019"
  ],
  [
   "163",
   "0.0801"
  ],
  [
   "165",
   "0.7212"
  ],
  [
   "166",
   "0.3205"
  ],
  [
   "168",
   "0.2404"
  ],
  [
   "169",
   "1.2019"
  ],
  [
   "172",
   "1.2821"
  ],
  [
   "173",
   "0.0801"
  ],
  [
   "175",
   "0.8814"
  ],
  [
   "176",
   "0.3205"
  ],
  [
   "178",
   "0.4808"
  ],
  [
   "179",
   "1.1218"
  ],
  [
   "182",
   "1.8429"
  ],
  [
   "183",
   "0.1603"
  ],
  [
   "185",
   "0.8013"
  ],
  [
   "186",
   "0.4006"
  ],
  [
   "188",
   "0.3205"
  ],
  [
   "189",
   "0.7212"
  ],
  [
   "192",
   "1.3622"
  ],
  [
   "195",
   "0.7212"
  ],
  [
   "196",
   "0.4808"
  ],
  [
   "198",
   "0.2404"
  ],
  [
   "199",
   "0.7212"
  ],
  [
   "202",
   "1.8429"
  ],
  [
   "205",
   "0.7212"
  ],
  [
   "206",
   "0.4006"
  ],
  [
   "208",
   "0.8013"
  ],
  [
   "209",
   "0.4808"
  ],
  [
   "212",
   "1.3622"
  ],
  [
   "215",
   "0.7212"
  ],
  [
   "216",
   "0.5609"
  ],
  [
   "218",
   "0.4006"
  ],
  [
   "219",
   "0.8013"
  ],
  [
   "222",
   "0.8013"
  ],
  [
   "225",
   "0.7212"
  ],
  [
   "226",
   "0.4006"
  ],
  [
   "228",
   "0.5609"
  ],
  [
   "229",
   "1.0417"
  ],
  [
   "232",
   "0.8013"
  ],
  [
   "233",
   "0.0801"
  ],
  [
   "235",
   "0.7212"
  ],
  [
   "236",
   "0.8814"
  ],
  [
   "238",
   "0.3205"
  ],
  [
   "239",
   "0.8013"
  ],
  [
   "242",
   "0.3205"
  ],
  [
   "243",
   "0.0801"
  ],
  [
   "245",
   "0.5609"
  ],
  [
   "246",
   "0.0801"
  ],
  [
   "248",
   "0.4808"
  ],
  [
   "249",
   "0.3205"
  ],
  [
   "252",
   "0.6410"
  ],
  [
   "255",
   "0.5609"
  ],
  [
   "256",
   "0.3205"
  ],
  [
   "258",
   "0.3205"
  ],
  [
   "259",
   "0.6410"
  ],
  [
   "262",
   "0.7212"
  ],
  [
   "265",
   "0.0801"
  ],
  [
   "266",
   "0.1603"
  ],
  [
   "268",
   "0.0801"
  ],
  [
   "269",
   "0.3205"
  ],
  [
   "272",
   "0.4006"
  ],
  [
   "275",
   "0.4006"
  ],
  [
   "276",
   "0.0801"
  ],
  [
   "278",
   "0.2404"
  ],
  [
   "279",
   "0.8013"
  ],
  [
   "282",
   "0.6410"
  ],
  [
   "283",
   "0.1603"
  ],
  [
   "285",
   "0.4808"
  ],
  [
   "286",
   "0.2404"
  ],
  [
   "288",
   "0.2404"
  ],
  [
   "289",
   "0.3205"
  ],
  [
   "292",
   "0.5609"
  ],
  [
   "293",
   "0.0801"
  ],
  [
   "295",
   "0.1603"
  ],
  [
   "298",
   "0.1603"
  ],
  [
   "299",
   "0.5609"
  ],
  [
   "302",
   "0.3205"
  ],
  [
   "305",
   "0.4006"
  ],
  [
   "306",
   "0.1603"
  ],
  [
   "308",
   "0.0801"
  ],
  [
   "309",
   "0.4808"
  ],
  [
   "312",
   "0.2404"
  ],
  [
   "315",
   "0.2404"
  ],
  [
   "316",
   "0.1603"
  ],
  [
   "318",
   "0.0801"
  ],
  [
   "319",
   "0.1603"
  ],
  [
   "322",
   "0.4808"
  ],
  [
   "328",
   "0.1603"
  ],
  [
   "332",
   "0.5609"
  ],
  [
   "335",
   "0.3205"
  ],
  [
   "338",
   "0.3205"
  ],
  [
   "339",
   "0.0801"
  ],
  [
   "342",
   "0.7212"
  ],
  [
   "345",
   "0.9615"
  ],
  [
   "346",
   "0.4006"
  ],
  [
   "348",
   "0.3205"
  ],
  [
   "349",
   "0.4808"
  ],
  [
   "352",
   "0.5609"
  ],
  [
   "353",
   "0.0801"
  ],
  [
   "355",
   "0.4006"
  ],
  [
   "356",
   "0.1603"
  ],
  [
   "358",
   "0.4808"
  ],
  [
   "359",
   "0.1603"
  ],
  [
   "362",
   "0.8013"
  ],
  [
   "365",
   "0.8013"
  ],
  [
   "366",
   "0.2404"
  ],
  [
   "368",
   "0.1603"
  ],
  [
   "369",
   "0.4808"
  ],
  [
   "372",
   "0.8814"
  ],
  [
   "375",
   "0.2404"
  ],
  [
   "376",
   "0.3205"
  ],
  [
   "378",
   "0.2404"
  ],
  [
   "379",
   "0.3205"
  ],
  [
   "382",
   "0.7212"
  ],
  [
   "385",
   "0.5609"
  ],
  [
   "386",
   "0.2404"
  ],
  [
   "388",
   "0.2404"
  ],
  [
   "389",
   "0.4808"
  ],
  [
   "392",
   "0.3205"
  ],
  [
   "395",
   "0.2404"
  ],
  [
   "396",
   "0.2404"
  ],
  [
   "399",
   "0.2404"
  ],
  [
   "402",
   "0.0801"
  ],
  [
   "403",
   "0.0801"
  ],
  [
   "405",
   "0.4808"
  ],
  [
   "406",
   "0.1603"
  ],
  [
   "408",
   "0.0801"
  ],
  [
   "409",
   "0.0801"
  ],
  [
   "412",
   "0.6410"
  ],
  [
   "415",
   "0.1603"
  ],
  [
   "416",
   "0.2404"
  ],
  [
   "418",
   "0.0801"
  ],
  [
   "419",
   "0.1603"
  ],
  [
   "425",
   "0.0801"
  ],
  [
   "426",
   "0.1603"
  ],
  [
   "428",
   "0.0801"
  ],
  [
   "429",
   "0.2404"
  ],
  [
   "432",
   "0.2404"
  ],
  [
   "435",
   "0.2404"
  ],
  [
   "439",
   "0.0801"
  ],
  [
   "442",
   "0.0801"
  ],
  [
   "445",
   "0.1603"
  ],
  [
   "448",
   "0.0801"
  ],
  [
   "452",
   "0.0801"
  ],
  [
   "455",
   "0.0801"
  ],
  [
   "458",
   "0.0801"
  ],
  [
   "462",
   "0.3205"
  ],
  [
   "475",
   "0.2404"
  ],
  [
   "479",
   "0.0801"
  ],
  [
   "482",
   "0.0801"
  ],
  [
   "499",
   "0.1603"
  ],
  [
   "506",
   "0.0801"
  ],
  [
   "512",
   "0.0801"
  ],
  [
   "519",
   "0.0801"
  ],
  [
   "522",
   "0.0801"
  ],
  [
   "535",
   "0.0801"
  ],
  [
   "545",
   "0.0801"
  ],
  [
   "548",
   "0.0801"
  ],
  [
   "549",
   "0.0801"
  ],
  [
   "552",
   "0.0801"
  ],
  [
   "565",
   "0.0801"
  ],
  [
   "578",
   "0.0801"
  ],
  [
   "582",
   "0.0801"
  ],
  [
   "589",
   "0.0801"
  ],
  [
   "592",
   "0.1603"
  ],
  [
   "595",
   "0.0801"
  ],
  [
   "606",
   "0.1603"
  ],
  [
   "608",
   "0.0801"
  ],
  [
   "609",
   "0.1603"
  ],
  [
   "619",
   "0.1603"
  ],
  [
   "622",
   "0.0801"
  ],
  [
   "626",
   "0.0801"
  ],
  [
   "632",
   "0.0801"
  ],
  [
   "636",
   "0.0801"
  ],
  [
   "652",
   "0.1603"
  ],
  [
   "658",
   "0.1603"
  ],
  [
   "659",
   "0.0801"
  ],
  [
   "665",
   "0.0801"
  ],
  [
   "668",
   "0.0801"
  ],
  [
   "669",
   "0.0801"
  ],
  [
   "682",
   "0.0801"
  ],
  [
   "688",
   "0.0801"
  ],
  [
   "689",
   "0.2404"
  ],
  [
   "695",
   "0.0801"
  ],
  [
   "696",
   "0.0801"
  ],
  [
   "702",
   "0.1603"
  ],
  [
   "705",
   "0.0801"
  ],
  [
   "709",
   "0.0801"
  ],
  [
   "715",
   "0.0801"
  ],
  [
   "718",
   "0.0801"
  ],
  [
   "722",
   "0.0801"
  ],
  [
   "736",
   "0.0801"
  ],
  [
   "738",
   "0.0801"
  ],
  [
   "742",
   "0.1603"
  ],
  [
   "745",
   "0.0801"
  ],
  [
   "752",
   "0.0801"
  ],
  [
   "756",
   "0.0801"
  ],
  [
   "762",
   "0.0801"
  ],
  [
   "765",
   "0.0801"
  ],
  [
   "776",
   "0.0801"
  ],
  [
   "782",
   "0.0801"
  ],
  [
   "785",
   "0.0801"
  ],
  [
   "788",
   "0.0801"
  ],
  [
   "789",
   "0.1603"
  ],
  [
   "802",
   "0.1603"
  ],
  [
   "808",
   "0.0801"
  ],
  [
   "828",
   "0.0801"
  ],
  [
   "829",
   "0.1603"
  ],
  [
   "832",
   "0.0801"
  ],
  [
   "845",
   "0.0801"
  ],
  [
   "852",
   "0.1603"
  ],
  [
   "865",
   "0.0801"
  ],
  [
   "876",
   "0.0801"
  ],
  [
   "889",
   "0.0801"
  ],
  [
   "899",
   "0.0801"
  ],
  [
   "906",
   "0.0801"
  ],
  [
   "916",
   "0.0801"
  ],
  [
   "979",
   "0.0801"
  ],
  [
   "995",
   "0.0801"
  ],
  [
   "1018",
   "0.0801"
  ],
  [
   "1028",
   "0.0801"
  ],
  [
   "1049",
   "0.0801"
  ],
  [
   "1059",
   "0.0801"
  ],
  [
   "1072",
   "0.0801"
  ],
  [
   "1082",
   "0.0801"
  ],
  [
   "1085",
   "0.0801"
  ],
  [
   "1109",
   "0.0801"
  ],
  [
   "1122",
   "0.0801"
  ],
  [
   "1166",
   "0.0801"
  ],
  [
   "1382",
   "0.0801"
  ],
  [
   "1502",
   "0.0801"
  ],
  [
   "1545",
   "0.0801"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 104,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "82 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 104,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 387,
  "name": "Your",
  "id": 113555380
 },
 "file": "387.first-unique-character-in-a-string.algorithms.py"
}