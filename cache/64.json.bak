{"id": 64, "ids": "64", "state": "None", "name": "Minimum Path Sum", "key": "minimum-path-sum", "link": "https://leetcode.com/problems/minimum-path-sum", "locked": false, "percent": 38.27056121039833, "level": "Medium", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\r\n\r\nNote: You can only move either down or right at any point in time.", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    int minPathSum(vector<vector<int>>& grid) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int minPathSum(int[][] grid) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def minPathSum(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "int minPathSum(int** grid, int gridRowSize, int gridColSize) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int MinPathSum(int[,] grid) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar minPathSum = function(grid) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer[][]} grid\r\n# @return {Integer}\r\ndef min_path_sum(grid)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\n    func minPathSum(_ grid: [[Int]]) -> Int {\n        \n    }\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func minPathSum(grid [][]int) int {\n    \n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def minPathSum(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"}], "testcase": "'[[0]]'", "testable": true}