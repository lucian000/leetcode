{
 "id": 459,
 "ids": "459",
 "state": "None",
 "name": "Repeated Substring Pattern",
 "key": "repeated-substring-pattern",
 "link": "https://leetcode.com/problems/repeated-substring-pattern",
 "locked": false,
 "percent": 38.10076021131297,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "32.5K",
 "totalSubmit": "85.4K",
 "desc": "Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.  You may assume the given string consists of lowercase English letters only and its length  will not exceed 10000. \r\n\r\nExample 1:\r\n\r\nInput: \"abab\"\r\n\r\nOutput: True\r\n\r\nExplanation: It's the substring \"ab\" twice.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: \"aba\"\r\n\r\nOutput: False\r\n\r\n\r\n\r\nExample 3:\r\n\r\nInput: \"abcabcabcabc\"\r\n\r\nOutput: True\r\n\r\nExplanation: It's the substring \"abc\" four times. (And the substring \"abcabc\" twice.)\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool repeatedSubstringPattern(string s) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean repeatedSubstringPattern(String s) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def repeatedSubstringPattern(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool repeatedSubstringPattern(char* s) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool RepeatedSubstringPattern(string s) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar repeatedSubstringPattern = function(s) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\r\n# @return {Boolean}\r\ndef repeated_substring_pattern(s)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func repeatedSubstringPattern(_ s: String) -> Bool {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func repeatedSubstringPattern(s string) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def repeatedSubstringPattern(s: String): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"abab\"'",
 "testable": true,
 "slug": "repeated-substring-pattern",
 "category": "algorithms",
 "fname": "459.repeated-substring-pattern.algorithms.py",
 "test_your": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502120410.27_784204_12"
 },
 "test_expected": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502120410.29_784204_12"
 },
 "submit_chart": [
  [
   "35",
   "1.9200"
  ],
  [
   "36",
   "0.8000"
  ],
  [
   "38",
   "2.4000"
  ],
  [
   "39",
   "3.8400"
  ],
  [
   "42",
   "8.1600"
  ],
  [
   "43",
   "0.6400"
  ],
  [
   "45",
   "3.3600"
  ],
  [
   "46",
   "2.7200"
  ],
  [
   "48",
   "1.6000"
  ],
  [
   "49",
   "3.5200"
  ],
  [
   "52",
   "4.3200"
  ],
  [
   "55",
   "0.4800"
  ],
  [
   "56",
   "1.1200"
  ],
  [
   "58",
   "0.6400"
  ],
  [
   "59",
   "1.2800"
  ],
  [
   "62",
   "2.5600"
  ],
  [
   "65",
   "1.4400"
  ],
  [
   "66",
   "0.8000"
  ],
  [
   "68",
   "0.6400"
  ],
  [
   "69",
   "0.8000"
  ],
  [
   "72",
   "3.5200"
  ],
  [
   "75",
   "1.9200"
  ],
  [
   "76",
   "1.1200"
  ],
  [
   "78",
   "0.8000"
  ],
  [
   "79",
   "1.4400"
  ],
  [
   "82",
   "2.4000"
  ],
  [
   "85",
   "1.2800"
  ],
  [
   "86",
   "0.6400"
  ],
  [
   "88",
   "0.4800"
  ],
  [
   "89",
   "0.3200"
  ],
  [
   "92",
   "0.8000"
  ],
  [
   "93",
   "0.1600"
  ],
  [
   "95",
   "1.4400"
  ],
  [
   "96",
   "0.4800"
  ],
  [
   "98",
   "0.8000"
  ],
  [
   "99",
   "0.6400"
  ],
  [
   "102",
   "1.4400"
  ],
  [
   "105",
   "0.3200"
  ],
  [
   "106",
   "0.6400"
  ],
  [
   "108",
   "0.3200"
  ],
  [
   "109",
   "0.4800"
  ],
  [
   "112",
   "0.9600"
  ],
  [
   "115",
   "0.3200"
  ],
  [
   "116",
   "0.6400"
  ],
  [
   "119",
   "0.8000"
  ],
  [
   "122",
   "0.4800"
  ],
  [
   "125",
   "0.1600"
  ],
  [
   "126",
   "0.4800"
  ],
  [
   "128",
   "0.1600"
  ],
  [
   "129",
   "0.3200"
  ],
  [
   "132",
   "0.4800"
  ],
  [
   "135",
   "0.1600"
  ],
  [
   "136",
   "0.3200"
  ],
  [
   "138",
   "0.1600"
  ],
  [
   "139",
   "0.4800"
  ],
  [
   "149",
   "0.1600"
  ],
  [
   "152",
   "0.4800"
  ],
  [
   "156",
   "0.3200"
  ],
  [
   "159",
   "0.1600"
  ],
  [
   "165",
   "0.1600"
  ],
  [
   "166",
   "0.1600"
  ],
  [
   "175",
   "0.1600"
  ],
  [
   "179",
   "0.1600"
  ],
  [
   "182",
   "0.4800"
  ],
  [
   "185",
   "0.1600"
  ],
  [
   "188",
   "0.1600"
  ],
  [
   "189",
   "0.3200"
  ],
  [
   "192",
   "0.1600"
  ],
  [
   "195",
   "0.1600"
  ],
  [
   "196",
   "0.1600"
  ],
  [
   "199",
   "0.1600"
  ],
  [
   "205",
   "0.3200"
  ],
  [
   "206",
   "0.1600"
  ],
  [
   "208",
   "0.1600"
  ],
  [
   "212",
   "0.3200"
  ],
  [
   "219",
   "0.3200"
  ],
  [
   "222",
   "0.1600"
  ],
  [
   "225",
   "0.4800"
  ],
  [
   "229",
   "0.3200"
  ],
  [
   "232",
   "0.1600"
  ],
  [
   "235",
   "0.3200"
  ],
  [
   "245",
   "0.1600"
  ],
  [
   "246",
   "0.1600"
  ],
  [
   "249",
   "0.3200"
  ],
  [
   "252",
   "0.4800"
  ],
  [
   "255",
   "0.1600"
  ],
  [
   "258",
   "0.1600"
  ],
  [
   "259",
   "0.4800"
  ],
  [
   "262",
   "0.1600"
  ],
  [
   "265",
   "0.1600"
  ],
  [
   "269",
   "0.1600"
  ],
  [
   "272",
   "0.1600"
  ],
  [
   "276",
   "0.1600"
  ],
  [
   "282",
   "0.8000"
  ],
  [
   "292",
   "0.1600"
  ],
  [
   "296",
   "0.1600"
  ],
  [
   "298",
   "0.1600"
  ],
  [
   "302",
   "0.1600"
  ],
  [
   "308",
   "0.1600"
  ],
  [
   "309",
   "0.3200"
  ],
  [
   "312",
   "0.1600"
  ],
  [
   "315",
   "0.1600"
  ],
  [
   "329",
   "0.1600"
  ],
  [
   "332",
   "0.4800"
  ],
  [
   "339",
   "0.1600"
  ],
  [
   "342",
   "0.3200"
  ],
  [
   "346",
   "0.1600"
  ],
  [
   "349",
   "0.3200"
  ],
  [
   "352",
   "0.1600"
  ],
  [
   "356",
   "0.1600"
  ],
  [
   "362",
   "0.3200"
  ],
  [
   "366",
   "0.1600"
  ],
  [
   "372",
   "0.1600"
  ],
  [
   "382",
   "0.1600"
  ],
  [
   "383",
   "0.1600"
  ],
  [
   "389",
   "0.1600"
  ],
  [
   "392",
   "0.1600"
  ],
  [
   "409",
   "0.1600"
  ],
  [
   "412",
   "0.3200"
  ],
  [
   "422",
   "0.3200"
  ],
  [
   "429",
   "0.1600"
  ],
  [
   "432",
   "0.1600"
  ],
  [
   "435",
   "0.3200"
  ],
  [
   "439",
   "0.1600"
  ],
  [
   "445",
   "0.1600"
  ],
  [
   "448",
   "0.1600"
  ],
  [
   "469",
   "0.1600"
  ],
  [
   "472",
   "0.1600"
  ],
  [
   "482",
   "0.1600"
  ],
  [
   "485",
   "0.1600"
  ],
  [
   "489",
   "0.1600"
  ],
  [
   "492",
   "0.1600"
  ],
  [
   "509",
   "0.1600"
  ],
  [
   "522",
   "0.4800"
  ],
  [
   "539",
   "0.1600"
  ],
  [
   "545",
   "0.3200"
  ],
  [
   "572",
   "0.1600"
  ],
  [
   "579",
   "0.1600"
  ],
  [
   "582",
   "0.1600"
  ],
  [
   "588",
   "0.1600"
  ],
  [
   "589",
   "0.1600"
  ],
  [
   "605",
   "0.1600"
  ],
  [
   "626",
   "0.1600"
  ],
  [
   "642",
   "0.1600"
  ],
  [
   "649",
   "0.1600"
  ],
  [
   "656",
   "0.1600"
  ],
  [
   "662",
   "0.1600"
  ],
  [
   "669",
   "0.1600"
  ],
  [
   "689",
   "0.1600"
  ],
  [
   "699",
   "0.1600"
  ],
  [
   "712",
   "0.1600"
  ],
  [
   "742",
   "0.1600"
  ],
  [
   "772",
   "0.1600"
  ],
  [
   "826",
   "0.1600"
  ],
  [
   "846",
   "0.1600"
  ],
  [
   "849",
   "0.1600"
  ],
  [
   "872",
   "0.1600"
  ],
  [
   "899",
   "0.1600"
  ],
  [
   "909",
   "0.1600"
  ],
  [
   "965",
   "0.1600"
  ],
  [
   "972",
   "0.1600"
  ],
  [
   "1002",
   "0.1600"
  ],
  [
   "1005",
   "0.1600"
  ],
  [
   "1008",
   "0.1600"
  ],
  [
   "1012",
   "0.1600"
  ],
  [
   "1016",
   "0.1600"
  ],
  [
   "1019",
   "0.1600"
  ],
  [
   "1042",
   "0.1600"
  ],
  [
   "1045",
   "0.1600"
  ],
  [
   "1049",
   "0.3200"
  ],
  [
   "1055",
   "0.1600"
  ],
  [
   "1059",
   "0.1600"
  ],
  [
   "1066",
   "0.1600"
  ],
  [
   "1079",
   "0.1600"
  ],
  [
   "1085",
   "0.1600"
  ],
  [
   "1102",
   "0.1600"
  ],
  [
   "1112",
   "0.1600"
  ],
  [
   "1116",
   "0.1600"
  ],
  [
   "1122",
   "0.3200"
  ],
  [
   "1132",
   "0.3200"
  ],
  [
   "1135",
   "0.4800"
  ],
  [
   "1146",
   "0.1600"
  ],
  [
   "1149",
   "0.1600"
  ],
  [
   "1158",
   "0.1600"
  ],
  [
   "1165",
   "0.1600"
  ],
  [
   "1175",
   "0.3200"
  ],
  [
   "1185",
   "0.1600"
  ],
  [
   "1222",
   "0.1600"
  ],
  [
   "1223",
   "0.1600"
  ],
  [
   "1235",
   "0.1600"
  ],
  [
   "1275",
   "0.1600"
  ],
  [
   "1288",
   "0.1600"
  ],
  [
   "1392",
   "0.1600"
  ],
  [
   "1429",
   "0.1600"
  ],
  [
   "1435",
   "0.1600"
  ],
  [
   "1452",
   "0.1600"
  ],
  [
   "1509",
   "0.1600"
  ],
  [
   "1539",
   "0.1600"
  ],
  [
   "1595",
   "0.1600"
  ],
  [
   "1845",
   "0.1600"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 107,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "626 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 107,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 459,
  "name": "Your",
  "id": 112881067
 }
}