{
 "id": 26,
 "ids": "26",
 "state": "None",
 "name": "Remove Duplicates from Sorted Array",
 "key": "remove-duplicates-from-sorted-array",
 "link": "https://leetcode.com/problems/remove-duplicates-from-sorted-array",
 "locked": false,
 "percent": 35.516781858761135,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "240.1K",
 "totalSubmit": "676.1K",
 "desc": "\r\nGiven a sorted array, remove the duplicates in place such that each element appear only once and return the new length.\r\n\r\n\r\nDo not allocate extra space for another array, you must do this in place with constant memory.\r\n\r\n\r\n\r\nFor example,\r\nGiven input array nums = [1,1,2],\r\n\r\n\r\nYour function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int removeDuplicates(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int removeDuplicates(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def removeDuplicates(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int removeDuplicates(int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int RemoveDuplicates(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar removeDuplicates = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef remove_duplicates(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func removeDuplicates(nums []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]'",
 "testable": true,
 "slug": "remove-duplicates-from-sorted-array",
 "category": "algorithms",
 "fname": "26.remove-duplicates-from-sorted-array.algorithms.py",
 "test_your": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501685081.06_784204_5"
 },
 "test_expected": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501685081.08_784204_5"
 },
 "submit_chart": [
  [
   "68",
   "0.1494"
  ],
  [
   "69",
   "0.4856"
  ],
  [
   "72",
   "3.7729"
  ],
  [
   "73",
   "0.2241"
  ],
  [
   "75",
   "5.1924"
  ],
  [
   "76",
   "3.1378"
  ],
  [
   "78",
   "3.0631"
  ],
  [
   "79",
   "6.6866"
  ],
  [
   "82",
   "9.6750"
  ],
  [
   "83",
   "0.2615"
  ],
  [
   "85",
   "6.1263"
  ],
  [
   "86",
   "2.6896"
  ],
  [
   "88",
   "2.4654"
  ],
  [
   "89",
   "4.8935"
  ],
  [
   "92",
   "5.8274"
  ],
  [
   "93",
   "0.0747"
  ],
  [
   "95",
   "2.9511"
  ],
  [
   "96",
   "1.4195"
  ],
  [
   "98",
   "1.2327"
  ],
  [
   "99",
   "2.3907"
  ],
  [
   "102",
   "2.6522"
  ],
  [
   "103",
   "0.0747"
  ],
  [
   "105",
   "1.6810"
  ],
  [
   "106",
   "0.6350"
  ],
  [
   "108",
   "0.6350"
  ],
  [
   "109",
   "1.0086"
  ],
  [
   "112",
   "2.0172"
  ],
  [
   "115",
   "1.0833"
  ],
  [
   "116",
   "0.4109"
  ],
  [
   "118",
   "0.8218"
  ],
  [
   "119",
   "1.9798"
  ],
  [
   "122",
   "2.2413"
  ],
  [
   "123",
   "0.1121"
  ],
  [
   "125",
   "1.9051"
  ],
  [
   "126",
   "1.2701"
  ],
  [
   "128",
   "0.7471"
  ],
  [
   "129",
   "1.3448"
  ],
  [
   "132",
   "2.0545"
  ],
  [
   "133",
   "0.1121"
  ],
  [
   "135",
   "0.7471"
  ],
  [
   "136",
   "0.7097"
  ],
  [
   "138",
   "0.2988"
  ],
  [
   "139",
   "1.1954"
  ],
  [
   "142",
   "1.5316"
  ],
  [
   "145",
   "0.6350"
  ],
  [
   "146",
   "0.4109"
  ],
  [
   "148",
   "0.3362"
  ],
  [
   "149",
   "0.5977"
  ],
  [
   "152",
   "0.8965"
  ],
  [
   "155",
   "0.4856"
  ],
  [
   "156",
   "0.1868"
  ],
  [
   "158",
   "0.1868"
  ],
  [
   "159",
   "0.4109"
  ],
  [
   "162",
   "0.5230"
  ],
  [
   "165",
   "0.1121"
  ],
  [
   "166",
   "0.1494"
  ],
  [
   "168",
   "0.2241"
  ],
  [
   "169",
   "0.2241"
  ],
  [
   "172",
   "0.4109"
  ],
  [
   "175",
   "0.1494"
  ],
  [
   "176",
   "0.1494"
  ],
  [
   "178",
   "0.0374"
  ],
  [
   "179",
   "0.0374"
  ],
  [
   "182",
   "0.2241"
  ],
  [
   "185",
   "0.0374"
  ],
  [
   "186",
   "0.1121"
  ],
  [
   "188",
   "0.0374"
  ],
  [
   "189",
   "0.1121"
  ],
  [
   "192",
   "0.0747"
  ],
  [
   "195",
   "0.0747"
  ],
  [
   "199",
   "0.0747"
  ],
  [
   "202",
   "0.1121"
  ],
  [
   "205",
   "0.0747"
  ],
  [
   "209",
   "0.0747"
  ],
  [
   "212",
   "0.0374"
  ],
  [
   "215",
   "0.0747"
  ],
  [
   "216",
   "0.0747"
  ],
  [
   "219",
   "0.0747"
  ],
  [
   "226",
   "0.0374"
  ],
  [
   "229",
   "0.1121"
  ],
  [
   "232",
   "0.0374"
  ],
  [
   "235",
   "0.0374"
  ],
  [
   "236",
   "0.0374"
  ],
  [
   "239",
   "0.0747"
  ],
  [
   "248",
   "0.0374"
  ],
  [
   "249",
   "0.0747"
  ],
  [
   "252",
   "0.0374"
  ],
  [
   "292",
   "0.0747"
  ],
  [
   "296",
   "0.0374"
  ],
  [
   "329",
   "0.0374"
  ],
  [
   "338",
   "0.0747"
  ],
  [
   "376",
   "0.0374"
  ],
  [
   "402",
   "0.0374"
  ],
  [
   "518",
   "0.0374"
  ],
  [
   "565",
   "0.0374"
  ],
  [
   "769",
   "0.0374"
  ],
  [
   "848",
   "0.0374"
  ],
  [
   "852",
   "0.0374"
  ],
  [
   "855",
   "0.0374"
  ],
  [
   "856",
   "0.0374"
  ],
  [
   "862",
   "0.1494"
  ],
  [
   "865",
   "0.1121"
  ],
  [
   "866",
   "0.0374"
  ],
  [
   "868",
   "0.0747"
  ],
  [
   "869",
   "0.0747"
  ],
  [
   "872",
   "0.0747"
  ],
  [
   "875",
   "0.0747"
  ],
  [
   "876",
   "0.0747"
  ],
  [
   "879",
   "0.0747"
  ],
  [
   "882",
   "0.0747"
  ],
  [
   "885",
   "0.0747"
  ],
  [
   "888",
   "0.0374"
  ],
  [
   "889",
   "0.1121"
  ],
  [
   "892",
   "0.2615"
  ],
  [
   "895",
   "0.0747"
  ],
  [
   "896",
   "0.0374"
  ],
  [
   "898",
   "0.0374"
  ],
  [
   "899",
   "0.0747"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 161,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "89 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 161,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 26,
  "name": "Your",
  "id": 112193568
 }
}