{
 "id": 530,
 "ids": "530",
 "state": "None",
 "name": "Minimum Absolute Difference in BST",
 "key": "minimum-absolute-difference-in-bst",
 "link": "https://leetcode.com/problems/minimum-absolute-difference-in-bst",
 "locked": false,
 "percent": 46.98344353887949,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "18.3K",
 "totalSubmit": "39K",
 "desc": "Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.\r\n\r\n\r\nExample:\r\n\r\nInput:\r\n\r\n   1\r\n    \\\r\n     3\r\n    /\r\n   2\r\n\r\nOutput:\r\n1\r\n\r\nExplanation:\r\nThe minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).\r\n\r\n\r\n\r\n\r\nNote:\r\nThere are at least two nodes in this BST.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int getMinimumDifference(TreeNode* root) {\n        \n    }\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int getMinimumDifference(TreeNode root) {\n        \n    }\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint getMinimumDifference(struct TreeNode* root) {\n    \n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int GetMinimumDifference(TreeNode root) {\n        \n    }\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar getMinimumDifference = function(root) {\n    \n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef get_minimum_difference(root)\n    \nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func getMinimumDifference(_ root: TreeNode?) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc getMinimumDifference(root *TreeNode) int {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def getMinimumDifference(root: TreeNode): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,null,3,2]'",
 "testable": true,
 "slug": "minimum-absolute-difference-in-bst",
 "category": "algorithms",
 "fname": "530.minimum-absolute-difference-in-bst.algorithms.py",
 "test_your": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501680460.41_784204_41"
 },
 "test_expected": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501680460.44_784204_41"
 },
 "submit_chart": [
  [
   "72",
   "0.5034"
  ],
  [
   "75",
   "0.5034"
  ],
  [
   "76",
   "0.3356"
  ],
  [
   "78",
   "0.3356"
  ],
  [
   "79",
   "2.3490"
  ],
  [
   "82",
   "5.8725"
  ],
  [
   "83",
   "0.1678"
  ],
  [
   "85",
   "6.5436"
  ],
  [
   "86",
   "2.0134"
  ],
  [
   "88",
   "2.6846"
  ],
  [
   "89",
   "7.0470"
  ],
  [
   "92",
   "9.3960"
  ],
  [
   "93",
   "0.1678"
  ],
  [
   "95",
   "6.5436"
  ],
  [
   "96",
   "4.8658"
  ],
  [
   "98",
   "2.3490"
  ],
  [
   "99",
   "4.5302"
  ],
  [
   "102",
   "6.0403"
  ],
  [
   "105",
   "3.0201"
  ],
  [
   "106",
   "1.5101"
  ],
  [
   "108",
   "1.6779"
  ],
  [
   "109",
   "3.8591"
  ],
  [
   "112",
   "3.8591"
  ],
  [
   "115",
   "1.0067"
  ],
  [
   "116",
   "0.5034"
  ],
  [
   "118",
   "1.1745"
  ],
  [
   "119",
   "1.5101"
  ],
  [
   "122",
   "1.3423"
  ],
  [
   "125",
   "1.5101"
  ],
  [
   "126",
   "0.5034"
  ],
  [
   "128",
   "0.3356"
  ],
  [
   "129",
   "0.1678"
  ],
  [
   "132",
   "1.8456"
  ],
  [
   "135",
   "1.1745"
  ],
  [
   "136",
   "1.1745"
  ],
  [
   "139",
   "1.1745"
  ],
  [
   "142",
   "1.1745"
  ],
  [
   "145",
   "0.5034"
  ],
  [
   "146",
   "0.5034"
  ],
  [
   "149",
   "1.0067"
  ],
  [
   "152",
   "0.3356"
  ],
  [
   "155",
   "0.3356"
  ],
  [
   "156",
   "0.1678"
  ],
  [
   "158",
   "0.1678"
  ],
  [
   "159",
   "0.1678"
  ],
  [
   "162",
   "0.5034"
  ],
  [
   "165",
   "0.1678"
  ],
  [
   "166",
   "0.5034"
  ],
  [
   "168",
   "0.1678"
  ],
  [
   "169",
   "0.3356"
  ],
  [
   "172",
   "0.1678"
  ],
  [
   "179",
   "0.1678"
  ],
  [
   "189",
   "0.1678"
  ],
  [
   "192",
   "0.1678"
  ],
  [
   "195",
   "0.1678"
  ],
  [
   "196",
   "0.1678"
  ],
  [
   "199",
   "0.1678"
  ],
  [
   "206",
   "0.1678"
  ],
  [
   "216",
   "0.1678"
  ],
  [
   "219",
   "0.3356"
  ],
  [
   "226",
   "0.3356"
  ],
  [
   "238",
   "0.1678"
  ],
  [
   "246",
   "0.1678"
  ],
  [
   "275",
   "0.1678"
  ],
  [
   "288",
   "0.1678"
  ],
  [
   "292",
   "0.1678"
  ],
  [
   "339",
   "0.3356"
  ],
  [
   "406",
   "0.1678"
  ],
  [
   "572",
   "0.1678"
  ],
  [
   "798",
   "0.1678"
  ],
  [
   "815",
   "0.1678"
  ],
  [
   "822",
   "0.1678"
  ],
  [
   "869",
   "0.1678"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 186,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "162 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 186,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 530,
  "name": "Your",
  "id": 112186644
 }
}