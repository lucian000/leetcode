{
 "id": 599,
 "ids": "599",
 "state": "None",
 "name": "Minimum Index Sum of Two Lists",
 "key": "minimum-index-sum-of-two-lists",
 "link": "https://leetcode.com/problems/minimum-index-sum-of-two-lists",
 "locked": false,
 "percent": 47.63812458727713,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "10.8K",
 "totalSubmit": "22.7K",
 "desc": "\r\nSuppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings. \r\n\r\n\r\nYou need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput:\r\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\r\n[\"Piatti\", \"The Grill at Torrey Pines\", \"Hungry Hunter Steakhouse\", \"Shogun\"]\r\nOutput: [\"Shogun\"]\r\nExplanation: The only restaurant they both like is \"Shogun\".\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput:\r\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\r\n[\"KFC\", \"Shogun\", \"Burger King\"]\r\nOutput: [\"Shogun\"]\r\nExplanation: The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\nThe length of both lists will be in the range of [1, 1000].\r\nThe length of strings in both lists will be in the range of [1, 30].\r\nThe index is starting from 0 to the list length minus 1.\r\nNo duplicates in both lists.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public String[] findRestaurant(String[] list1, String[] list2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def findRestaurant(self, list1, list2):\r\n        \"\"\"\r\n        :type list1: List[str]\r\n        :type list2: List[str]\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def findRestaurant(self, list1, list2):\r\n        \"\"\"\r\n        :type list1: List[str]\r\n        :type list2: List[str]\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findRestaurant(char** list1, int list1Size, char** list2, int list2Size, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public string[] FindRestaurant(string[] list1, string[] list2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string[]} list1\r\n * @param {string[]} list2\r\n * @return {string[]}\r\n */\r\nvar findRestaurant = function(list1, list2) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String[]} list1\r\n# @param {String[]} list2\r\n# @return {String[]}\r\ndef find_restaurant(list1, list2)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func findRestaurant(_ list1: [String], _ list2: [String]) -> [String] {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func findRestaurant(list1 []string, list2 []string) []string {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def findRestaurant(list1: Array[String], list2: Array[String]): Array[String] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"]\\n[\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]'",
 "testable": true,
 "slug": "minimum-index-sum-of-two-lists",
 "category": "algorithms",
 "fname": "599.minimum-index-sum-of-two-lists.algorithms.py",
 "test_your": {
  "code_answer": [
   "[\"Shogun\"]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501598536.31_784204_5"
 },
 "test_expected": {
  "code_answer": [
   "[\"Shogun\"]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501598536.34_784204_5"
 },
 "submit_chart": [
  [
   "92",
   "0.0999"
  ],
  [
   "93",
   "0.0999"
  ],
  [
   "95",
   "0.7992"
  ],
  [
   "96",
   "0.1998"
  ],
  [
   "98",
   "0.6993"
  ],
  [
   "99",
   "1.6983"
  ],
  [
   "102",
   "3.7962"
  ],
  [
   "105",
   "3.6963"
  ],
  [
   "106",
   "1.1988"
  ],
  [
   "108",
   "1.7982"
  ],
  [
   "109",
   "4.5954"
  ],
  [
   "112",
   "6.3936"
  ],
  [
   "113",
   "0.0999"
  ],
  [
   "115",
   "4.3956"
  ],
  [
   "116",
   "1.4985"
  ],
  [
   "118",
   "1.5984"
  ],
  [
   "119",
   "3.5964"
  ],
  [
   "122",
   "4.0959"
  ],
  [
   "123",
   "0.1998"
  ],
  [
   "125",
   "2.6973"
  ],
  [
   "126",
   "1.2987"
  ],
  [
   "128",
   "0.8991"
  ],
  [
   "129",
   "2.3976"
  ],
  [
   "132",
   "1.6983"
  ],
  [
   "135",
   "1.0989"
  ],
  [
   "136",
   "0.2997"
  ],
  [
   "138",
   "0.3996"
  ],
  [
   "139",
   "0.4995"
  ],
  [
   "142",
   "0.9990"
  ],
  [
   "145",
   "1.9980"
  ],
  [
   "146",
   "0.2997"
  ],
  [
   "148",
   "0.1998"
  ],
  [
   "149",
   "0.8991"
  ],
  [
   "152",
   "0.3996"
  ],
  [
   "155",
   "0.3996"
  ],
  [
   "156",
   "0.1998"
  ],
  [
   "158",
   "0.1998"
  ],
  [
   "159",
   "0.1998"
  ],
  [
   "162",
   "0.3996"
  ],
  [
   "165",
   "0.2997"
  ],
  [
   "168",
   "0.1998"
  ],
  [
   "169",
   "0.6993"
  ],
  [
   "172",
   "0.6993"
  ],
  [
   "175",
   "0.0999"
  ],
  [
   "176",
   "0.1998"
  ],
  [
   "178",
   "0.0999"
  ],
  [
   "179",
   "0.1998"
  ],
  [
   "182",
   "0.1998"
  ],
  [
   "185",
   "0.1998"
  ],
  [
   "186",
   "0.1998"
  ],
  [
   "188",
   "0.1998"
  ],
  [
   "192",
   "0.1998"
  ],
  [
   "195",
   "0.2997"
  ],
  [
   "199",
   "0.0999"
  ],
  [
   "202",
   "0.1998"
  ],
  [
   "205",
   "0.0999"
  ],
  [
   "206",
   "0.1998"
  ],
  [
   "209",
   "0.0999"
  ],
  [
   "212",
   "0.3996"
  ],
  [
   "215",
   "0.0999"
  ],
  [
   "222",
   "0.0999"
  ],
  [
   "225",
   "0.2997"
  ],
  [
   "228",
   "0.0999"
  ],
  [
   "229",
   "0.0999"
  ],
  [
   "232",
   "0.3996"
  ],
  [
   "235",
   "0.2997"
  ],
  [
   "236",
   "0.2997"
  ],
  [
   "238",
   "0.0999"
  ],
  [
   "239",
   "0.4995"
  ],
  [
   "242",
   "0.3996"
  ],
  [
   "245",
   "0.1998"
  ],
  [
   "246",
   "0.2997"
  ],
  [
   "248",
   "0.1998"
  ],
  [
   "249",
   "0.2997"
  ],
  [
   "252",
   "0.0999"
  ],
  [
   "255",
   "0.1998"
  ],
  [
   "256",
   "0.1998"
  ],
  [
   "258",
   "0.0999"
  ],
  [
   "259",
   "0.1998"
  ],
  [
   "262",
   "0.1998"
  ],
  [
   "265",
   "0.0999"
  ],
  [
   "266",
   "0.1998"
  ],
  [
   "269",
   "0.0999"
  ],
  [
   "272",
   "0.1998"
  ],
  [
   "275",
   "0.0999"
  ],
  [
   "276",
   "0.2997"
  ],
  [
   "282",
   "0.6993"
  ],
  [
   "285",
   "0.0999"
  ],
  [
   "288",
   "0.0999"
  ],
  [
   "289",
   "0.0999"
  ],
  [
   "295",
   "0.0999"
  ],
  [
   "296",
   "0.0999"
  ],
  [
   "298",
   "0.0999"
  ],
  [
   "302",
   "0.1998"
  ],
  [
   "305",
   "0.1998"
  ],
  [
   "309",
   "0.0999"
  ],
  [
   "312",
   "0.1998"
  ],
  [
   "315",
   "0.1998"
  ],
  [
   "316",
   "0.0999"
  ],
  [
   "319",
   "0.2997"
  ],
  [
   "322",
   "0.0999"
  ],
  [
   "326",
   "0.0999"
  ],
  [
   "328",
   "0.1998"
  ],
  [
   "332",
   "0.0999"
  ],
  [
   "339",
   "0.0999"
  ],
  [
   "345",
   "0.0999"
  ],
  [
   "349",
   "0.1998"
  ],
  [
   "352",
   "0.0999"
  ],
  [
   "362",
   "0.0999"
  ],
  [
   "365",
   "0.0999"
  ],
  [
   "369",
   "0.0999"
  ],
  [
   "388",
   "0.0999"
  ],
  [
   "402",
   "0.0999"
  ],
  [
   "405",
   "0.0999"
  ],
  [
   "406",
   "0.0999"
  ],
  [
   "409",
   "0.0999"
  ],
  [
   "412",
   "0.0999"
  ],
  [
   "422",
   "0.0999"
  ],
  [
   "426",
   "0.0999"
  ],
  [
   "429",
   "0.0999"
  ],
  [
   "432",
   "0.0999"
  ],
  [
   "448",
   "0.0999"
  ],
  [
   "452",
   "0.1998"
  ],
  [
   "462",
   "0.0999"
  ],
  [
   "472",
   "0.1998"
  ],
  [
   "479",
   "0.0999"
  ],
  [
   "482",
   "0.1998"
  ],
  [
   "489",
   "0.0999"
  ],
  [
   "492",
   "0.1998"
  ],
  [
   "495",
   "0.1998"
  ],
  [
   "498",
   "0.0999"
  ],
  [
   "499",
   "0.1998"
  ],
  [
   "502",
   "0.0999"
  ],
  [
   "506",
   "0.0999"
  ],
  [
   "508",
   "0.0999"
  ],
  [
   "509",
   "0.0999"
  ],
  [
   "512",
   "0.3996"
  ],
  [
   "515",
   "0.2997"
  ],
  [
   "516",
   "0.0999"
  ],
  [
   "518",
   "0.0999"
  ],
  [
   "522",
   "0.0999"
  ],
  [
   "525",
   "0.0999"
  ],
  [
   "529",
   "0.2997"
  ],
  [
   "535",
   "0.0999"
  ],
  [
   "538",
   "0.0999"
  ],
  [
   "539",
   "0.0999"
  ],
  [
   "542",
   "0.4995"
  ],
  [
   "545",
   "0.0999"
  ],
  [
   "548",
   "0.3996"
  ],
  [
   "549",
   "0.4995"
  ],
  [
   "552",
   "0.1998"
  ],
  [
   "555",
   "0.1998"
  ],
  [
   "556",
   "0.0999"
  ],
  [
   "562",
   "0.2997"
  ],
  [
   "566",
   "0.1998"
  ],
  [
   "568",
   "0.0999"
  ],
  [
   "569",
   "0.0999"
  ],
  [
   "572",
   "0.2997"
  ],
  [
   "575",
   "0.3996"
  ],
  [
   "576",
   "0.2997"
  ],
  [
   "578",
   "0.0999"
  ],
  [
   "579",
   "0.0999"
  ],
  [
   "582",
   "0.2997"
  ],
  [
   "585",
   "0.1998"
  ],
  [
   "586",
   "0.1998"
  ],
  [
   "588",
   "0.0999"
  ],
  [
   "592",
   "0.2997"
  ],
  [
   "595",
   "0.0999"
  ],
  [
   "596",
   "0.1998"
  ],
  [
   "599",
   "0.0999"
  ],
  [
   "602",
   "0.1998"
  ],
  [
   "605",
   "0.0999"
  ],
  [
   "606",
   "0.0999"
  ],
  [
   "608",
   "0.1998"
  ],
  [
   "609",
   "0.1998"
  ],
  [
   "612",
   "0.1998"
  ],
  [
   "615",
   "0.3996"
  ],
  [
   "616",
   "0.0999"
  ],
  [
   "625",
   "0.1998"
  ],
  [
   "629",
   "0.1998"
  ],
  [
   "632",
   "0.0999"
  ],
  [
   "636",
   "0.0999"
  ],
  [
   "639",
   "0.1998"
  ],
  [
   "642",
   "0.1998"
  ],
  [
   "646",
   "0.0999"
  ],
  [
   "649",
   "0.0999"
  ],
  [
   "652",
   "0.1998"
  ],
  [
   "658",
   "0.1998"
  ],
  [
   "662",
   "0.1998"
  ],
  [
   "672",
   "0.1998"
  ],
  [
   "676",
   "0.0999"
  ],
  [
   "678",
   "0.2997"
  ],
  [
   "685",
   "0.0999"
  ],
  [
   "688",
   "0.2997"
  ],
  [
   "689",
   "0.0999"
  ],
  [
   "692",
   "0.1998"
  ],
  [
   "695",
   "0.0999"
  ],
  [
   "696",
   "0.0999"
  ],
  [
   "705",
   "0.0999"
  ],
  [
   "706",
   "0.0999"
  ],
  [
   "709",
   "0.1998"
  ],
  [
   "712",
   "0.1998"
  ],
  [
   "725",
   "0.1998"
  ],
  [
   "729",
   "0.0999"
  ],
  [
   "732",
   "0.2997"
  ],
  [
   "738",
   "0.0999"
  ],
  [
   "742",
   "0.0999"
  ],
  [
   "745",
   "0.0999"
  ],
  [
   "748",
   "0.0999"
  ],
  [
   "749",
   "0.0999"
  ],
  [
   "752",
   "0.0999"
  ],
  [
   "755",
   "0.1998"
  ],
  [
   "759",
   "0.0999"
  ],
  [
   "769",
   "0.0999"
  ],
  [
   "772",
   "0.3996"
  ],
  [
   "776",
   "0.0999"
  ],
  [
   "779",
   "0.1998"
  ],
  [
   "786",
   "0.0999"
  ],
  [
   "789",
   "0.0999"
  ],
  [
   "795",
   "0.2997"
  ],
  [
   "805",
   "0.0999"
  ],
  [
   "809",
   "0.0999"
  ],
  [
   "815",
   "0.0999"
  ],
  [
   "816",
   "0.0999"
  ],
  [
   "829",
   "0.0999"
  ],
  [
   "835",
   "0.0999"
  ],
  [
   "839",
   "0.0999"
  ],
  [
   "855",
   "0.1998"
  ],
  [
   "859",
   "0.1998"
  ],
  [
   "869",
   "0.0999"
  ],
  [
   "902",
   "0.0999"
  ],
  [
   "906",
   "0.0999"
  ],
  [
   "915",
   "0.0999"
  ],
  [
   "962",
   "0.0999"
  ],
  [
   "965",
   "0.0999"
  ],
  [
   "985",
   "0.0999"
  ],
  [
   "1018",
   "0.0999"
  ],
  [
   "1022",
   "0.0999"
  ],
  [
   "1072",
   "0.0999"
  ],
  [
   "1106",
   "0.0999"
  ],
  [
   "1149",
   "0.0999"
  ],
  [
   "1159",
   "0.0999"
  ],
  [
   "1179",
   "0.0999"
  ],
  [
   "1182",
   "0.0999"
  ],
  [
   "1208",
   "0.0999"
  ],
  [
   "1215",
   "0.0999"
  ],
  [
   "1218",
   "0.0999"
  ],
  [
   "1219",
   "0.0999"
  ],
  [
   "1226",
   "0.0999"
  ],
  [
   "1228",
   "0.0999"
  ],
  [
   "1236",
   "0.0999"
  ],
  [
   "1249",
   "0.0999"
  ],
  [
   "1272",
   "0.0999"
  ],
  [
   "1275",
   "0.1998"
  ],
  [
   "1282",
   "0.0999"
  ],
  [
   "1305",
   "0.0999"
  ],
  [
   "1315",
   "0.0999"
  ],
  [
   "1332",
   "0.0999"
  ],
  [
   "1342",
   "0.0999"
  ],
  [
   "1345",
   "0.0999"
  ],
  [
   "1349",
   "0.0999"
  ],
  [
   "1356",
   "0.0999"
  ],
  [
   "1365",
   "0.0999"
  ],
  [
   "1372",
   "0.0999"
  ],
  [
   "1399",
   "0.0999"
  ],
  [
   "1405",
   "0.1998"
  ],
  [
   "1412",
   "0.0999"
  ],
  [
   "1415",
   "0.0999"
  ],
  [
   "1416",
   "0.0999"
  ],
  [
   "1422",
   "0.0999"
  ],
  [
   "1435",
   "0.0999"
  ],
  [
   "1436",
   "0.0999"
  ],
  [
   "1438",
   "0.0999"
  ],
  [
   "1439",
   "0.0999"
  ],
  [
   "1442",
   "0.1998"
  ],
  [
   "1446",
   "0.0999"
  ],
  [
   "1449",
   "0.0999"
  ],
  [
   "1456",
   "0.0999"
  ],
  [
   "1465",
   "0.0999"
  ],
  [
   "1466",
   "0.0999"
  ],
  [
   "1468",
   "0.1998"
  ],
  [
   "1506",
   "0.1998"
  ],
  [
   "1519",
   "0.1998"
  ],
  [
   "1522",
   "0.0999"
  ],
  [
   "1532",
   "0.0999"
  ],
  [
   "1559",
   "0.0999"
  ],
  [
   "1562",
   "0.0999"
  ],
  [
   "1568",
   "0.0999"
  ],
  [
   "1576",
   "0.0999"
  ],
  [
   "1602",
   "0.0999"
  ],
  [
   "1622",
   "0.0999"
  ],
  [
   "1642",
   "0.0999"
  ],
  [
   "1652",
   "0.0999"
  ],
  [
   "1678",
   "0.0999"
  ],
  [
   "1679",
   "0.0999"
  ],
  [
   "1685",
   "0.0999"
  ],
  [
   "1729",
   "0.0999"
  ],
  [
   "1749",
   "0.0999"
  ],
  [
   "1762",
   "0.0999"
  ],
  [
   "1768",
   "0.0999"
  ],
  [
   "1828",
   "0.0999"
  ],
  [
   "1886",
   "0.0999"
  ],
  [
   "1892",
   "0.0999"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 133,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "572 ms",
  "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 133,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 599,
  "name": "Your",
  "id": 112044491
 }
}