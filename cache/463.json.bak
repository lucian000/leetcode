{
 "id": 463,
 "ids": "463",
 "state": "None",
 "name": "Island Perimeter",
 "key": "island-perimeter",
 "link": "https://leetcode.com/problems/island-perimeter",
 "locked": false,
 "percent": 57.1723753264204,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "45.1K",
 "totalSubmit": "78.9K",
 "desc": "You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn't have \"lakes\" (water inside that isn't connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\r\n\r\nExample:\r\n\r\n[[0,1,0,0],\r\n [1,1,1,0],\r\n [0,1,0,0],\r\n [1,1,0,0]]\r\n\r\nAnswer: 16\r\nExplanation: The perimeter is the 16 yellow stripes in the image below:\r\n\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int islandPerimeter(vector<vector<int>>& grid) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int islandPerimeter(int[][] grid) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def islandPerimeter(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int islandPerimeter(int** grid, int gridRowSize, int gridColSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int IslandPerimeter(int[,] grid) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar islandPerimeter = function(grid) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[][]} grid\r\n# @return {Integer}\r\ndef island_perimeter(grid)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func islandPerimeter(_ grid: [[Int]]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func islandPerimeter(grid [][]int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def islandPerimeter(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]'",
 "testable": true,
 "slug": "island-perimeter",
 "category": "algorithms",
 "fname": "463.island-perimeter.algorithms.py",
 "test_your": {
  "code_answer": [
   "16"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502027708.82_784204_29"
 },
 "test_expected": {
  "code_answer": [
   "16"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502027708.85_784204_29"
 },
 "submit_chart": [
  [
   "212",
   "0.3687"
  ],
  [
   "215",
   "0.3687"
  ],
  [
   "216",
   "0.0922"
  ],
  [
   "218",
   "0.1843"
  ],
  [
   "219",
   "0.5530"
  ],
  [
   "222",
   "1.0138"
  ],
  [
   "225",
   "0.7373"
  ],
  [
   "226",
   "0.2765"
  ],
  [
   "228",
   "0.2765"
  ],
  [
   "229",
   "1.0138"
  ],
  [
   "232",
   "1.1982"
  ],
  [
   "235",
   "0.7373"
  ],
  [
   "236",
   "0.7373"
  ],
  [
   "238",
   "0.2765"
  ],
  [
   "239",
   "0.7373"
  ],
  [
   "242",
   "1.3825"
  ],
  [
   "245",
   "0.8295"
  ],
  [
   "246",
   "0.2765"
  ],
  [
   "248",
   "0.4608"
  ],
  [
   "249",
   "1.0138"
  ],
  [
   "252",
   "1.9355"
  ],
  [
   "255",
   "1.7512"
  ],
  [
   "256",
   "0.2765"
  ],
  [
   "258",
   "0.8295"
  ],
  [
   "259",
   "0.9217"
  ],
  [
   "262",
   "1.7512"
  ],
  [
   "265",
   "1.5668"
  ],
  [
   "266",
   "0.6452"
  ],
  [
   "268",
   "0.4608"
  ],
  [
   "269",
   "1.1060"
  ],
  [
   "272",
   "2.1198"
  ],
  [
   "275",
   "1.1060"
  ],
  [
   "276",
   "0.7373"
  ],
  [
   "278",
   "0.4608"
  ],
  [
   "279",
   "1.2903"
  ],
  [
   "282",
   "1.9355"
  ],
  [
   "285",
   "1.0138"
  ],
  [
   "286",
   "0.4608"
  ],
  [
   "288",
   "0.5530"
  ],
  [
   "289",
   "1.6590"
  ],
  [
   "292",
   "2.7650"
  ],
  [
   "295",
   "1.2903"
  ],
  [
   "296",
   "0.7373"
  ],
  [
   "298",
   "0.5530"
  ],
  [
   "299",
   "1.3825"
  ],
  [
   "302",
   "1.3825"
  ],
  [
   "305",
   "1.3825"
  ],
  [
   "306",
   "0.6452"
  ],
  [
   "308",
   "0.5530"
  ],
  [
   "309",
   "1.6590"
  ],
  [
   "312",
   "1.5668"
  ],
  [
   "315",
   "1.0138"
  ],
  [
   "316",
   "0.9217"
  ],
  [
   "318",
   "0.3687"
  ],
  [
   "319",
   "0.5530"
  ],
  [
   "322",
   "1.1060"
  ],
  [
   "325",
   "0.7373"
  ],
  [
   "326",
   "0.7373"
  ],
  [
   "328",
   "0.1843"
  ],
  [
   "329",
   "0.8295"
  ],
  [
   "332",
   "1.4747"
  ],
  [
   "335",
   "0.4608"
  ],
  [
   "336",
   "0.2765"
  ],
  [
   "338",
   "0.4608"
  ],
  [
   "339",
   "1.1060"
  ],
  [
   "342",
   "0.9217"
  ],
  [
   "345",
   "0.5530"
  ],
  [
   "346",
   "0.1843"
  ],
  [
   "348",
   "0.5530"
  ],
  [
   "349",
   "0.9217"
  ],
  [
   "352",
   "0.3687"
  ],
  [
   "355",
   "0.2765"
  ],
  [
   "356",
   "0.3687"
  ],
  [
   "358",
   "0.3687"
  ],
  [
   "359",
   "0.1843"
  ],
  [
   "362",
   "0.6452"
  ],
  [
   "365",
   "0.2765"
  ],
  [
   "368",
   "0.1843"
  ],
  [
   "369",
   "0.1843"
  ],
  [
   "372",
   "0.5530"
  ],
  [
   "375",
   "0.0922"
  ],
  [
   "376",
   "0.1843"
  ],
  [
   "378",
   "0.0922"
  ],
  [
   "379",
   "0.7373"
  ],
  [
   "382",
   "0.6452"
  ],
  [
   "385",
   "0.4608"
  ],
  [
   "386",
   "0.3687"
  ],
  [
   "388",
   "0.0922"
  ],
  [
   "389",
   "0.4608"
  ],
  [
   "392",
   "0.2765"
  ],
  [
   "395",
   "0.2765"
  ],
  [
   "396",
   "0.2765"
  ],
  [
   "398",
   "0.2765"
  ],
  [
   "399",
   "0.6452"
  ],
  [
   "402",
   "0.2765"
  ],
  [
   "405",
   "0.3687"
  ],
  [
   "406",
   "0.0922"
  ],
  [
   "408",
   "0.0922"
  ],
  [
   "409",
   "0.2765"
  ],
  [
   "412",
   "0.2765"
  ],
  [
   "415",
   "0.2765"
  ],
  [
   "416",
   "0.3687"
  ],
  [
   "418",
   "0.0922"
  ],
  [
   "419",
   "0.5530"
  ],
  [
   "422",
   "0.9217"
  ],
  [
   "425",
   "0.5530"
  ],
  [
   "426",
   "0.5530"
  ],
  [
   "428",
   "0.1843"
  ],
  [
   "429",
   "0.1843"
  ],
  [
   "432",
   "0.6452"
  ],
  [
   "435",
   "0.0922"
  ],
  [
   "436",
   "0.2765"
  ],
  [
   "438",
   "0.0922"
  ],
  [
   "439",
   "0.0922"
  ],
  [
   "442",
   "0.9217"
  ],
  [
   "445",
   "0.4608"
  ],
  [
   "446",
   "0.1843"
  ],
  [
   "448",
   "0.1843"
  ],
  [
   "449",
   "0.1843"
  ],
  [
   "452",
   "0.8295"
  ],
  [
   "455",
   "0.6452"
  ],
  [
   "456",
   "0.1843"
  ],
  [
   "459",
   "0.4608"
  ],
  [
   "462",
   "0.2765"
  ],
  [
   "465",
   "0.2765"
  ],
  [
   "466",
   "0.0922"
  ],
  [
   "468",
   "0.3687"
  ],
  [
   "469",
   "0.1843"
  ],
  [
   "472",
   "0.4608"
  ],
  [
   "475",
   "0.1843"
  ],
  [
   "478",
   "0.0922"
  ],
  [
   "479",
   "0.3687"
  ],
  [
   "482",
   "0.2765"
  ],
  [
   "485",
   "0.2765"
  ],
  [
   "486",
   "0.3687"
  ],
  [
   "489",
   "0.2765"
  ],
  [
   "492",
   "0.3687"
  ],
  [
   "495",
   "0.1843"
  ],
  [
   "496",
   "0.3687"
  ],
  [
   "498",
   "0.0922"
  ],
  [
   "499",
   "0.4608"
  ],
  [
   "502",
   "0.1843"
  ],
  [
   "505",
   "0.1843"
  ],
  [
   "506",
   "0.0922"
  ],
  [
   "512",
   "0.2765"
  ],
  [
   "515",
   "0.1843"
  ],
  [
   "518",
   "0.1843"
  ],
  [
   "519",
   "0.3687"
  ],
  [
   "522",
   "0.1843"
  ],
  [
   "526",
   "0.1843"
  ],
  [
   "529",
   "0.0922"
  ],
  [
   "532",
   "0.3687"
  ],
  [
   "535",
   "0.0922"
  ],
  [
   "538",
   "0.0922"
  ],
  [
   "542",
   "0.1843"
  ],
  [
   "546",
   "0.2765"
  ],
  [
   "549",
   "0.0922"
  ],
  [
   "552",
   "0.0922"
  ],
  [
   "555",
   "0.0922"
  ],
  [
   "556",
   "0.1843"
  ],
  [
   "559",
   "0.1843"
  ],
  [
   "562",
   "0.3687"
  ],
  [
   "565",
   "0.1843"
  ],
  [
   "566",
   "0.1843"
  ],
  [
   "568",
   "0.0922"
  ],
  [
   "572",
   "0.1843"
  ],
  [
   "575",
   "0.1843"
  ],
  [
   "576",
   "0.1843"
  ],
  [
   "579",
   "0.2765"
  ],
  [
   "582",
   "0.0922"
  ],
  [
   "585",
   "0.1843"
  ],
  [
   "589",
   "0.1843"
  ],
  [
   "592",
   "0.2765"
  ],
  [
   "599",
   "0.1843"
  ],
  [
   "608",
   "0.0922"
  ],
  [
   "609",
   "0.3687"
  ],
  [
   "612",
   "0.0922"
  ],
  [
   "615",
   "0.1843"
  ],
  [
   "616",
   "0.1843"
  ],
  [
   "622",
   "0.0922"
  ],
  [
   "628",
   "0.2765"
  ],
  [
   "629",
   "0.0922"
  ],
  [
   "632",
   "0.3687"
  ],
  [
   "636",
   "0.1843"
  ],
  [
   "638",
   "0.0922"
  ],
  [
   "646",
   "0.0922"
  ],
  [
   "649",
   "0.2765"
  ],
  [
   "656",
   "0.0922"
  ],
  [
   "665",
   "0.0922"
  ],
  [
   "668",
   "0.0922"
  ],
  [
   "672",
   "0.0922"
  ],
  [
   "675",
   "0.0922"
  ],
  [
   "676",
   "0.0922"
  ],
  [
   "679",
   "0.0922"
  ],
  [
   "688",
   "0.0922"
  ],
  [
   "699",
   "0.1843"
  ],
  [
   "709",
   "0.0922"
  ],
  [
   "715",
   "0.0922"
  ],
  [
   "718",
   "0.0922"
  ],
  [
   "722",
   "0.0922"
  ],
  [
   "729",
   "0.0922"
  ],
  [
   "732",
   "0.0922"
  ],
  [
   "739",
   "0.0922"
  ],
  [
   "742",
   "0.1843"
  ],
  [
   "745",
   "0.0922"
  ],
  [
   "746",
   "0.0922"
  ],
  [
   "758",
   "0.0922"
  ],
  [
   "759",
   "0.0922"
  ],
  [
   "762",
   "0.0922"
  ],
  [
   "768",
   "0.0922"
  ],
  [
   "772",
   "0.0922"
  ],
  [
   "802",
   "0.0922"
  ],
  [
   "819",
   "0.0922"
  ],
  [
   "832",
   "0.0922"
  ],
  [
   "835",
   "0.0922"
  ],
  [
   "839",
   "0.1843"
  ],
  [
   "849",
   "0.0922"
  ],
  [
   "859",
   "0.0922"
  ],
  [
   "869",
   "0.0922"
  ],
  [
   "909",
   "0.0922"
  ],
  [
   "922",
   "0.0922"
  ],
  [
   "929",
   "0.0922"
  ],
  [
   "948",
   "0.0922"
  ],
  [
   "962",
   "0.0922"
  ],
  [
   "992",
   "0.0922"
  ],
  [
   "999",
   "0.0922"
  ],
  [
   "1042",
   "0.0922"
  ],
  [
   "1049",
   "0.0922"
  ],
  [
   "1052",
   "0.0922"
  ],
  [
   "1059",
   "0.0922"
  ],
  [
   "1079",
   "0.0922"
  ],
  [
   "1082",
   "0.0922"
  ],
  [
   "1096",
   "0.0922"
  ],
  [
   "1112",
   "0.0922"
  ],
  [
   "1129",
   "0.0922"
  ],
  [
   "1148",
   "0.0922"
  ],
  [
   "1215",
   "0.0922"
  ],
  [
   "1285",
   "0.0922"
  ],
  [
   "1295",
   "0.0922"
  ],
  [
   "1402",
   "0.0922"
  ],
  [
   "1689",
   "0.0922"
  ],
  [
   "1702",
   "0.0922"
  ],
  [
   "1722",
   "0.0922"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 5833,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "422 ms",
  "compare_result
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 5833,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 463,
  "name": "Your",
  "id": 112725817
 }
}