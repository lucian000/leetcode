{
 "id": 104,
 "ids": "104",
 "state": "None",
 "name": "Maximum Depth of Binary Tree",
 "key": "maximum-depth-of-binary-tree",
 "link": "https://leetcode.com/problems/maximum-depth-of-binary-tree",
 "locked": false,
 "percent": 52.432770954698675,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "249.5K",
 "totalSubmit": "475.9K",
 "desc": "Given a binary tree, find its maximum depth.\r\n\r\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int maxDepth(TreeNode* root) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int maxDepth(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def maxDepth(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint maxDepth(struct TreeNode* root) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int MaxDepth(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar maxDepth = function(root) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef max_depth(root)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func maxDepth(_ root: TreeNode?) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxDepth(root *TreeNode) int {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def maxDepth(root: TreeNode): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]'",
 "testable": true,
 "slug": "maximum-depth-of-binary-tree",
 "category": "algorithms",
 "fname": "104.maximum-depth-of-binary-tree.algorithms.py",
 "test_your": {
  "code_answer": [
   "0"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502536146.67_784204_6"
 },
 "test_expected": {
  "code_answer": [
   "0"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502536146.69_784204_6"
 },
 "submit_chart": [
  [
   "45",
   "0.0927"
  ],
  [
   "46",
   "0.1854"
  ],
  [
   "48",
   "0.6951"
  ],
  [
   "49",
   "2.5487"
  ],
  [
   "52",
   "10.5653"
  ],
  [
   "53",
   "0.6024"
  ],
  [
   "55",
   "11.3994"
  ],
  [
   "56",
   "6.9045"
  ],
  [
   "58",
   "4.2169"
  ],
  [
   "59",
   "10.2410"
  ],
  [
   "62",
   "12.1872"
  ],
  [
   "63",
   "0.3244"
  ],
  [
   "65",
   "7.5996"
  ],
  [
   "66",
   "3.8462"
  ],
  [
   "68",
   "2.4096"
  ],
  [
   "69",
   "4.2169"
  ],
  [
   "72",
   "5.2363"
  ],
  [
   "73",
   "0.1390"
  ],
  [
   "75",
   "2.0389"
  ],
  [
   "76",
   "1.2512"
  ],
  [
   "78",
   "0.9731"
  ],
  [
   "79",
   "1.9462"
  ],
  [
   "82",
   "1.9926"
  ],
  [
   "83",
   "0.0463"
  ],
  [
   "85",
   "0.7414"
  ],
  [
   "86",
   "0.6024"
  ],
  [
   "88",
   "0.4634"
  ],
  [
   "89",
   "0.9731"
  ],
  [
   "92",
   "1.2512"
  ],
  [
   "95",
   "0.8804"
  ],
  [
   "96",
   "0.0927"
  ],
  [
   "98",
   "0.2780"
  ],
  [
   "99",
   "0.5097"
  ],
  [
   "102",
   "0.2780"
  ],
  [
   "105",
   "0.6024"
  ],
  [
   "106",
   "0.0927"
  ],
  [
   "108",
   "0.0927"
  ],
  [
   "109",
   "0.2317"
  ],
  [
   "112",
   "0.1390"
  ],
  [
   "115",
   "0.0927"
  ],
  [
   "116",
   "0.0463"
  ],
  [
   "119",
   "0.1390"
  ],
  [
   "122",
   "0.0927"
  ],
  [
   "125",
   "0.0463"
  ],
  [
   "129",
   "0.0927"
  ],
  [
   "132",
   "0.0463"
  ],
  [
   "135",
   "0.0463"
  ],
  [
   "136",
   "0.1390"
  ],
  [
   "138",
   "0.0463"
  ],
  [
   "142",
   "0.0927"
  ],
  [
   "152",
   "0.0463"
  ],
  [
   "162",
   "0.0463"
  ],
  [
   "165",
   "0.0463"
  ],
  [
   "175",
   "0.0463"
  ],
  [
   "752",
   "0.0463"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 38,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "72 ms",
  "compare_result": "11111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 38,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 104,
  "name": "Your",
  "id": 113555032
 }
}