{
 "id": 475,
 "ids": "475",
 "state": "notac",
 "name": "Heaters",
 "key": "heaters",
 "link": "https://leetcode.com/problems/heaters",
 "locked": false,
 "percent": 29.464812473662032,
 "level": "Easy",
 "starred": true,
 "loaded": true,
 "totalAC": "17.5K",
 "totalSubmit": "59.3K",
 "desc": "Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.\r\n\r\nNow, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.\r\n\r\nSo, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.\r\n\r\nNote:\r\n\r\nNumbers of houses and heaters you are given are non-negative and will not exceed 25000.\r\nPositions of houses and heaters you are given are non-negative and will not exceed 10^9.\r\nAs long as a house is in the heaters' warm radius range, it can be warmed.\r\nAll the heaters follow your radius standard and the warm radius will the same.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput: [1,2,3],[2]\r\nOutput: 1\r\nExplanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [1,2,3,4],[1,4]\r\nOutput: 1\r\nExplanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int findRadius(vector<int>& houses, vector<int>& heaters) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int findRadius(int[] houses, int[] heaters) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def findRadius(self, houses, heaters):\r\n        \"\"\"\r\n        :type houses: List[int]\r\n        :type heaters: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int findRadius(int* houses, int housesSize, int* heaters, int heatersSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int FindRadius(int[] houses, int[] heaters) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} houses\r\n * @param {number[]} heaters\r\n * @return {number}\r\n */\r\nvar findRadius = function(houses, heaters) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} houses\r\n# @param {Integer[]} heaters\r\n# @return {Integer}\r\ndef find_radius(houses, heaters)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func findRadius(_ houses: [Int], _ heaters: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func findRadius(houses []int, heaters []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def findRadius(houses: Array[Int], heaters: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,2,3]\\n[2]'",
 "testable": true,
 "slug": "heaters",
 "category": "algorithms",
 "fname": "475.heaters.algorithms.py",
 "test_your": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "36 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502624165.07_784204_6"
 },
 "test_expected": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "48 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502624165.09_784204_6"
 },
 "file": "475.heaters.algorithms.py",
 "submit_chart": [
  [
   "102",
   "0.2146"
  ],
  [
   "105",
   "0.2146"
  ],
  [
   "109",
   "0.4292"
  ],
  [
   "112",
   "1.0730"
  ],
  [
   "115",
   "0.8584"
  ],
  [
   "116",
   "0.2146"
  ],
  [
   "118",
   "0.2146"
  ],
  [
   "119",
   "0.8584"
  ],
  [
   "122",
   "3.4335"
  ],
  [
   "125",
   "2.1459"
  ],
  [
   "126",
   "0.8584"
  ],
  [
   "128",
   "0.4292"
  ],
  [
   "129",
   "1.2876"
  ],
  [
   "132",
   "1.2876"
  ],
  [
   "135",
   "1.9313"
  ],
  [
   "136",
   "0.2146"
  ],
  [
   "138",
   "1.2876"
  ],
  [
   "139",
   "2.3605"
  ],
  [
   "142",
   "4.2918"
  ],
  [
   "145",
   "2.5751"
  ],
  [
   "146",
   "1.5021"
  ],
  [
   "148",
   "0.4292"
  ],
  [
   "149",
   "1.9313"
  ],
  [
   "152",
   "3.0043"
  ],
  [
   "153",
   "0.2146"
  ],
  [
   "155",
   "1.2876"
  ],
  [
   "156",
   "1.5021"
  ],
  [
   "158",
   "1.5021"
  ],
  [
   "159",
   "0.8584"
  ],
  [
   "162",
   "3.2189"
  ],
  [
   "163",
   "0.2146"
  ],
  [
   "165",
   "3.6481"
  ],
  [
   "166",
   "1.5021"
  ],
  [
   "168",
   "1.0730"
  ],
  [
   "169",
   "2.3605"
  ],
  [
   "172",
   "2.1459"
  ],
  [
   "175",
   "1.0730"
  ],
  [
   "176",
   "1.0730"
  ],
  [
   "178",
   "1.9313"
  ],
  [
   "179",
   "0.8584"
  ],
  [
   "182",
   "2.7897"
  ],
  [
   "185",
   "2.7897"
  ],
  [
   "188",
   "0.4292"
  ],
  [
   "189",
   "0.4292"
  ],
  [
   "192",
   "0.8584"
  ],
  [
   "193",
   "0.2146"
  ],
  [
   "195",
   "0.4292"
  ],
  [
   "196",
   "0.4292"
  ],
  [
   "198",
   "0.2146"
  ],
  [
   "199",
   "1.2876"
  ],
  [
   "202",
   "1.5021"
  ],
  [
   "205",
   "0.8584"
  ],
  [
   "206",
   "1.2876"
  ],
  [
   "209",
   "0.4292"
  ],
  [
   "212",
   "0.8584"
  ],
  [
   "215",
   "0.8584"
  ],
  [
   "216",
   "0.4292"
  ],
  [
   "218",
   "0.6438"
  ],
  [
   "219",
   "1.2876"
  ],
  [
   "222",
   "0.6438"
  ],
  [
   "225",
   "0.4292"
  ],
  [
   "226",
   "0.2146"
  ],
  [
   "228",
   "0.4292"
  ],
  [
   "229",
   "0.8584"
  ],
  [
   "232",
   "0.6438"
  ],
  [
   "235",
   "0.2146"
  ],
  [
   "238",
   "0.2146"
  ],
  [
   "242",
   "0.6438"
  ],
  [
   "245",
   "0.2146"
  ],
  [
   "248",
   "0.2146"
  ],
  [
   "249",
   "0.2146"
  ],
  [
   "252",
   "0.2146"
  ],
  [
   "255",
   "0.4292"
  ],
  [
   "258",
   "0.6438"
  ],
  [
   "262",
   "0.4292"
  ],
  [
   "265",
   "0.2146"
  ],
  [
   "269",
   "0.2146"
  ],
  [
   "272",
   "0.6438"
  ],
  [
   "279",
   "0.2146"
  ],
  [
   "282",
   "0.2146"
  ],
  [
   "285",
   "0.2146"
  ],
  [
   "292",
   "0.4292"
  ],
  [
   "295",
   "0.4292"
  ],
  [
   "296",
   "0.2146"
  ],
  [
   "299",
   "0.4292"
  ],
  [
   "305",
   "0.6438"
  ],
  [
   "306",
   "0.2146"
  ],
  [
   "312",
   "0.4292"
  ],
  [
   "316",
   "0.2146"
  ],
  [
   "319",
   "0.2146"
  ],
  [
   "322",
   "0.4292"
  ],
  [
   "326",
   "0.2146"
  ],
  [
   "329",
   "0.4292"
  ],
  [
   "332",
   "0.4292"
  ],
  [
   "345",
   "0.4292"
  ],
  [
   "346",
   "0.4292"
  ],
  [
   "348",
   "0.2146"
  ],
  [
   "349",
   "0.2146"
  ],
  [
   "352",
   "0.2146"
  ],
  [
   "355",
   "0.6438"
  ],
  [
   "358",
   "0.2146"
  ],
  [
   "359",
   "0.2146"
  ],
  [
   "362",
   "0.4292"
  ],
  [
   "366",
   "0.2146"
  ],
  [
   "375",
   "0.2146"
  ],
  [
   "376",
   "0.2146"
  ],
  [
   "378",
   "0.2146"
  ],
  [
   "382",
   "0.2146"
  ],
  [
   "392",
   "0.2146"
  ],
  [
   "395",
   "0.8584"
  ],
  [
   "406",
   "0.2146"
  ],
  [
   "412",
   "0.2146"
  ],
  [
   "416",
   "0.2146"
  ],
  [
   "418",
   "0.2146"
  ],
  [
   "419",
   "0.2146"
  ],
  [
   "422",
   "0.2146"
  ],
  [
   "432",
   "0.2146"
  ],
  [
   "448",
   "0.2146"
  ],
  [
   "466",
   "0.2146"
  ],
  [
   "485",
   "0.2146"
  ],
  [
   "502",
   "0.2146"
  ],
  [
   "506",
   "0.2146"
  ],
  [
   "519",
   "0.4292"
  ],
  [
   "532",
   "0.2146"
  ],
  [
   "538",
   "0.2146"
  ],
  [
   "552",
   "0.2146"
  ],
  [
   "562",
   "0.2146"
  ],
  [
   "566",
   "0.2146"
  ],
  [
   "572",
   "0.2146"
  ],
  [
   "582",
   "0.2146"
  ],
  [
   "609",
   "0.2146"
  ],
  [
   "615",
   "0.2146"
  ],
  [
   "742",
   "0.2146"
  ],
  [
   "912",
   "0.2146"
  ],
  [
   "1122",
   "0.2146"
  ],
  [
   "1252",
   "0.2146"
  ],
  [
   "1659",
   "0.2146"
  ],
  [
   "1792",
   "0.2146"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 30,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "135 ms",
  "compare_result": "111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 30,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 475,
  "name": "Your",
  "id": 113688029
 }
}