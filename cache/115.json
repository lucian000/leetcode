{
 "id": 115,
 "ids": "115",
 "state": "None",
 "name": "Distinct Subsequences",
 "key": "distinct-subsequences",
 "link": "https://leetcode.com/problems/distinct-subsequences",
 "locked": false,
 "percent": 31.387904449665292,
 "level": "Hard",
 "starred": false,
 "loaded": true,
 "totalAC": "70.9K",
 "totalSubmit": "226K",
 "desc": "\r\nGiven a string S and a string T, count the number of distinct subsequences of S which equals T.\r\n\r\n\r\n\r\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\r\n\r\n\r\n\r\nHere is an example:\r\nS = \"rabbbit\", T = \"rabbit\"\r\n\r\n\r\nReturn 3.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int numDistinct(string s, string t) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int numDistinct(String s, String t) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def numDistinct(self, s, t):\r\n        \"\"\"\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int numDistinct(char* s, char* t) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int NumDistinct(string s, string t) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {number}\r\n */\r\nvar numDistinct = function(s, t) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\r\n# @param {String} t\r\n# @return {Integer}\r\ndef num_distinct(s, t)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func numDistinct(_ s: String, _ t: String) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func numDistinct(s string, t string) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def numDistinct(s: String, t: String): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"\"\\n\"a\"'",
 "testable": true,
 "slug": "distinct-subsequences",
 "category": "algorithms",
 "fname": "115.distinct-subsequences.algorithms.py"
}