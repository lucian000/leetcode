{
 "id": 447,
 "ids": "447",
 "state": "notac",
 "name": "Number of Boomerangs",
 "key": "number-of-boomerangs",
 "link": "https://leetcode.com/problems/number-of-boomerangs",
 "locked": false,
 "percent": 44.829752003197505,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "23.6K",
 "totalSubmit": "52.5K",
 "desc": "Given n points in the plane that are all pairwise distinct, a \"boomerang\" is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\r\n\r\nFind the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] (inclusive).\r\n\r\nExample:\r\n\r\nInput:\r\n[[0,0],[1,0],[2,0]]\r\n\r\nOutput:\r\n2\r\n\r\nExplanation:\r\nThe two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int numberOfBoomerangs(vector<pair<int, int>>& points) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int numberOfBoomerangs(int[][] points) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def numberOfBoomerangs(self, points):\r\n        \"\"\"\r\n        :type points: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int numberOfBoomerangs(int** points, int pointsRowSize, int pointsColSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int NumberOfBoomerangs(int[,] points) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[][]} points\r\n * @return {number}\r\n */\r\nvar numberOfBoomerangs = function(points) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[][]} points\r\n# @return {Integer}\r\ndef number_of_boomerangs(points)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func numberOfBoomerangs(_ points: [[Int]]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func numberOfBoomerangs(points [][]int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def numberOfBoomerangs(points: Array[Array[Int]]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[[0,0],[1,0],[2,0]]'",
 "testable": true,
 "slug": "number-of-boomerangs",
 "category": "algorithms",
 "fname": "447.number-of-boomerangs.algorithms.py",
 "test_your": {
  "code_answer": [
   "2"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "56 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501221732.94_784204_5"
 },
 "test_expected": {
  "code_answer": [
   "2"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501221732.96_784204_5"
 },
 "file": "447.number-of-boomerangs.algorithms.py",
 "submit_chart": [
  [
   "662",
   "0.1965"
  ],
  [
   "669",
   "0.1965"
  ],
  [
   "675",
   "0.1965"
  ],
  [
   "726",
   "0.1965"
  ],
  [
   "735",
   "0.1965"
  ],
  [
   "805",
   "0.1965"
  ],
  [
   "809",
   "0.1965"
  ],
  [
   "832",
   "0.3929"
  ],
  [
   "845",
   "0.1965"
  ],
  [
   "849",
   "0.1965"
  ],
  [
   "868",
   "0.1965"
  ],
  [
   "872",
   "0.1965"
  ],
  [
   "876",
   "0.1965"
  ],
  [
   "879",
   "0.1965"
  ],
  [
   "889",
   "0.1965"
  ],
  [
   "892",
   "0.1965"
  ],
  [
   "902",
   "0.1965"
  ],
  [
   "905",
   "0.1965"
  ],
  [
   "909",
   "0.1965"
  ],
  [
   "912",
   "0.3929"
  ],
  [
   "915",
   "0.1965"
  ],
  [
   "919",
   "0.1965"
  ],
  [
   "929",
   "0.3929"
  ],
  [
   "932",
   "0.1965"
  ],
  [
   "946",
   "0.1965"
  ],
  [
   "972",
   "0.3929"
  ],
  [
   "978",
   "0.3929"
  ],
  [
   "979",
   "0.3929"
  ],
  [
   "982",
   "0.5894"
  ],
  [
   "985",
   "0.1965"
  ],
  [
   "988",
   "0.1965"
  ],
  [
   "989",
   "0.1965"
  ],
  [
   "995",
   "0.1965"
  ],
  [
   "998",
   "0.1965"
  ],
  [
   "1002",
   "0.3929"
  ],
  [
   "1006",
   "0.1965"
  ],
  [
   "1008",
   "0.1965"
  ],
  [
   "1012",
   "0.1965"
  ],
  [
   "1022",
   "0.5894"
  ],
  [
   "1029",
   "0.1965"
  ],
  [
   "1032",
   "0.3929"
  ],
  [
   "1035",
   "0.1965"
  ],
  [
   "1042",
   "0.3929"
  ],
  [
   "1049",
   "0.5894"
  ],
  [
   "1052",
   "0.3929"
  ],
  [
   "1055",
   "0.1965"
  ],
  [
   "1062",
   "0.3929"
  ],
  [
   "1065",
   "0.3929"
  ],
  [
   "1072",
   "0.7859"
  ],
  [
   "1076",
   "0.3929"
  ],
  [
   "1082",
   "0.1965"
  ],
  [
   "1085",
   "0.1965"
  ],
  [
   "1086",
   "0.1965"
  ],
  [
   "1089",
   "0.3929"
  ],
  [
   "1092",
   "0.5894"
  ],
  [
   "1095",
   "0.1965"
  ],
  [
   "1096",
   "0.1965"
  ],
  [
   "1099",
   "0.7859"
  ],
  [
   "1102",
   "0.7859"
  ],
  [
   "1105",
   "0.1965"
  ],
  [
   "1108",
   "0.1965"
  ],
  [
   "1109",
   "0.1965"
  ],
  [
   "1112",
   "0.3929"
  ],
  [
   "1115",
   "0.1965"
  ],
  [
   "1116",
   "0.1965"
  ],
  [
   "1122",
   "0.3929"
  ],
  [
   "1126",
   "0.1965"
  ],
  [
   "1129",
   "0.1965"
  ],
  [
   "1132",
   "0.9823"
  ],
  [
   "1135",
   "0.1965"
  ],
  [
   "1136",
   "0.1965"
  ],
  [
   "1139",
   "0.5894"
  ],
  [
   "1142",
   "0.1965"
  ],
  [
   "1145",
   "0.1965"
  ],
  [
   "1148",
   "0.3929"
  ],
  [
   "1149",
   "0.3929"
  ],
  [
   "1152",
   "0.5894"
  ],
  [
   "1155",
   "0.7859"
  ],
  [
   "1156",
   "0.3929"
  ],
  [
   "1159",
   "0.5894"
  ],
  [
   "1162",
   "0.7859"
  ],
  [
   "1165",
   "0.7859"
  ],
  [
   "1166",
   "0.1965"
  ],
  [
   "1169",
   "0.9823"
  ],
  [
   "1172",
   "0.5894"
  ],
  [
   "1175",
   "0.5894"
  ],
  [
   "1178",
   "0.3929"
  ],
  [
   "1179",
   "0.1965"
  ],
  [
   "1182",
   "0.3929"
  ],
  [
   "1185",
   "0.3929"
  ],
  [
   "1188",
   "0.1965"
  ],
  [
   "1189",
   "1.1788"
  ],
  [
   "1192",
   "0.9823"
  ],
  [
   "1195",
   "0.3929"
  ],
  [
   "1196",
   "0.5894"
  ],
  [
   "1198",
   "0.3929"
  ],
  [
   "1199",
   "0.7859"
  ],
  [
   "1202",
   "0.5894"
  ],
  [
   "1205",
   "0.1965"
  ],
  [
   "1206",
   "0.1965"
  ],
  [
   "1208",
   "0.1965"
  ],
  [
   "1209",
   "0.3929"
  ],
  [
   "1212",
   "0.7859"
  ],
  [
   "1216",
   "0.3929"
  ],
  [
   "1218",
   "0.1965"
  ],
  [
   "1219",
   "0.7859"
  ],
  [
   "1222",
   "0.3929"
  ],
  [
   "1225",
   "0.3929"
  ],
  [
   "1228",
   "0.3929"
  ],
  [
   "1229",
   "0.7859"
  ],
  [
   "1232",
   "0.5894"
  ],
  [
   "1235",
   "0.1965"
  ],
  [
   "1236",
   "0.3929"
  ],
  [
   "1238",
   "0.5894"
  ],
  [
   "1239",
   "0.1965"
  ],
  [
   "1242",
   "0.5894"
  ],
  [
   "1245",
   "0.3929"
  ],
  [
   "1246",
   "0.5894"
  ],
  [
   "1249",
   "0.5894"
  ],
  [
   "1252",
   "0.5894"
  ],
  [
   "1255",
   "0.3929"
  ],
  [
   "1256",
   "0.5894"
  ],
  [
   "1262",
   "0.5894"
  ],
  [
   "1266",
   "0.3929"
  ],
  [
   "1269",
   "0.1965"
  ],
  [
   "1272",
   "0.3929"
  ],
  [
   "1275",
   "0.1965"
  ],
  [
   "1276",
   "0.1965"
  ],
  [
   "1279",
   "0.1965"
  ],
  [
   "1282",
   "0.5894"
  ],
  [
   "1285",
   "0.1965"
  ],
  [
   "1288",
   "0.1965"
  ],
  [
   "1289",
   "0.3929"
  ],
  [
   "1292",
   "0.3929"
  ],
  [
   "1295",
   "0.3929"
  ],
  [
   "1296",
   "0.7859"
  ],
  [
   "1298",
   "0.1965"
  ],
  [
   "1299",
   "0.3929"
  ],
  [
   "1302",
   "0.1965"
  ],
  [
   "1305",
   "0.3929"
  ],
  [
   "1306",
   "0.3929"
  ],
  [
   "1308",
   "0.3929"
  ],
  [
   "1309",
   "0.3929"
  ],
  [
   "1315",
   "0.1965"
  ],
  [
   "1316",
   "0.3929"
  ],
  [
   "1318",
   "0.1965"
  ],
  [
   "1322",
   "0.3929"
  ],
  [
   "1325",
   "0.3929"
  ],
  [
   "1328",
   "0.3929"
  ],
  [
   "1329",
   "0.3929"
  ],
  [
   "1332",
   "0.5894"
  ],
  [
   "1339",
   "0.7859"
  ],
  [
   "1342",
   "0.3929"
  ],
  [
   "1345",
   "0.5894"
  ],
  [
   "1346",
   "0.1965"
  ],
  [
   "1352",
   "0.9823"
  ],
  [
   "1355",
   "0.5894"
  ],
  [
   "1358",
   "0.1965"
  ],
  [
   "1359",
   "0.3929"
  ],
  [
   "1362",
   "0.7859"
  ],
  [
   "1365",
   "0.3929"
  ],
  [
   "1372",
   "0.3929"
  ],
  [
   "1375",
   "0.1965"
  ],
  [
   "1376",
   "0.1965"
  ],
  [
   "1382",
   "0.3929"
  ],
  [
   "1385",
   "0.3929"
  ],
  [
   "1386",
   "0.3929"
  ],
  [
   "1388",
   "0.1965"
  ],
  [
   "1392",
   "0.1965"
  ],
  [
   "1395",
   "0.1965"
  ],
  [
   "1405",
   "0.1965"
  ],
  [
   "1412",
   "0.3929"
  ],
  [
   "1416",
   "0.1965"
  ],
  [
   "1418",
   "0.3929"
  ],
  [
   "1419",
   "0.3929"
  ],
  [
   "1425",
   "0.1965"
  ],
  [
   "1426",
   "0.5894"
  ],
  [
   "1432",
   "0.1965"
  ],
  [
   "1433",
   "0.1965"
  ],
  [
   "1435",
   "0.3929"
  ],
  [
   "1436",
   "0.1965"
  ],
  [
   "1439",
   "0.5894"
  ],
  [
   "1442",
   "0.1965"
  ],
  [
   "1445",
   "0.1965"
  ],
  [
   "1446",
   "0.5894"
  ],
  [
   "1448",
   "0.3929"
  ],
  [
   "1455",
   "0.3929"
  ],
  [
   "1459",
   "0.3929"
  ],
  [
   "1465",
   "0.1965"
  ],
  [
   "1466",
   "0.1965"
  ],
  [
   "1475",
   "0.1965"
  ],
  [
   "1482",
   "0.1965"
  ],
  [
   "1485",
   "0.1965"
  ],
  [
   "1492",
   "0.1965"
  ],
  [
   "1499",
   "0.1965"
  ],
  [
   "1502",
   "0.1965"
  ],
  [
   "1505",
   "0.5894"
  ],
  [
   "1508",
   "0.1965"
  ],
  [
   "1509",
   "0.5894"
  ],
  [
   "1512",
   "0.1965"
  ],
  [
   "1516",
   "0.1965"
  ],
  [
   "1522",
   "0.5894"
  ],
  [
   "1532",
   "0.5894"
  ],
  [
   "1535",
   "0.1965"
  ],
  [
   "1536",
   "0.1965"
  ],
  [
   "1538",
   "0.1965"
  ],
  [
   "1539",
   "0.1965"
  ],
  [
   "1548",
   "0.1965"
  ],
  [
   "1549",
   "0.1965"
  ],
  [
   "1555",
   "0.7859"
  ],
  [
   "1558",
   "0.3929"
  ],
  [
   "1565",
   "0.1965"
  ],
  [
   "1568",
   "0.1965"
  ],
  [
   "1582",
   "0.5894"
  ],
  [
   "1585",
   "0.1965"
  ],
  [
   "1592",
   "0.1965"
  ],
  [
   "1595",
   "0.1965"
  ],
  [
   "1602",
   "0.1965"
  ],
  [
   "1612",
   "0.5894"
  ],
  [
   "1615",
   "0.1965"
  ],
  [
   "1649",
   "0.1965"
  ],
  [
   "1655",
   "0.1965"
  ],
  [
   "1658",
   "0.3929"
  ],
  [
   "1659",
   "0.1965"
  ],
  [
   "1662",
   "0.1965"
  ],
  [
   "1665",
   "0.3929"
  ],
  [
   "1672",
   "0.1965"
  ],
  [
   "1675",
   "0.1965"
  ],
  [
   "1685",
   "0.3929"
  ],
  [
   "1698",
   "0.1965"
  ],
  [
   "1708",
   "0.1965"
  ],
  [
   "1712",
   "0.1965"
  ],
  [
   "1716",
   "0.1965"
  ],
  [
   "1728",
   "0.3929"
  ],
  [
   "1732",
   "0.1965"
  ],
  [
   "1738",
   "0.1965"
  ],
  [
   "1739",
   "0.1965"
  ],
  [
   "1742",
   "0.1965"
  ],
  [
   "1746",
   "0.3929"
  ],
  [
   "1752",
   "0.1965"
  ],
  [
   "1755",
   "0.1965"
  ],
  [
   "1756",
   "0.1965"
  ],
  [
   "1762",
   "0.3929"
  ],
  [
   "1769",
   "0.1965"
  ],
  [
   "1782",
   "0.1965"
  ],
  [
   "1792",
   "0.1965"
  ],
  [
   "1802",
   "0.1965"
  ],
  [
   "1806",
   "0.3929"
  ],
  [
   "1808",
   "0.1965"
  ],
  [
   "1816",
   "0.1965"
  ],
  [
   "1826",
   "0.1965"
  ],
  [
   "1832",
   "0.1965"
  ],
  [
   "1835",
   "0.1965"
  ],
  [
   "1845",
   "0.1965"
  ],
  [
   "1849",
   "0.1965"
  ],
  [
   "1856",
   "0.1965"
  ],
  [
   "1868",
   "0.1965"
  ],
  [
   "1872",
   "0.3929"
  ],
  [
   "1892",
   "0.3929"
  ],
  [
   "1922",
   "0.5894"
  ],
  [
   "1925",
   "0.1965"
  ],
  [
   "1929",
   "0.1965"
  ],
  [
   "1932",
   "0.1965"
  ],
  [
   "1938",
   "0.1965"
  ],
  [
   "1955",
   "0.1965"
  ],
  [
   "1969",
   "0.1965"
  ],
  [
   "1975",
   "0.1965"
  ],
  [
   "1976",
   "0.1965"
  ],
  [
   "1985",
   "0.1965"
  ],
  [
   "1992",
   "0.1965"
  ],
  [
   "2002",
   "0.1965"
  ],
  [
   "2026",
   "0.1965"
  ],
  [
   "2049",
   "0.1965"
  ],
  [
   "2055",
   "0.3929"
  ],
  [
   "2058",
   "0.1965"
  ],
  [
   "2062",
   "0.1965"
  ],
  [
   "2075",
   "0.1965"
  ],
  [
   "2079",
   "0.1965"
  ],
  [
   "2112",
   "0.1965"
  ],
  [
   "2119",
   "0.1965"
  ],
  [
   "2125",
   "0.1965"
  ],
  [
   "2196",
   "0.1965"
  ],
  [
   "2199",
   "0.1965"
  ],
  [
   "2226",
   "0.1965"
  ],
  [
   "2262",
   "0.1965"
  ],
  [
   "2269",
   "0.1965"
  ],
  [
   "2346",
   "0.1965"
  ],
  [
   "2359",
   "0.1965"
  ],
  [
   "2365",
   "0.3929"
  ],
  [
   "2382",
   "0.1965"
  ],
  [
   "2479",
   "0.1965"
  ],
  [
   "2495",
   "0.1965"
  ],
  [
   "2578",
   "0.1965"
  ],
  [
   "2595",
   "0.1965"
  ],
  [
   "2666",
   "0.1965"
  ],
  [
   "2695",
   "0.1965"
  ],
  [
   "2739",
   "0.1965"
  ],
  [
   "2752",
   "0.1965"
  ],
  [
   "2782",
   "0.1965"
  ],
  [
   "2812",
   "0.1965"
  ],
  [
   "2815",
   "0.1965"
  ],
  [
   "2832",
   "0.1965"
  ],
  [
   "2885",
   "0.1965"
  ],
  [
   "2962",
   "0.1965"
  ],
  [
   "3255",
   "0.1965"
  ],
  [
   "3365",
   "0.1965"
  ],
  [
   "3772",
   "0.1965"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 31,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "2272 ms",
  "compare_result": "1111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 31,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 447,
  "name": "Your",
  "id": 111474685
 }
}