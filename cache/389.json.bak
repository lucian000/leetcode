{
 "id": 389,
 "ids": "389",
 "state": "ac",
 "name": "Find the Difference",
 "key": "find-the-difference",
 "link": "https://leetcode.com/problems/find-the-difference",
 "locked": false,
 "percent": 51.5007844062808,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "74.2K",
 "totalSubmit": "144.1K",
 "desc": "\r\nGiven two strings s and t which consist of only lowercase letters.\r\n\r\nString t is generated by random shuffling string s and then add one more letter at a random position.\r\n\r\nFind the letter that was added in t.\r\n\r\nExample:\r\n\r\nInput:\r\ns = \"abcd\"\r\nt = \"abcde\"\r\n\r\nOutput:\r\ne\r\n\r\nExplanation:\r\n'e' is the letter that was added.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    char findTheDifference(string s, string t) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public char findTheDifference(String s, String t) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def findTheDifference(self, s, t):\r\n        \"\"\"\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def findTheDifference(self, s, t):\r\n        \"\"\"\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "char findTheDifference(char* s, char* t) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public char FindTheDifference(string s, string t) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {character}\r\n */\r\nvar findTheDifference = function(s, t) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\r\n# @param {String} t\r\n# @return {Character}\r\ndef find_the_difference(s, t)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func findTheDifference(_ s: String, _ t: String) -> Character {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func findTheDifference(s string, t string) byte {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def findTheDifference(s: String, t: String): Char = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"abcd\"\\n\"abcde\"'",
 "testable": true,
 "slug": "find-the-difference",
 "category": "algorithms",
 "fname": "389.find-the-difference.algorithms.py",
 "test_your": {
  "code_answer": [
   "\"e\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502637479.9_784204_30"
 },
 "test_expected": {
  "code_answer": [
   "\"e\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502637479.92_784204_30"
 },
 "file": "389.find-the-difference.algorithms.py",
 "submit_chart": [
  [
   "32",
   "0.3456"
  ],
  [
   "33",
   "0.1152"
  ],
  [
   "35",
   "2.6498"
  ],
  [
   "36",
   "1.9585"
  ],
  [
   "38",
   "2.6498"
  ],
  [
   "39",
   "5.9908"
  ],
  [
   "42",
   "11.5207"
  ],
  [
   "43",
   "1.0369"
  ],
  [
   "45",
   "5.7604"
  ],
  [
   "46",
   "4.4931"
  ],
  [
   "48",
   "2.3041"
  ],
  [
   "49",
   "9.6774"
  ],
  [
   "52",
   "9.4470"
  ],
  [
   "53",
   "0.2304"
  ],
  [
   "55",
   "6.5668"
  ],
  [
   "56",
   "3.2258"
  ],
  [
   "58",
   "1.9585"
  ],
  [
   "59",
   "3.6866"
  ],
  [
   "62",
   "4.2627"
  ],
  [
   "63",
   "0.1152"
  ],
  [
   "65",
   "1.8433"
  ],
  [
   "66",
   "1.6129"
  ],
  [
   "68",
   "1.2673"
  ],
  [
   "69",
   "3.3410"
  ],
  [
   "72",
   "2.4194"
  ],
  [
   "73",
   "0.1152"
  ],
  [
   "75",
   "1.6129"
  ],
  [
   "76",
   "0.5760"
  ],
  [
   "78",
   "0.4608"
  ],
  [
   "79",
   "1.1521"
  ],
  [
   "82",
   "0.8065"
  ],
  [
   "83",
   "0.2304"
  ],
  [
   "85",
   "0.3456"
  ],
  [
   "88",
   "0.2304"
  ],
  [
   "89",
   "0.8065"
  ],
  [
   "92",
   "0.5760"
  ],
  [
   "95",
   "0.8065"
  ],
  [
   "96",
   "0.2304"
  ],
  [
   "98",
   "0.1152"
  ],
  [
   "99",
   "0.3456"
  ],
  [
   "108",
   "0.1152"
  ],
  [
   "109",
   "0.4608"
  ],
  [
   "112",
   "0.2304"
  ],
  [
   "115",
   "0.3456"
  ],
  [
   "116",
   "0.1152"
  ],
  [
   "118",
   "0.1152"
  ],
  [
   "119",
   "0.1152"
  ],
  [
   "122",
   "0.1152"
  ],
  [
   "126",
   "0.1152"
  ],
  [
   "128",
   "0.1152"
  ],
  [
   "129",
   "0.1152"
  ],
  [
   "135",
   "0.1152"
  ],
  [
   "168",
   "0.1152"
  ],
  [
   "178",
   "0.1152"
  ],
  [
   "182",
   "0.1152"
  ],
  [
   "185",
   "0.1152"
  ],
  [
   "192",
   "0.1152"
  ],
  [
   "208",
   "0.1152"
  ],
  [
   "255",
   "0.1152"
  ],
  [
   "1782",
   "0.1152"
  ],
  [
   "1865",
   "0.1152"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 54,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "55 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 54,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 389,
  "name": "Your",
  "id": 113703801
 }
}