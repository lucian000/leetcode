{
 "id": 268,
 "ids": "268",
 "state": "None",
 "name": "Missing Number",
 "key": "missing-number",
 "link": "https://leetcode.com/problems/missing-number",
 "locked": false,
 "percent": 44.13147429307323,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "120.6K",
 "totalSubmit": "273.4K",
 "desc": "\r\nGiven an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.\r\n\r\n\r\nFor example,\r\nGiven nums = [0, 1, 3] return 2.\r\n\r\n\r\n\r\nNote:\r\nYour algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?\r\n\r\n\r\nCredits:Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int missingNumber(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int missingNumber(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def missingNumber(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\""
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int missingNumber(int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int MissingNumber(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar missingNumber = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef missing_number(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func missingNumber(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func missingNumber(nums []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def missingNumber(nums: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[0]'",
 "testable": true,
 "slug": "missing-number",
 "category": "algorithms",
 "fname": "268.missing-number.algorithms.py",
 "test_your": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501598811.34_784204_6"
 },
 "test_expected": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501598811.36_784204_6"
 },
 "submit_chart": [
  [
   "35",
   "0.0704"
  ],
  [
   "38",
   "0.2817"
  ],
  [
   "39",
   "0.7042"
  ],
  [
   "42",
   "6.4789"
  ],
  [
   "43",
   "0.8451"
  ],
  [
   "45",
   "7.3239"
  ],
  [
   "46",
   "4.5775"
  ],
  [
   "48",
   "3.0282"
  ],
  [
   "49",
   "7.5352"
  ],
  [
   "52",
   "10.5634"
  ],
  [
   "53",
   "0.4225"
  ],
  [
   "55",
   "5.9859"
  ],
  [
   "56",
   "4.6479"
  ],
  [
   "58",
   "2.7465"
  ],
  [
   "59",
   "5.5634"
  ],
  [
   "62",
   "4.0141"
  ],
  [
   "63",
   "0.3521"
  ],
  [
   "65",
   "2.9577"
  ],
  [
   "66",
   "1.2676"
  ],
  [
   "68",
   "1.3380"
  ],
  [
   "69",
   "2.5352"
  ],
  [
   "72",
   "4.2958"
  ],
  [
   "73",
   "0.0704"
  ],
  [
   "75",
   "2.5352"
  ],
  [
   "76",
   "1.4789"
  ],
  [
   "78",
   "0.9859"
  ],
  [
   "79",
   "2.1127"
  ],
  [
   "82",
   "3.2394"
  ],
  [
   "85",
   "1.4085"
  ],
  [
   "86",
   "0.9859"
  ],
  [
   "88",
   "0.6338"
  ],
  [
   "89",
   "1.3380"
  ],
  [
   "92",
   "1.6197"
  ],
  [
   "95",
   "0.5634"
  ],
  [
   "96",
   "0.1408"
  ],
  [
   "98",
   "0.2817"
  ],
  [
   "99",
   "0.4225"
  ],
  [
   "102",
   "0.4225"
  ],
  [
   "105",
   "0.4930"
  ],
  [
   "106",
   "0.1408"
  ],
  [
   "108",
   "0.1408"
  ],
  [
   "109",
   "0.4225"
  ],
  [
   "112",
   "0.3521"
  ],
  [
   "113",
   "0.0704"
  ],
  [
   "115",
   "0.4225"
  ],
  [
   "116",
   "0.1408"
  ],
  [
   "119",
   "0.0704"
  ],
  [
   "122",
   "0.0704"
  ],
  [
   "125",
   "0.0704"
  ],
  [
   "128",
   "0.0704"
  ],
  [
   "132",
   "0.1408"
  ],
  [
   "136",
   "0.0704"
  ],
  [
   "139",
   "0.0704"
  ],
  [
   "142",
   "0.1408"
  ],
  [
   "145",
   "0.0704"
  ],
  [
   "166",
   "0.0704"
  ],
  [
   "182",
   "0.0704"
  ],
  [
   "192",
   "0.0704"
  ],
  [
   "198",
   "0.0704"
  ],
  [
   "199",
   "0.0704"
  ],
  [
   "205",
   "0.0704"
  ],
  [
   "218",
   "0.0704"
  ],
  [
   "255",
   "0.0704"
  ],
  [
   "266",
   "0.0704"
  ],
  [
   "289",
   "0.0704"
  ],
  [
   "306",
   "0.0704"
  ],
  [
   "312",
   "0.0704"
  ],
  [
   "326",
   "0.0704"
  ],
  [
   "412",
   "0.0704"
  ],
  [
   "442",
   "0.0704"
  ],
  [
   "519",
   "0.0704"
  ],
  [
   "555",
   "0.0704"
  ],
  [
   "639",
   "0.0704"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 121,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "42 ms",
  "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 121,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 268,
  "name": "Your",
  "id": 112044930
 }
}