{
 "id": 606,
 "ids": "606",
 "state": "None",
 "name": "Construct String from Binary Tree",
 "key": "construct-string-from-binary-tree",
 "link": "https://leetcode.com/problems/construct-string-from-binary-tree",
 "locked": false,
 "percent": 51.24709167054444,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "11K",
 "totalSubmit": "21.5K",
 "desc": "You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.\r\n\r\nThe null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.\r\n\r\nExample 1:\r\n\r\nInput: Binary tree: [1,2,3,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n   /    \r\n  4     \r\n\r\nOutput: \"1(2(4))(3)\"\r\nExplanation: Originallay it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\".\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: Binary tree: [1,2,3,null,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n     \\  \r\n      4 \r\n\r\nOutput: \"1(2()(4))(3)\"\r\nExplanation: Almost the same as the first example, except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    string tree2str(TreeNode* t) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public String tree2str(TreeNode t) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def tree2str(self, t):\r\n        \"\"\"\r\n        :type t: TreeNode\r\n        :rtype: str\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def tree2str(self, t):\r\n        \"\"\"\r\n        :type t: TreeNode\r\n        :rtype: str\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nchar* tree2str(struct TreeNode* t) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public string Tree2str(TreeNode t) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} t\r\n * @return {string}\r\n */\r\nvar tree2str = function(t) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} t\r\n# @return {String}\r\ndef tree2str(t)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func tree2str(_ t: TreeNode?) -> String {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc tree2str(t *TreeNode) string {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def tree2str(t: TreeNode): String = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,2,3,4]'",
 "testable": true,
 "slug": "construct-string-from-binary-tree",
 "category": "algorithms",
 "fname": "606.construct-string-from-binary-tree.algorithms.py",
 "test_your": {
  "code_answer": [
   "\"1(2(4))(3)\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502113575.35_784204_2"
 },
 "test_expected": {
  "code_answer": [
   "\"1(2(4))(3)\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502113575.37_784204_2"
 },
 "submit_chart": [
  [
   "62",
   "0.3071"
  ],
  [
   "65",
   "1.5353"
  ],
  [
   "66",
   "1.2282"
  ],
  [
   "68",
   "1.5353"
  ],
  [
   "69",
   "3.9918"
  ],
  [
   "72",
   "10.3378"
  ],
  [
   "73",
   "0.4094"
  ],
  [
   "75",
   "4.9130"
  ],
  [
   "76",
   "4.7083"
  ],
  [
   "78",
   "3.7871"
  ],
  [
   "79",
   "7.4719"
  ],
  [
   "82",
   "9.8260"
  ],
  [
   "85",
   "6.0389"
  ],
  [
   "86",
   "3.3777"
  ],
  [
   "88",
   "2.4565"
  ],
  [
   "89",
   "5.1177"
  ],
  [
   "92",
   "5.1177"
  ],
  [
   "93",
   "0.1024"
  ],
  [
   "95",
   "3.4800"
  ],
  [
   "96",
   "1.1259"
  ],
  [
   "98",
   "1.0235"
  ],
  [
   "99",
   "2.0471"
  ],
  [
   "102",
   "4.2989"
  ],
  [
   "105",
   "1.7400"
  ],
  [
   "106",
   "0.8188"
  ],
  [
   "108",
   "0.6141"
  ],
  [
   "109",
   "1.1259"
  ],
  [
   "112",
   "2.1494"
  ],
  [
   "115",
   "0.8188"
  ],
  [
   "116",
   "0.4094"
  ],
  [
   "118",
   "0.3071"
  ],
  [
   "119",
   "0.6141"
  ],
  [
   "122",
   "0.6141"
  ],
  [
   "125",
   "0.6141"
  ],
  [
   "126",
   "0.5118"
  ],
  [
   "128",
   "0.3071"
  ],
  [
   "129",
   "0.8188"
  ],
  [
   "132",
   "0.6141"
  ],
  [
   "135",
   "0.2047"
  ],
  [
   "136",
   "0.2047"
  ],
  [
   "138",
   "0.1024"
  ],
  [
   "142",
   "0.3071"
  ],
  [
   "145",
   "0.1024"
  ],
  [
   "148",
   "0.1024"
  ],
  [
   "149",
   "0.2047"
  ],
  [
   "152",
   "0.2047"
  ],
  [
   "155",
   "0.1024"
  ],
  [
   "156",
   "0.1024"
  ],
  [
   "159",
   "0.1024"
  ],
  [
   "169",
   "0.1024"
  ],
  [
   "195",
   "0.1024"
  ],
  [
   "199",
   "0.1024"
  ],
  [
   "412",
   "0.1024"
  ],
  [
   "455",
   "0.1024"
  ],
  [
   "812",
   "0.1024"
  ],
  [
   "836",
   "0.1024"
  ],
  [
   "885",
   "0.1024"
  ],
  [
   "895",
   "0.1024"
  ],
  [
   "948",
   "0.1024"
  ],
  [
   "949",
   "0.2047"
  ],
  [
   "1018",
   "0.1024"
  ],
  [
   "1068",
   "0.1024"
  ],
  [
   "1199",
   "0.1024"
  ],
  [
   "1239",
   "0.1024"
  ],
  [
   "1329",
   "0.1024"
  ],
  [
   "1342",
   "0.1024"
  ],
  [
   "1372",
   "0.1024"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 162,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "68 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 162,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 606,
  "name": "Your",
  "id": 112871073
 }
}