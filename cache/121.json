{
 "id": 121,
 "ids": "121",
 "state": "None",
 "name": "Best Time to Buy and Sell Stock",
 "key": "best-time-to-buy-and-sell-stock",
 "link": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock",
 "locked": false,
 "percent": 40.93172621715717,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "200K",
 "totalSubmit": "488.6K",
 "desc": "Say you have an array for which the ith element is the price of a given stock on day i.\r\n\r\nIf you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.\r\n\r\nExample 1:\r\n\r\nInput: [7, 1, 5, 3, 6, 4]\r\nOutput: 5\r\n\r\nmax. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [7, 6, 4, 3, 1]\r\nOutput: 0\r\n\r\nIn this case, no transaction is done, i.e. max profit = 0.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int maxProfit(vector<int>& prices) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int maxProfit(int[] prices) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def maxProfit(self, prices):\r\n        \"\"\"\r\n        :type prices: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int maxProfit(int* prices, int pricesSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int MaxProfit(int[] prices) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} prices\r\n * @return {number}\r\n */\r\nvar maxProfit = function(prices) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} prices\r\n# @return {Integer}\r\ndef max_profit(prices)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func maxProfit(_ prices: [Int]) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func maxProfit(prices []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[7,1,5,3,6,4]'",
 "testable": true,
 "slug": "best-time-to-buy-and-sell-stock",
 "category": "algorithms",
 "fname": "121.best-time-to-buy-and-sell-stock.algorithms.py",
 "test_your": {
  "code_answer": [
   "5"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "26 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502550629.18_784204_19"
 },
 "test_expected": {
  "code_answer": [
   "5"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502550629.2_784204_19"
 },
 "submit_chart": [
  [
   "32",
   "0.1262"
  ],
  [
   "33",
   "0.0421"
  ],
  [
   "35",
   "2.0185"
  ],
  [
   "36",
   "1.6821"
  ],
  [
   "38",
   "2.8175"
  ],
  [
   "39",
   "7.8638"
  ],
  [
   "42",
   "15.6854"
  ],
  [
   "43",
   "0.6728"
  ],
  [
   "45",
   "11.4802"
  ],
  [
   "46",
   "6.9807"
  ],
  [
   "48",
   "4.4155"
  ],
  [
   "49",
   "10.2187"
  ],
  [
   "52",
   "9.6299"
  ],
  [
   "53",
   "0.5046"
  ],
  [
   "55",
   "3.4903"
  ],
  [
   "56",
   "2.7334"
  ],
  [
   "58",
   "1.7241"
  ],
  [
   "59",
   "3.5324"
  ],
  [
   "62",
   "2.6072"
  ],
  [
   "65",
   "1.8503"
  ],
  [
   "66",
   "0.5467"
  ],
  [
   "68",
   "0.4626"
  ],
  [
   "69",
   "1.1775"
  ],
  [
   "72",
   "1.3036"
  ],
  [
   "75",
   "0.4626"
  ],
  [
   "76",
   "0.2944"
  ],
  [
   "78",
   "0.4205"
  ],
  [
   "79",
   "0.5887"
  ],
  [
   "82",
   "0.6728"
  ],
  [
   "85",
   "0.3364"
  ],
  [
   "86",
   "0.1262"
  ],
  [
   "88",
   "0.1262"
  ],
  [
   "89",
   "0.2523"
  ],
  [
   "92",
   "0.2944"
  ],
  [
   "95",
   "0.1262"
  ],
  [
   "99",
   "0.0421"
  ],
  [
   "102",
   "0.1262"
  ],
  [
   "105",
   "0.0841"
  ],
  [
   "106",
   "0.0421"
  ],
  [
   "109",
   "0.0421"
  ],
  [
   "112",
   "0.0841"
  ],
  [
   "115",
   "0.1682"
  ],
  [
   "116",
   "0.0841"
  ],
  [
   "118",
   "0.0841"
  ],
  [
   "119",
   "0.0421"
  ],
  [
   "122",
   "0.1262"
  ],
  [
   "129",
   "0.0421"
  ],
  [
   "132",
   "0.0421"
  ],
  [
   "136",
   "0.0421"
  ],
  [
   "138",
   "0.0421"
  ],
  [
   "142",
   "0.0421"
  ],
  [
   "145",
   "0.0421"
  ],
  [
   "146",
   "0.0421"
  ],
  [
   "148",
   "0.0421"
  ],
  [
   "152",
   "0.0421"
  ],
  [
   "166",
   "0.0421"
  ],
  [
   "172",
   "0.1262"
  ],
  [
   "175",
   "0.0841"
  ],
  [
   "189",
   "0.0421"
  ],
  [
   "199",
   "0.0421"
  ],
  [
   "202",
   "0.0421"
  ],
  [
   "205",
   "0.0421"
  ],
  [
   "206",
   "0.0421"
  ],
  [
   "219",
   "0.0841"
  ],
  [
   "236",
   "0.0421"
  ],
  [
   "242",
   "0.0421"
  ],
  [
   "249",
   "0.0421"
  ],
  [
   "252",
   "0.0421"
  ],
  [
   "255",
   "0.0421"
  ],
  [
   "259",
   "0.0421"
  ],
  [
   "339",
   "0.0421"
  ],
  [
   "405",
   "0.0421"
  ],
  [
   "415",
   "0.0421"
  ],
  [
   "422",
   "0.0421"
  ],
  [
   "429",
   "0.0421"
  ],
  [
   "432",
   "0.0421"
  ],
  [
   "435",
   "0.0421"
  ],
  [
   "439",
   "0.0421"
  ],
  [
   "462",
   "0.0421"
  ],
  [
   "485",
   "0.0421"
  ],
  [
   "502",
   "0.0421"
  ],
  [
   "525",
   "0.0421"
  ],
  [
   "846",
   "0.0421"
  ],
  [
   "882",
   "0.0421"
  ],
  [
   "885",
   "0.0421"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 200,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "46 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 200,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 121,
  "name": "Your",
  "id": 113568847
 }
}