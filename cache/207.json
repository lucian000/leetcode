{"id": 207, "ids": "207", "state": "None", "name": "Course Schedule", "key": "course-schedule", "link": "https://leetcode.com/problems/course-schedule", "locked": false, "percent": 31.80431379831799, "level": "Medium", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "\r\nThere are a total of n courses you have to take, labeled from 0 to n - 1.\r\n\r\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\r\n\r\n\r\nGiven the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?\r\n\r\n\r\nFor example:\r\n2, [[1,0]]\r\nThere are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.\r\n\r\n2, [[1,0],[0,1]]\r\nThere are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\r\n\r\nNote:\r\n\r\nThe input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\r\nYou may assume that there are no duplicate edges in the input prerequisites.\r\n\r\n\r\n\r\nclick to show more hints.\r\n\r\nHints:\r\n\r\nThis problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.\r\nTopological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.\r\nTopological sort could also be done via BFS.\r\n\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def canFinish(self, numCourses, prerequisites):\r\n        \"\"\"\r\n        :type numCourses: int\r\n        :type prerequisites: List[List[int]]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "bool canFinish(int numCourses, int** prerequisites, int prerequisitesRowSize, int prerequisitesColSize) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public bool CanFinish(int numCourses, int[,] prerequisites) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number} numCourses\r\n * @param {number[][]} prerequisites\r\n * @return {boolean}\r\n */\r\nvar canFinish = function(numCourses, prerequisites) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer} num_courses\r\n# @param {Integer[][]} prerequisites\r\n# @return {Boolean}\r\ndef can_finish(num_courses, prerequisites)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\r\n    func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -> Bool {\r\n        \r\n    }\r\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func canFinish(numCourses int, prerequisites [][]int) bool {\r\n    \r\n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def canFinish(numCourses: Int, prerequisites: Array[Array[Int]]): Boolean = {\n        \n    }\n}"}], "testcase": "2\n[[1,0]]", "testable": true}