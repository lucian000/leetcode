{
 "id": 349,
 "ids": "349",
 "state": "None",
 "name": "Intersection of Two Arrays",
 "key": "intersection-of-two-arrays",
 "link": "https://leetcode.com/problems/intersection-of-two-arrays",
 "locked": false,
 "percent": 47.09789024840542,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "93.1K",
 "totalSubmit": "197.7K",
 "desc": "\r\nGiven two arrays, write a function to compute their intersection.\r\n\r\n\r\nExample:\r\nGiven nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].\r\n\r\n\r\nNote:\r\n\r\nEach element in the result must be unique.\r\nThe result can be in any order.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int[] intersection(int[] nums1, int[] nums2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def intersection(self, nums1, nums2):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int[] Intersection(int[] nums1, int[] nums2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @return {number[]}\r\n */\r\nvar intersection = function(nums1, nums2) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @return {Integer[]}\r\ndef intersection(nums1, nums2)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func intersection(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func intersection(nums1 []int, nums2 []int) []int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def intersection(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]\\n[]'",
 "testable": true,
 "slug": "intersection-of-two-arrays",
 "category": "algorithms",
 "fname": "349.intersection-of-two-arrays.algorithms.py",
 "test_your": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "33 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501601428.19_784204_11"
 },
 "test_expected": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501601428.21_784204_11"
 },
 "submit_chart": [
  [
   "32",
   "0.0832"
  ],
  [
   "35",
   "3.0782"
  ],
  [
   "36",
   "2.4958"
  ],
  [
   "38",
   "3.4942"
  ],
  [
   "39",
   "10.8985"
  ],
  [
   "42",
   "15.2246"
  ],
  [
   "43",
   "0.8319"
  ],
  [
   "45",
   "9.1514"
  ],
  [
   "46",
   "4.9085"
  ],
  [
   "48",
   "2.5790"
  ],
  [
   "49",
   "6.4892"
  ],
  [
   "52",
   "6.6556"
  ],
  [
   "53",
   "0.2496"
  ],
  [
   "55",
   "2.7454"
  ],
  [
   "56",
   "1.4143"
  ],
  [
   "58",
   "1.1647"
  ],
  [
   "59",
   "1.9967"
  ],
  [
   "62",
   "2.4126"
  ],
  [
   "63",
   "0.0832"
  ],
  [
   "65",
   "0.9983"
  ],
  [
   "66",
   "1.0815"
  ],
  [
   "68",
   "0.8319"
  ],
  [
   "69",
   "1.9967"
  ],
  [
   "72",
   "1.7471"
  ],
  [
   "73",
   "0.0832"
  ],
  [
   "75",
   "1.3311"
  ],
  [
   "76",
   "0.9983"
  ],
  [
   "78",
   "0.4992"
  ],
  [
   "79",
   "1.0815"
  ],
  [
   "82",
   "1.9967"
  ],
  [
   "85",
   "0.9151"
  ],
  [
   "86",
   "0.9151"
  ],
  [
   "88",
   "0.4992"
  ],
  [
   "89",
   "1.0815"
  ],
  [
   "92",
   "1.0815"
  ],
  [
   "93",
   "0.0832"
  ],
  [
   "95",
   "0.4160"
  ],
  [
   "96",
   "0.3328"
  ],
  [
   "98",
   "0.3328"
  ],
  [
   "99",
   "0.2496"
  ],
  [
   "102",
   "0.4160"
  ],
  [
   "105",
   "0.3328"
  ],
  [
   "106",
   "0.1664"
  ],
  [
   "108",
   "0.1664"
  ],
  [
   "109",
   "0.2496"
  ],
  [
   "112",
   "0.3328"
  ],
  [
   "115",
   "0.0832"
  ],
  [
   "119",
   "0.4160"
  ],
  [
   "122",
   "0.3328"
  ],
  [
   "125",
   "0.2496"
  ],
  [
   "126",
   "0.1664"
  ],
  [
   "129",
   "0.1664"
  ],
  [
   "132",
   "0.3328"
  ],
  [
   "135",
   "0.0832"
  ],
  [
   "136",
   "0.1664"
  ],
  [
   "138",
   "0.0832"
  ],
  [
   "142",
   "0.0832"
  ],
  [
   "146",
   "0.1664"
  ],
  [
   "152",
   "0.1664"
  ],
  [
   "159",
   "0.0832"
  ],
  [
   "172",
   "0.0832"
  ],
  [
   "185",
   "0.0832"
  ],
  [
   "198",
   "0.0832"
  ],
  [
   "202",
   "0.0832"
  ],
  [
   "205",
   "0.0832"
  ],
  [
   "209",
   "0.0832"
  ],
  [
   "212",
   "0.0832"
  ],
  [
   "219",
   "0.0832"
  ],
  [
   "222",
   "0.0832"
  ],
  [
   "226",
   "0.0832"
  ],
  [
   "232",
   "0.0832"
  ],
  [
   "249",
   "0.0832"
  ],
  [
   "276",
   "0.0832"
  ],
  [
   "302",
   "0.0832"
  ],
  [
   "372",
   "0.0832"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 60,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "129 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 60,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 349,
  "name": "Your",
  "id": 112049791
 }
}