{
 "id": 543,
 "ids": "543",
 "state": "None",
 "name": "Diameter of Binary Tree",
 "key": "diameter-of-binary-tree",
 "link": "https://leetcode.com/problems/diameter-of-binary-tree",
 "locked": false,
 "percent": 43.443140499466566,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "20K",
 "totalSubmit": "45.9K",
 "desc": "\r\nGiven a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\r\n\r\n\r\n\r\nExample:\r\nGiven a binary tree \r\n\r\n          1\r\n         / \\\r\n        2   3\r\n       / \\     \r\n      4   5    \r\n\r\n\r\n\r\nReturn 3, which is the length of the path [4,2,1,3] or [5,2,1,3].\r\n\r\n\r\nNote:\r\nThe length of path between two nodes is represented by the number of edges between them.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        \n    }\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int diameterOfBinaryTree(TreeNode root) {\n        \n    }\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def diameterOfBinaryTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint diameterOfBinaryTree(struct TreeNode* root) {\n    \n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int DiameterOfBinaryTree(TreeNode root) {\n        \n    }\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar diameterOfBinaryTree = function(root) {\n    \n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Integer}\ndef diameter_of_binary_tree(root)\n    \nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func diameterOfBinaryTree(_ root: TreeNode?) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc diameterOfBinaryTree(root *TreeNode) int {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def diameterOfBinaryTree(root: TreeNode): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,2,3,4,5]'",
 "testable": true,
 "slug": "diameter-of-binary-tree",
 "category": "algorithms",
 "fname": "543.diameter-of-binary-tree.algorithms.py",
 "test_your": {
  "code_answer": [
   "3"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501601662.43_784204_13"
 },
 "test_expected": {
  "code_answer": [
   "3"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501601662.46_784204_13"
 },
 "submit_chart": [
  [
   "52",
   "0.2174"
  ],
  [
   "55",
   "1.1957"
  ],
  [
   "56",
   "1.0870"
  ],
  [
   "58",
   "2.8261"
  ],
  [
   "59",
   "5.5435"
  ],
  [
   "62",
   "11.3043"
  ],
  [
   "63",
   "0.1087"
  ],
  [
   "65",
   "8.0435"
  ],
  [
   "66",
   "3.9130"
  ],
  [
   "68",
   "3.4783"
  ],
  [
   "69",
   "6.6304"
  ],
  [
   "72",
   "8.2609"
  ],
  [
   "73",
   "0.1087"
  ],
  [
   "75",
   "5.2174"
  ],
  [
   "76",
   "2.8261"
  ],
  [
   "78",
   "1.1957"
  ],
  [
   "79",
   "3.3696"
  ],
  [
   "82",
   "3.8043"
  ],
  [
   "85",
   "1.0870"
  ],
  [
   "86",
   "0.5435"
  ],
  [
   "88",
   "0.9783"
  ],
  [
   "89",
   "1.3043"
  ],
  [
   "92",
   "1.3043"
  ],
  [
   "93",
   "0.1087"
  ],
  [
   "95",
   "0.6522"
  ],
  [
   "96",
   "0.4348"
  ],
  [
   "98",
   "0.3261"
  ],
  [
   "99",
   "0.7609"
  ],
  [
   "102",
   "1.0870"
  ],
  [
   "103",
   "0.1087"
  ],
  [
   "105",
   "0.4348"
  ],
  [
   "106",
   "0.3261"
  ],
  [
   "108",
   "0.4348"
  ],
  [
   "109",
   "0.5435"
  ],
  [
   "112",
   "0.5435"
  ],
  [
   "115",
   "0.3261"
  ],
  [
   "118",
   "0.2174"
  ],
  [
   "119",
   "0.3261"
  ],
  [
   "126",
   "0.1087"
  ],
  [
   "128",
   "0.1087"
  ],
  [
   "132",
   "0.3261"
  ],
  [
   "136",
   "0.1087"
  ],
  [
   "142",
   "0.4348"
  ],
  [
   "155",
   "0.1087"
  ],
  [
   "158",
   "0.1087"
  ],
  [
   "162",
   "0.1087"
  ],
  [
   "168",
   "0.1087"
  ],
  [
   "169",
   "0.1087"
  ],
  [
   "182",
   "0.1087"
  ],
  [
   "192",
   "0.1087"
  ],
  [
   "195",
   "0.2174"
  ],
  [
   "212",
   "0.1087"
  ],
  [
   "245",
   "0.1087"
  ],
  [
   "252",
   "0.1087"
  ],
  [
   "295",
   "0.1087"
  ],
  [
   "376",
   "0.1087"
  ],
  [
   "739",
   "0.1087"
  ],
  [
   "855",
   "0.1087"
  ],
  [
   "879",
   "0.1087"
  ],
  [
   "919",
   "0.2174"
  ],
  [
   "945",
   "0.1087"
  ],
  [
   "989",
   "0.1087"
  ],
  [
   "1002",
   "0.1087"
  ],
  [
   "1009",
   "0.1087"
  ],
  [
   "1019",
   "0.1087"
  ],
  [
   "1036",
   "0.1087"
  ],
  [
   "1055",
   "0.1087"
  ],
  [
   "1062",
   "0.1087"
  ],
  [
   "1066",
   "0.1087"
  ],
  [
   "1068",
   "0.2174"
  ],
  [
   "1072",
   "0.1087"
  ],
  [
   "1075",
   "0.1087"
  ],
  [
   "1079",
   "0.1087"
  ],
  [
   "1082",
   "0.1087"
  ],
  [
   "1085",
   "0.1087"
  ],
  [
   "1086",
   "0.1087"
  ],
  [
   "1088",
   "0.2174"
  ],
  [
   "1089",
   "0.2174"
  ],
  [
   "1092",
   "0.1087"
  ],
  [
   "1095",
   "0.1087"
  ],
  [
   "1096",
   "0.1087"
  ],
  [
   "1099",
   "0.1087"
  ],
  [
   "1102",
   "0.2174"
  ],
  [
   "1105",
   "0.1087"
  ],
  [
   "1112",
   "0.3261"
  ],
  [
   "1115",
   "0.1087"
  ],
  [
   "1116",
   "0.1087"
  ],
  [
   "1122",
   "0.1087"
  ],
  [
   "1125",
   "0.3261"
  ],
  [
   "1129",
   "0.1087"
  ],
  [
   "1132",
   "0.3261"
  ],
  [
   "1135",
   "0.2174"
  ],
  [
   "1142",
   "0.2174"
  ],
  [
   "1146",
   "0.1087"
  ],
  [
   "1148",
   "0.1087"
  ],
  [
   "1152",
   "0.1087"
  ],
  [
   "1158",
   "0.1087"
  ],
  [
   "1159",
   "0.2174"
  ],
  [
   "1162",
   "0.1087"
  ],
  [
   "1165",
   "0.1087"
  ],
  [
   "1166",
   "0.2174"
  ],
  [
   "1168",
   "0.1087"
  ],
  [
   "1179",
   "0.2174"
  ],
  [
   "1182",
   "0.4348"
  ],
  [
   "1185",
   "0.1087"
  ],
  [
   "1186",
   "0.2174"
  ],
  [
   "1189",
   "0.1087"
  ],
  [
   "1192",
   "0.3261"
  ],
  [
   "1195",
   "0.2174"
  ],
  [
   "1198",
   "0.1087"
  ],
  [
   "1205",
   "0.1087"
  ],
  [
   "1212",
   "0.1087"
  ],
  [
   "1215",
   "0.2174"
  ],
  [
   "1219",
   "0.1087"
  ],
  [
   "1222",
   "0.2174"
  ],
  [
   "1225",
   "0.2174"
  ],
  [
   "1226",
   "0.2174"
  ],
  [
   "1235",
   "0.2174"
  ],
  [
   "1238",
   "0.2174"
  ],
  [
   "1239",
   "0.3261"
  ],
  [
   "1242",
   "0.2174"
  ],
  [
   "1252",
   "0.1087"
  ],
  [
   "1255",
   "0.1087"
  ],
  [
   "1256",
   "0.1087"
  ],
  [
   "1259",
   "0.1087"
  ],
  [
   "1262",
   "0.2174"
  ],
  [
   "1265",
   "0.1087"
  ],
  [
   "1272",
   "0.2174"
  ],
  [
   "1279",
   "0.2174"
  ],
  [
   "1292",
   "0.1087"
  ],
  [
   "1295",
   "0.1087"
  ],
  [
   "1296",
   "0.1087"
  ],
  [
   "1305",
   "0.1087"
  ],
  [
   "1315",
   "0.3261"
  ],
  [
   "1316",
   "0.3261"
  ],
  [
   "1322",
   "0.2174"
  ],
  [
   "1325",
   "0.1087"
  ],
  [
   "1332",
   "0.1087"
  ],
  [
   "1342",
   "0.1087"
  ],
  [
   "1345",
   "0.3261"
  ],
  [
   "1352",
   "0.1087"
  ],
  [
   "1359",
   "0.1087"
  ],
  [
   "1362",
   "0.2174"
  ],
  [
   "1365",
   "0.1087"
  ],
  [
   "1368",
   "0.2174"
  ],
  [
   "1369",
   "0.1087"
  ],
  [
   "1392",
   "0.1087"
  ],
  [
   "1402",
   "0.2174"
  ],
  [
   "1409",
   "0.1087"
  ],
  [
   "1412",
   "0.1087"
  ],
  [
   "1432",
   "0.1087"
  ],
  [
   "1435",
   "0.1087"
  ],
  [
   "1459",
   "0.1087"
  ],
  [
   "1488",
   "0.1087"
  ],
  [
   "1492",
   "0.1087"
  ],
  [
   "1562",
   "0.1087"
  ],
  [
   "1668",
   "0.1087"
  ],
  [
   "1672",
   "0.1087"
  ],
  [
   "1679",
   "0.1087"
  ],
  [
   "1798",
   "0.1087"
  ],
  [
   "1878",
   "0.1087"
  ],
  [
   "1888",
   "0.1087"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 106,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "62 ms",
  "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 106,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 543,
  "name": "Your",
  "id": 112050040
 }
}