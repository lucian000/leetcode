{
 "id": 500,
 "ids": "500",
 "state": "None",
 "name": "Keyboard Row",
 "key": "keyboard-row",
 "link": "https://leetcode.com/problems/keyboard-row",
 "locked": false,
 "percent": 59.98436333913785,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "33.8K",
 "totalSubmit": "56.3K",
 "desc": "Given a List of words, return the words that can be typed using letters of alphabet on only one row's of American keyboard like the image below. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput: [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\r\nOutput: [\"Alaska\", \"Dad\"]\r\n\r\n\r\n\r\nNote:\r\n\r\nYou may use one character in the keyboard more than once.\r\nYou may assume the input string will only contain letters of alphabet.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\npublic:\n    vector<string> findWords(vector<string>& words) {\n        \n    }\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\n    public String[] findWords(String[] words) {\n        \n    }\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findWords(char** words, int wordsSize, int* returnSize) {\n    \n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\n    public string[] FindWords(string[] words) {\n        \n    }\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\n * @param {string[]} words\n * @return {string[]}\n */\nvar findWords = function(words) {\n    \n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String[]} words\n# @return {String[]}\ndef find_words(words)\n    \nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func findWords(_ words: [String]) -> [String] {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func findWords(words []string) []string {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def findWords(words: Array[String]): Array[String] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]'",
 "testable": true,
 "slug": "keyboard-row",
 "category": "algorithms",
 "fname": "500.keyboard-row.algorithms.py",
 "test_your": {
  "code_answer": [
   "[\"Alaska\",\"Dad\"]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502536000.76_784204_5"
 },
 "test_expected": {
  "code_answer": [
   "[\"Alaska\",\"Dad\"]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502536000.78_784204_5"
 },
 "submit_chart": [
  [
   "25",
   "0.0612"
  ],
  [
   "26",
   "0.0612"
  ],
  [
   "28",
   "1.1628"
  ],
  [
   "29",
   "4.7736"
  ],
  [
   "32",
   "22.4602"
  ],
  [
   "33",
   "2.0808"
  ],
  [
   "35",
   "15.2999"
  ],
  [
   "36",
   "8.8127"
  ],
  [
   "38",
   "4.2228"
  ],
  [
   "39",
   "9.7307"
  ],
  [
   "42",
   "11.7503"
  ],
  [
   "43",
   "0.5508"
  ],
  [
   "45",
   "3.4884"
  ],
  [
   "46",
   "2.0808"
  ],
  [
   "48",
   "1.5912"
  ],
  [
   "49",
   "3.1824"
  ],
  [
   "52",
   "3.1212"
  ],
  [
   "53",
   "0.0612"
  ],
  [
   "55",
   "1.4076"
  ],
  [
   "56",
   "0.5508"
  ],
  [
   "58",
   "0.4896"
  ],
  [
   "59",
   "0.9180"
  ],
  [
   "62",
   "0.6120"
  ],
  [
   "65",
   "0.4284"
  ],
  [
   "66",
   "0.1836"
  ],
  [
   "68",
   "0.1836"
  ],
  [
   "69",
   "0.0612"
  ],
  [
   "72",
   "0.1836"
  ],
  [
   "79",
   "0.0612"
  ],
  [
   "82",
   "0.1224"
  ],
  [
   "89",
   "0.1224"
  ],
  [
   "92",
   "0.0612"
  ],
  [
   "132",
   "0.0612"
  ],
  [
   "165",
   "0.0612"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 22,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "35 ms",
  "compare_result": "1111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 22,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 500,
  "name": "Your",
  "id": 113554946
 }
}