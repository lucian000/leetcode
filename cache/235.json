{
 "id": 235,
 "ids": "235",
 "state": "None",
 "name": "Lowest Common Ancestor of a Binary Search Tree",
 "key": "lowest-common-ancestor-of-a-binary-search-tree",
 "link": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",
 "locked": false,
 "percent": 38.87914417626152,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "143.4K",
 "totalSubmit": "368.9K",
 "desc": "\r\nGiven a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\r\n\r\n\r\n\r\nAccording to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).\u201d\r\n\r\n\r\n\r\n        _______6______\r\n       /              \\\r\n    ___2__          ___8__\r\n   /      \\        /      \\\r\n   0      _4       7       9\r\n         /  \\\r\n         3   5\r\n\r\n\r\n\r\nFor example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def lowestCommonAncestor(self, root, p, q):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :type p: TreeNode\r\n        :type q: TreeNode\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {TreeNode} p\r\n * @param {TreeNode} q\r\n * @return {TreeNode}\r\n */\r\nvar lowestCommonAncestor = function(root, p, q) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {TreeNode} p\r\n# @param {TreeNode} q\r\n# @return {TreeNode}\r\ndef lowest_common_ancestor(root, p, q)\r\n    \r\nend"
  }
 ],
 "testcase": "'[2,1]\\nnode with value 2\\nnode with value 1'",
 "testable": false,
 "slug": "lowest-common-ancestor-of-a-binary-search-tree",
 "category": "algorithms",
 "fname": "235.lowest-common-ancestor-of-a-binary-search-tree.algorithms.py",
 "submit_chart": [
  [
   "98",
   "0.0850"
  ],
  [
   "99",
   "0.1699"
  ],
  [
   "102",
   "0.8496"
  ],
  [
   "105",
   "1.0195"
  ],
  [
   "106",
   "0.3398"
  ],
  [
   "108",
   "0.5098"
  ],
  [
   "109",
   "1.2744"
  ],
  [
   "112",
   "4.1631"
  ],
  [
   "115",
   "3.9082"
  ],
  [
   "116",
   "2.7188"
  ],
  [
   "118",
   "2.5489"
  ],
  [
   "119",
   "5.4376"
  ],
  [
   "122",
   "8.5811"
  ],
  [
   "123",
   "0.1699"
  ],
  [
   "125",
   "5.5225"
  ],
  [
   "126",
   "2.7188"
  ],
  [
   "128",
   "3.0586"
  ],
  [
   "129",
   "4.3331"
  ],
  [
   "132",
   "5.3526"
  ],
  [
   "133",
   "0.0850"
  ],
  [
   "135",
   "4.5030"
  ],
  [
   "136",
   "1.7842"
  ],
  [
   "138",
   "1.9541"
  ],
  [
   "139",
   "2.8887"
  ],
  [
   "142",
   "3.9082"
  ],
  [
   "145",
   "2.6338"
  ],
  [
   "146",
   "1.2744"
  ],
  [
   "148",
   "0.5947"
  ],
  [
   "149",
   "2.8037"
  ],
  [
   "152",
   "3.1436"
  ],
  [
   "155",
   "1.6143"
  ],
  [
   "156",
   "0.8496"
  ],
  [
   "158",
   "0.5947"
  ],
  [
   "159",
   "1.3594"
  ],
  [
   "162",
   "1.8692"
  ],
  [
   "165",
   "1.1895"
  ],
  [
   "166",
   "0.1699"
  ],
  [
   "168",
   "0.3398"
  ],
  [
   "169",
   "1.0195"
  ],
  [
   "172",
   "1.0195"
  ],
  [
   "175",
   "0.5947"
  ],
  [
   "176",
   "0.4248"
  ],
  [
   "178",
   "0.4248"
  ],
  [
   "179",
   "0.5947"
  ],
  [
   "182",
   "1.1045"
  ],
  [
   "185",
   "0.3398"
  ],
  [
   "186",
   "0.0850"
  ],
  [
   "188",
   "0.0850"
  ],
  [
   "189",
   "0.5947"
  ],
  [
   "192",
   "1.1045"
  ],
  [
   "195",
   "0.3398"
  ],
  [
   "196",
   "0.4248"
  ],
  [
   "198",
   "0.1699"
  ],
  [
   "199",
   "0.4248"
  ],
  [
   "202",
   "0.3398"
  ],
  [
   "205",
   "0.6797"
  ],
  [
   "206",
   "0.4248"
  ],
  [
   "209",
   "0.4248"
  ],
  [
   "212",
   "0.2549"
  ],
  [
   "215",
   "0.3398"
  ],
  [
   "216",
   "0.1699"
  ],
  [
   "218",
   "0.1699"
  ],
  [
   "219",
   "0.0850"
  ],
  [
   "222",
   "0.0850"
  ],
  [
   "228",
   "0.0850"
  ],
  [
   "229",
   "0.0850"
  ],
  [
   "232",
   "0.1699"
  ],
  [
   "235",
   "0.1699"
  ],
  [
   "239",
   "0.0850"
  ],
  [
   "245",
   "0.0850"
  ],
  [
   "246",
   "0.0850"
  ],
  [
   "255",
   "0.0850"
  ],
  [
   "259",
   "0.0850"
  ],
  [
   "276",
   "0.0850"
  ],
  [
   "279",
   "0.0850"
  ],
  [
   "285",
   "0.0850"
  ],
  [
   "309",
   "0.0850"
  ],
  [
   "315",
   "0.0850"
  ],
  [
   "332",
   "0.0850"
  ],
  [
   "342",
   "0.0850"
  ],
  [
   "379",
   "0.0850"
  ],
  [
   "485",
   "0.0850"
  ],
  [
   "502",
   "0.0850"
  ],
  [
   "515",
   "0.0850"
  ],
  [
   "652",
   "0.0850"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 27,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "139 ms",
  "compare_result": "111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 27,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 235,
  "name": "Your",
  "id": 112344267
 }
}