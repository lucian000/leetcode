{
 "id": 219,
 "ids": "219",
 "state": "notac",
 "name": "Contains Duplicate II",
 "key": "contains-duplicate-ii",
 "link": "https://leetcode.com/problems/contains-duplicate-ii",
 "locked": false,
 "percent": 32.29084451460142,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "114.7K",
 "totalSubmit": "355.1K",
 "desc": "\r\nGiven an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def containsNearbyDuplicate(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool containsNearbyDuplicate(int* nums, int numsSize, int k) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool ContainsNearbyDuplicate(int[] nums, int k) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {boolean}\r\n */\r\nvar containsNearbyDuplicate = function(nums, k) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Boolean}\r\ndef contains_nearby_duplicate(nums, k)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func containsNearbyDuplicate(_ nums: [Int], _ k: Int) -> Bool {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func containsNearbyDuplicate(nums []int, k int) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def containsNearbyDuplicate(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]\\n0'",
 "testable": true,
 "slug": "contains-duplicate-ii",
 "category": "algorithms",
 "fname": "219.contains-duplicate-ii.algorithms.py",
 "test_your": {
  "code_answer": [
   "false"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501820037.57_784204_21"
 },
 "test_expected": {
  "code_answer": [
   "false"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "36 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501820037.58_784204_21"
 },
 "file": "219.contains-duplicate-ii.algorithms.py",
 "submit_chart": [
  [
   "39",
   "0.3006"
  ],
  [
   "42",
   "1.1022"
  ],
  [
   "45",
   "4.6092"
  ],
  [
   "46",
   "1.4028"
  ],
  [
   "48",
   "3.1062"
  ],
  [
   "49",
   "8.7174"
  ],
  [
   "52",
   "14.0281"
  ],
  [
   "53",
   "0.3006"
  ],
  [
   "55",
   "8.9178"
  ],
  [
   "56",
   "5.2104"
  ],
  [
   "58",
   "2.5050"
  ],
  [
   "59",
   "5.6112"
  ],
  [
   "62",
   "8.0160"
  ],
  [
   "63",
   "0.1002"
  ],
  [
   "65",
   "3.6072"
  ],
  [
   "66",
   "3.2064"
  ],
  [
   "68",
   "0.7014"
  ],
  [
   "69",
   "2.4048"
  ],
  [
   "72",
   "3.4068"
  ],
  [
   "75",
   "1.8036"
  ],
  [
   "76",
   "1.0020"
  ],
  [
   "78",
   "0.8016"
  ],
  [
   "79",
   "2.7054"
  ],
  [
   "82",
   "2.4048"
  ],
  [
   "83",
   "0.2004"
  ],
  [
   "85",
   "0.9018"
  ],
  [
   "86",
   "0.9018"
  ],
  [
   "88",
   "1.0020"
  ],
  [
   "89",
   "0.7014"
  ],
  [
   "92",
   "1.2024"
  ],
  [
   "95",
   "0.4008"
  ],
  [
   "96",
   "0.5010"
  ],
  [
   "98",
   "0.1002"
  ],
  [
   "99",
   "0.3006"
  ],
  [
   "102",
   "1.0020"
  ],
  [
   "105",
   "0.5010"
  ],
  [
   "106",
   "0.3006"
  ],
  [
   "108",
   "0.2004"
  ],
  [
   "109",
   "0.4008"
  ],
  [
   "112",
   "0.3006"
  ],
  [
   "115",
   "0.3006"
  ],
  [
   "122",
   "0.2004"
  ],
  [
   "125",
   "0.3006"
  ],
  [
   "126",
   "0.2004"
  ],
  [
   "129",
   "0.1002"
  ],
  [
   "132",
   "0.4008"
  ],
  [
   "135",
   "0.1002"
  ],
  [
   "138",
   "0.1002"
  ],
  [
   "142",
   "0.1002"
  ],
  [
   "149",
   "0.1002"
  ],
  [
   "155",
   "0.1002"
  ],
  [
   "162",
   "0.1002"
  ],
  [
   "165",
   "0.1002"
  ],
  [
   "175",
   "0.1002"
  ],
  [
   "179",
   "0.1002"
  ],
  [
   "182",
   "0.2004"
  ],
  [
   "228",
   "0.1002"
  ],
  [
   "269",
   "0.1002"
  ],
  [
   "272",
   "0.1002"
  ],
  [
   "335",
   "0.1002"
  ],
  [
   "336",
   "0.1002"
  ],
  [
   "342",
   "0.1002"
  ],
  [
   "379",
   "0.1002"
  ],
  [
   "396",
   "0.1002"
  ],
  [
   "405",
   "0.1002"
  ],
  [
   "429",
   "0.1002"
  ],
  [
   "439",
   "0.1002"
  ],
  [
   "445",
   "0.1002"
  ],
  [
   "449",
   "0.2004"
  ],
  [
   "452",
   "0.1002"
  ],
  [
   "455",
   "0.2004"
  ],
  [
   "466",
   "0.1002"
  ],
  [
   "482",
   "0.1002"
  ],
  [
   "492",
   "0.1002"
  ],
  [
   "508",
   "0.1002"
  ],
  [
   "575",
   "0.1002"
  ],
  [
   "649",
   "0.1002"
  ],
  [
   "748",
   "0.1002"
  ],
  [
   "758",
   "0.1002"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 23,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "59 ms",
  "compare_result": "11111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 23,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 219,
  "name": "Your",
  "id": 112431228
 }
}