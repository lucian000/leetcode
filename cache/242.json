{
 "id": 242,
 "ids": "242",
 "state": "None",
 "name": "Valid Anagram",
 "key": "valid-anagram",
 "link": "https://leetcode.com/problems/valid-anagram",
 "locked": false,
 "percent": 46.20345192775567,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "161.4K",
 "totalSubmit": "349.4K",
 "desc": "Given two strings s and t, write a function to determine if t is an anagram of s. \r\n\r\nFor example,\r\ns = \"anagram\", t = \"nagaram\", return true.\r\ns = \"rat\", t = \"car\", return false.\r\n\r\n\r\nNote:\r\nYou may assume the string contains only lowercase alphabets.\r\n\r\nFollow up:\r\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool isAnagram(string s, string t) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean isAnagram(String s, String t) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def isAnagram(self, s, t):\r\n        \"\"\"\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool isAnagram(char* s, char* t) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool IsAnagram(string s, string t) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {boolean}\r\n */\r\nvar isAnagram = function(s, t) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\r\n# @param {String} t\r\n# @return {Boolean}\r\ndef is_anagram(s, t)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func isAnagram(_ s: String, _ t: String) -> Bool {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func isAnagram(s string, t string) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def isAnagram(s: String, t: String): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"\"\\n\"\"'",
 "testable": true,
 "slug": "valid-anagram",
 "category": "algorithms",
 "fname": "242.valid-anagram.algorithms.py",
 "test_your": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502250884.25_784204_15"
 },
 "test_expected": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "3 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502250884.29_784204_15"
 },
 "submit_chart": [
  [
   "32",
   "0.0705"
  ],
  [
   "35",
   "0.1410"
  ],
  [
   "38",
   "0.3526"
  ],
  [
   "39",
   "0.1410"
  ],
  [
   "42",
   "0.5642"
  ],
  [
   "45",
   "0.2821"
  ],
  [
   "46",
   "0.1410"
  ],
  [
   "48",
   "0.1410"
  ],
  [
   "49",
   "0.1410"
  ],
  [
   "52",
   "0.6347"
  ],
  [
   "53",
   "0.2116"
  ],
  [
   "55",
   "0.9168"
  ],
  [
   "56",
   "0.3526"
  ],
  [
   "58",
   "0.7052"
  ],
  [
   "59",
   "1.4810"
  ],
  [
   "62",
   "3.4556"
  ],
  [
   "63",
   "0.2821"
  ],
  [
   "65",
   "2.2567"
  ],
  [
   "66",
   "1.6925"
  ],
  [
   "68",
   "1.4810"
  ],
  [
   "69",
   "3.5966"
  ],
  [
   "72",
   "3.1735"
  ],
  [
   "73",
   "0.1410"
  ],
  [
   "75",
   "2.8209"
  ],
  [
   "76",
   "1.7630"
  ],
  [
   "78",
   "0.7052"
  ],
  [
   "79",
   "1.9746"
  ],
  [
   "82",
   "3.3145"
  ],
  [
   "85",
   "2.8209"
  ],
  [
   "86",
   "2.3977"
  ],
  [
   "88",
   "1.9041"
  ],
  [
   "89",
   "5.5712"
  ],
  [
   "92",
   "7.0522"
  ],
  [
   "93",
   "0.4937"
  ],
  [
   "95",
   "4.8660"
  ],
  [
   "96",
   "3.1735"
  ],
  [
   "98",
   "2.6798"
  ],
  [
   "99",
   "4.3018"
  ],
  [
   "102",
   "4.7955"
  ],
  [
   "103",
   "0.3526"
  ],
  [
   "105",
   "3.6671"
  ],
  [
   "106",
   "1.5515"
  ],
  [
   "108",
   "1.1989"
  ],
  [
   "109",
   "2.2567"
  ],
  [
   "112",
   "2.1157"
  ],
  [
   "113",
   "0.0705"
  ],
  [
   "115",
   "1.8336"
  ],
  [
   "116",
   "0.5642"
  ],
  [
   "118",
   "0.7052"
  ],
  [
   "119",
   "1.9746"
  ],
  [
   "122",
   "1.2694"
  ],
  [
   "125",
   "0.4231"
  ],
  [
   "126",
   "0.2821"
  ],
  [
   "128",
   "0.5642"
  ],
  [
   "129",
   "0.9873"
  ],
  [
   "132",
   "0.6347"
  ],
  [
   "135",
   "0.4231"
  ],
  [
   "138",
   "0.1410"
  ],
  [
   "139",
   "0.2116"
  ],
  [
   "142",
   "0.4937"
  ],
  [
   "145",
   "0.4231"
  ],
  [
   "146",
   "0.1410"
  ],
  [
   "148",
   "0.0705"
  ],
  [
   "149",
   "0.2821"
  ],
  [
   "152",
   "0.2116"
  ],
  [
   "155",
   "0.1410"
  ],
  [
   "156",
   "0.1410"
  ],
  [
   "158",
   "0.2116"
  ],
  [
   "162",
   "0.2116"
  ],
  [
   "165",
   "0.2821"
  ],
  [
   "166",
   "0.0705"
  ],
  [
   "168",
   "0.0705"
  ],
  [
   "169",
   "0.3526"
  ],
  [
   "172",
   "0.2821"
  ],
  [
   "175",
   "0.0705"
  ],
  [
   "179",
   "0.1410"
  ],
  [
   "182",
   "0.4231"
  ],
  [
   "185",
   "0.0705"
  ],
  [
   "189",
   "0.0705"
  ],
  [
   "192",
   "0.1410"
  ],
  [
   "196",
   "0.1410"
  ],
  [
   "209",
   "0.1410"
  ],
  [
   "215",
   "0.0705"
  ],
  [
   "225",
   "0.0705"
  ],
  [
   "229",
   "0.0705"
  ],
  [
   "258",
   "0.0705"
  ],
  [
   "312",
   "0.0705"
  ],
  [
   "342",
   "0.0705"
  ],
  [
   "356",
   "0.0705"
  ],
  [
   "362",
   "0.0705"
  ],
  [
   "785",
   "0.0705"
  ],
  [
   "792",
   "0.0705"
  ],
  [
   "799",
   "0.0705"
  ],
  [
   "812",
   "0.0705"
  ],
  [
   "855",
   "0.0705"
  ],
  [
   "882",
   "0.0705"
  ],
  [
   "932",
   "0.0705"
  ],
  [
   "1429",
   "0.0705"
  ],
  [
   "1622",
   "0.0705"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 34,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "108 ms",
  "compare_result": "1111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 34,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 242,
  "name": "Your",
  "id": 113105249
 }
}