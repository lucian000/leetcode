{
 "id": 526,
 "ids": "526",
 "state": "None",
 "name": "Beautiful Arrangement",
 "key": "beautiful-arrangement",
 "link": "https://leetcode.com/problems/beautiful-arrangement",
 "locked": false,
 "percent": 55.227588948519184,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "",
 "totalSubmit": "",
 "desc": "\r\nSuppose you have N integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these N numbers successfully if one of the following is true for the ith position (1 ? i ? N) in this array:\r\n\r\nThe number at the ith position is divisible by i.\r\ni is divisible by the number at the ith position.\r\n\r\n\r\n\r\n\r\nNow given N, how many beautiful arrangements can you construct?\r\n\r\n\r\nExample 1:\r\n\r\nInput: 2\r\nOutput: 2\r\nExplanation: \r\nThe first beautiful arrangement is [1, 2]:\r\nNumber at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).\r\nNumber at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).\r\nThe second beautiful arrangement is [2, 1]:\r\nNumber at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).\r\nNumber at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.\r\n\r\n\r\n\r\nNote:\r\n\r\nN is a positive integer and will not exceed 15.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\npublic:\n    int countArrangement(int N) {\n        \n    }\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\n    public int countArrangement(int N) {\n        \n    }\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\n    def countArrangement(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int countArrangement(int N) {\n    \n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\n    public int CountArrangement(int N) {\n        \n    }\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\n * @param {number} N\n * @return {number}\n */\nvar countArrangement = function(N) {\n    \n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} n\n# @return {Integer}\ndef count_arrangement(n)\n    \nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func countArrangement(_ N: Int) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func countArrangement(N int) int {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def countArrangement(N: Int): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'2'",
 "testable": true
}