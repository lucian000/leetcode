{
 "id": 572,
 "ids": "572",
 "state": "ac",
 "name": "Subtree of Another Tree",
 "key": "subtree-of-another-tree",
 "link": "https://leetcode.com/problems/subtree-of-another-tree",
 "locked": false,
 "percent": 40.81228184345974,
 "level": "Easy",
 "starred": true,
 "loaded": true,
 "totalAC": "13.8K",
 "totalSubmit": "33.8K",
 "desc": "\r\nGiven two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.\r\n\r\n\r\nExample 1:\r\n\r\nGiven tree s:\r\n\r\n     3\r\n    / \\\r\n   4   5\r\n  / \\\r\n 1   2\r\n\r\nGiven tree t:\r\n\r\n   4 \r\n  / \\\r\n 1   2\r\n\r\nReturn true, because t has the same structure and node values with a subtree of s.\r\n\r\n\r\nExample 2:\r\n\r\nGiven tree s:\r\n\r\n     3\r\n    / \\\r\n   4   5\r\n  / \\\r\n 1   2\r\n    /\r\n   0\r\n\r\nGiven tree t:\r\n\r\n   4\r\n  / \\\r\n 1   2\r\n\r\nReturn false.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSubtree(TreeNode* s, TreeNode* t) {\n        \n    }\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public boolean isSubtree(TreeNode s, TreeNode t) {\n        \n    }\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSubtree(self, s, t):\n        \"\"\"\n        :type s: TreeNode\n        :type t: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\n    def isSubtree(self, s, t):\n        \"\"\"\n        :type s: TreeNode\n        :type t: TreeNode\n        :rtype: bool\n        \"\"\"\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool isSubtree(struct TreeNode* s, struct TreeNode* t) {\n    \n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public bool IsSubtree(TreeNode s, TreeNode t) {\n        \n    }\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} s\n * @param {TreeNode} t\n * @return {boolean}\n */\nvar isSubtree = function(s, t) {\n    \n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} s\n# @param {TreeNode} t\n# @return {Boolean}\ndef is_subtree(s, t)\n    \nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func isSubtree(_ s: TreeNode?, _ t: TreeNode?) -> Bool {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSubtree(s *TreeNode, t *TreeNode) bool {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def isSubtree(s: TreeNode, t: TreeNode): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[3,4,5,1,2]\\n[4,1,2]'",
 "testable": true,
 "slug": "subtree-of-another-tree",
 "category": "algorithms",
 "fname": "572.subtree-of-another-tree.algorithms.py"
}