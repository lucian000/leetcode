{
 "id": 44,
 "ids": "44",
 "state": "None",
 "name": "Wildcard Matching",
 "key": "wildcard-matching",
 "link": "https://leetcode.com/problems/wildcard-matching",
 "locked": false,
 "percent": 19.889131530320846,
 "level": "Hard",
 "starred": false,
 "loaded": true,
 "totalAC": "",
 "totalSubmit": "",
 "desc": "Implement wildcard pattern matching with support for '?' and '*'.\r\n\r\n\r\n'?' Matches any single character.\r\n'*' Matches any sequence of characters (including the empty sequence).\r\n\r\nThe matching should cover the entire input string (not partial).\r\n\r\nThe function prototype should be:\r\nbool isMatch(const char *s, const char *p)\r\n\r\nSome examples:\r\nisMatch(\"aa\",\"a\") ? false\r\nisMatch(\"aa\",\"aa\") ? true\r\nisMatch(\"aaa\",\"aa\") ? false\r\nisMatch(\"aa\", \"*\") ? true\r\nisMatch(\"aa\", \"a*\") ? true\r\nisMatch(\"ab\", \"?*\") ? true\r\nisMatch(\"aab\", \"c*a*b\") ? false\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool isMatch(string s, string p) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean isMatch(String s, String p) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def isMatch(self, s, p):\r\n        \"\"\"\r\n        :type s: str\r\n        :type p: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def isMatch(self, s, p):\r\n        \"\"\"\r\n        :type s: str\r\n        :type p: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool isMatch(char* s, char* p) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool IsMatch(string s, string p) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} s\r\n * @param {string} p\r\n * @return {boolean}\r\n */\r\nvar isMatch = function(s, p) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\r\n# @param {String} p\r\n# @return {Boolean}\r\ndef is_match(s, p)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func isMatch(_ s: String, _ p: String) -> Bool {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func isMatch(s string, p string) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def isMatch(s: String, p: String): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"aa\"\\n\"a\"'",
 "testable": true
}