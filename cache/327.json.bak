{
 "id": 327,
 "ids": "327",
 "state": "None",
 "name": "Count of Range Sum",
 "key": "count-of-range-sum",
 "link": "https://leetcode.com/problems/count-of-range-sum",
 "locked": false,
 "percent": 29.541831399056242,
 "level": "Hard",
 "starred": false,
 "loaded": true,
 "totalAC": "18.5K",
 "totalSubmit": "62.7K",
 "desc": "\r\n    Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.\r\n\r\n    Range sum S(i, j) is defined as the sum of the elements in nums between indices i and \r\n    j (i ? j), inclusive.\r\n\r\n\r\n\r\n    Note:\r\n    A naive algorithm of O(n2) is trivial. You MUST do better than that.\r\n\r\n\r\n    Example:\r\n    Given nums = [-2, 5, -1], lower = -2, upper = 2,\r\n    Return 3.\r\n    The three ranges are : [0, 0], [2, 2], [0, 2] and their respective sums are: -2, -1, 2.\r\n\r\n\r\nCredits:Special thanks to @dietpepsi for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int countRangeSum(vector<int>& nums, int lower, int upper) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int countRangeSum(int[] nums, int lower, int upper) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def countRangeSum(self, nums, lower, upper):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type lower: int\r\n        :type upper: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int countRangeSum(int* nums, int numsSize, int lower, int upper) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int CountRangeSum(int[] nums, int lower, int upper) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} lower\r\n * @param {number} upper\r\n * @return {number}\r\n */\r\nvar countRangeSum = function(nums, lower, upper) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @param {Integer} lower\r\n# @param {Integer} upper\r\n# @return {Integer}\r\ndef count_range_sum(nums, lower, upper)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func countRangeSum(_ nums: [Int], _ lower: Int, _ upper: Int) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func countRangeSum(nums []int, lower int, upper int) int {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def countRangeSum(nums: Array[Int], lower: Int, upper: Int): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[-2,5,-1]\\n-2\\n2'",
 "testable": true,
 "slug": "count-of-range-sum",
 "category": "algorithms",
 "fname": "327.count-of-range-sum.algorithms.py"
}