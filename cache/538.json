{
 "id": 538,
 "ids": "538",
 "state": "None",
 "name": "Convert BST to Greater Tree",
 "key": "convert-bst-to-greater-tree",
 "link": "https://leetcode.com/problems/convert-bst-to-greater-tree",
 "locked": false,
 "percent": 51.892842745629785,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "14.2K",
 "totalSubmit": "27.3K",
 "desc": "Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.\r\n\r\n\r\nExample:\r\n\r\nInput: The root of a Binary Search Tree like this:\r\n              5\r\n            /   \\\r\n           2     13\r\n\r\nOutput: The root of a Greater Tree like this:\r\n             18\r\n            /   \\\r\n          20     13\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* convertBST(TreeNode* root) {\n        \n    }\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode convertBST(TreeNode root) {\n        \n    }\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def convertBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* convertBST(struct TreeNode* root) {\n    \n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode ConvertBST(TreeNode root) {\n        \n    }\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar convertBST = function(root) {\n    \n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {TreeNode}\ndef convert_bst(root)\n    \nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func convertBST(_ root: TreeNode?) -> TreeNode? {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc convertBST(root *TreeNode) *TreeNode {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def convertBST(root: TreeNode): TreeNode = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[5,2,13]'",
 "testable": true,
 "slug": "convert-bst-to-greater-tree",
 "category": "algorithms",
 "fname": "538.convert-bst-to-greater-tree.algorithms.py",
 "test_your": {
  "code_answer": [
   "[18,20,13]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502677498.16_784204_41"
 },
 "test_expected": {
  "code_answer": [
   "[18,20,13]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502677498.19_784204_41"
 },
 "submit_chart": [
  [
   "95",
   "0.1825"
  ],
  [
   "98",
   "0.2737"
  ],
  [
   "99",
   "0.6387"
  ],
  [
   "102",
   "2.9197"
  ],
  [
   "103",
   "0.0912"
  ],
  [
   "105",
   "3.1022"
  ],
  [
   "106",
   "1.5511"
  ],
  [
   "108",
   "2.4635"
  ],
  [
   "109",
   "4.1058"
  ],
  [
   "112",
   "8.3942"
  ],
  [
   "113",
   "0.1825"
  ],
  [
   "115",
   "4.1971"
  ],
  [
   "116",
   "2.0073"
  ],
  [
   "118",
   "1.3686"
  ],
  [
   "119",
   "6.4781"
  ],
  [
   "122",
   "7.2993"
  ],
  [
   "123",
   "0.0912"
  ],
  [
   "125",
   "4.1971"
  ],
  [
   "126",
   "2.0985"
  ],
  [
   "128",
   "2.1898"
  ],
  [
   "129",
   "3.8321"
  ],
  [
   "132",
   "4.0146"
  ],
  [
   "135",
   "3.5584"
  ],
  [
   "136",
   "1.3686"
  ],
  [
   "138",
   "0.4562"
  ],
  [
   "139",
   "2.5547"
  ],
  [
   "142",
   "2.6460"
  ],
  [
   "145",
   "2.4635"
  ],
  [
   "146",
   "0.8212"
  ],
  [
   "148",
   "1.0036"
  ],
  [
   "149",
   "1.8248"
  ],
  [
   "152",
   "1.4599"
  ],
  [
   "155",
   "1.1861"
  ],
  [
   "156",
   "0.5474"
  ],
  [
   "158",
   "0.5474"
  ],
  [
   "159",
   "1.0949"
  ],
  [
   "162",
   "1.1861"
  ],
  [
   "165",
   "0.6387"
  ],
  [
   "166",
   "0.6387"
  ],
  [
   "168",
   "0.3650"
  ],
  [
   "169",
   "0.6387"
  ],
  [
   "172",
   "1.0036"
  ],
  [
   "175",
   "0.1825"
  ],
  [
   "176",
   "0.2737"
  ],
  [
   "178",
   "0.1825"
  ],
  [
   "179",
   "0.3650"
  ],
  [
   "182",
   "0.2737"
  ],
  [
   "185",
   "0.1825"
  ],
  [
   "186",
   "0.0912"
  ],
  [
   "188",
   "0.1825"
  ],
  [
   "189",
   "0.2737"
  ],
  [
   "192",
   "0.4562"
  ],
  [
   "195",
   "0.1825"
  ],
  [
   "196",
   "0.1825"
  ],
  [
   "198",
   "0.1825"
  ],
  [
   "199",
   "0.0912"
  ],
  [
   "202",
   "0.3650"
  ],
  [
   "205",
   "0.0912"
  ],
  [
   "208",
   "0.0912"
  ],
  [
   "209",
   "0.2737"
  ],
  [
   "212",
   "0.5474"
  ],
  [
   "215",
   "0.0912"
  ],
  [
   "216",
   "0.0912"
  ],
  [
   "218",
   "0.0912"
  ],
  [
   "219",
   "0.1825"
  ],
  [
   "222",
   "0.1825"
  ],
  [
   "225",
   "0.1825"
  ],
  [
   "226",
   "0.0912"
  ],
  [
   "232",
   "0.0912"
  ],
  [
   "235",
   "0.0912"
  ],
  [
   "239",
   "0.1825"
  ],
  [
   "242",
   "0.1825"
  ],
  [
   "245",
   "0.0912"
  ],
  [
   "248",
   "0.0912"
  ],
  [
   "258",
   "0.0912"
  ],
  [
   "262",
   "0.1825"
  ],
  [
   "276",
   "0.0912"
  ],
  [
   "289",
   "0.0912"
  ],
  [
   "299",
   "0.0912"
  ],
  [
   "322",
   "0.0912"
  ],
  [
   "335",
   "0.0912"
  ],
  [
   "348",
   "0.0912"
  ],
  [
   "356",
   "0.0912"
  ],
  [
   "368",
   "0.0912"
  ],
  [
   "482",
   "0.0912"
  ],
  [
   "495",
   "0.0912"
  ],
  [
   "505",
   "0.1825"
  ],
  [
   "512",
   "0.0912"
  ],
  [
   "522",
   "0.0912"
  ],
  [
   "549",
   "0.0912"
  ],
  [
   "555",
   "0.0912"
  ],
  [
   "559",
   "0.0912"
  ],
  [
   "572",
   "0.0912"
  ],
  [
   "716",
   "0.0912"
  ],
  [
   "722",
   "0.0912"
  ],
  [
   "725",
   "0.0912"
  ],
  [
   "742",
   "0.1825"
  ],
  [
   "749",
   "0.0912"
  ],
  [
   "792",
   "0.0912"
  ],
  [
   "809",
   "0.0912"
  ],
  [
   "816",
   "0.0912"
  ],
  [
   "829",
   "0.0912"
  ],
  [
   "836",
   "0.0912"
  ],
  [
   "839",
   "0.0912"
  ],
  [
   "842",
   "0.0912"
  ],
  [
   "942",
   "0.0912"
  ],
  [
   "962",
   "0.0912"
  ],
  [
   "1055",
   "0.0912"
  ],
  [
   "1312",
   "0.0912"
  ],
  [
   "1352",
   "0.0912"
  ],
  [
   "1359",
   "0.0912"
  ],
  [
   "1379",
   "0.0912"
  ],
  [
   "1385",
   "0.0912"
  ],
  [
   "1389",
   "0.0912"
  ],
  [
   "1398",
   "0.0912"
  ],
  [
   "1399",
   "0.0912"
  ],
  [
   "1405",
   "0.1825"
  ],
  [
   "1422",
   "0.0912"
  ],
  [
   "1425",
   "0.0912"
  ],
  [
   "1429",
   "0.0912"
  ],
  [
   "1445",
   "0.0912"
  ],
  [
   "1449",
   "0.0912"
  ],
  [
   "1455",
   "0.0912"
  ],
  [
   "1469",
   "0.1825"
  ],
  [
   "1472",
   "0.0912"
  ],
  [
   "1482",
   "0.0912"
  ],
  [
   "1485",
   "0.0912"
  ],
  [
   "1492",
   "0.0912"
  ],
  [
   "1512",
   "0.0912"
  ],
  [
   "1515",
   "0.0912"
  ],
  [
   "1529",
   "0.0912"
  ],
  [
   "1595",
   "0.0912"
  ],
  [
   "1598",
   "0.0912"
  ],
  [
   "1599",
   "0.0912"
  ],
  [
   "1602",
   "0.0912"
  ],
  [
   "1619",
   "0.0912"
  ],
  [
   "1645",
   "0.0912"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 212,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "162 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 212,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 538,
  "name": "Your",
  "id": 113775189
 }
}