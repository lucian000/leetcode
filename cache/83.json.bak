{
 "id": 83,
 "ids": "83",
 "state": "None",
 "name": "Remove Duplicates from Sorted List",
 "key": "remove-duplicates-from-sorted-list",
 "link": "https://leetcode.com/problems/remove-duplicates-from-sorted-list",
 "locked": false,
 "percent": 39.73929585196975,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "186.8K",
 "totalSubmit": "470K",
 "desc": "\r\nGiven a sorted linked list, delete all duplicates such that each element appear only once.\r\n\r\n\r\nFor example,\r\nGiven 1->1->2, return 1->2.\r\nGiven 1->1->2->3->3, return 1->2->3.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* deleteDuplicates(ListNode* head) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode deleteDuplicates(ListNode head) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def deleteDuplicates(self, head):\r\n        \"\"\"\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode DeleteDuplicates(ListNode head) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar deleteDuplicates = function(head) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {ListNode}\r\ndef delete_duplicates(head)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func deleteDuplicates(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc deleteDuplicates(head *ListNode) *ListNode {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def deleteDuplicates(head: ListNode): ListNode = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]'",
 "testable": true,
 "slug": "remove-duplicates-from-sorted-list",
 "category": "algorithms",
 "fname": "83.remove-duplicates-from-sorted-list.algorithms.py",
 "test_your": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500792366.28_784204_13"
 },
 "test_expected": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500792366.3_784204_13"
 },
 "submit_chart": [
  [
   "45",
   "0.6706"
  ],
  [
   "46",
   "0.4191"
  ],
  [
   "48",
   "2.4308"
  ],
  [
   "49",
   "5.6999"
  ],
  [
   "52",
   "13.7469"
  ],
  [
   "53",
   "1.1735"
  ],
  [
   "55",
   "8.6337"
  ],
  [
   "56",
   "5.6999"
  ],
  [
   "58",
   "4.0235"
  ],
  [
   "59",
   "8.9690"
  ],
  [
   "62",
   "10.2263"
  ],
  [
   "63",
   "0.2515"
  ],
  [
   "65",
   "4.7779"
  ],
  [
   "66",
   "3.1852"
  ],
  [
   "68",
   "1.9279"
  ],
  [
   "69",
   "4.5264"
  ],
  [
   "72",
   "4.8617"
  ],
  [
   "75",
   "2.0117"
  ],
  [
   "76",
   "1.0897"
  ],
  [
   "78",
   "1.0059"
  ],
  [
   "79",
   "1.8441"
  ],
  [
   "82",
   "2.0956"
  ],
  [
   "85",
   "1.5926"
  ],
  [
   "86",
   "0.4191"
  ],
  [
   "88",
   "0.5868"
  ],
  [
   "89",
   "0.7544"
  ],
  [
   "92",
   "2.0956"
  ],
  [
   "93",
   "0.0838"
  ],
  [
   "95",
   "1.0059"
  ],
  [
   "96",
   "0.4191"
  ],
  [
   "98",
   "0.3353"
  ],
  [
   "99",
   "0.5029"
  ],
  [
   "102",
   "0.5029"
  ],
  [
   "105",
   "0.3353"
  ],
  [
   "106",
   "0.2515"
  ],
  [
   "108",
   "0.1676"
  ],
  [
   "109",
   "0.6706"
  ],
  [
   "112",
   "0.0838"
  ],
  [
   "115",
   "0.0838"
  ],
  [
   "116",
   "0.0838"
  ],
  [
   "118",
   "0.0838"
  ],
  [
   "119",
   "0.0838"
  ],
  [
   "125",
   "0.0838"
  ],
  [
   "152",
   "0.0838"
  ],
  [
   "175",
   "0.0838"
  ],
  [
   "179",
   "0.1676"
  ],
  [
   "185",
   "0.0838"
  ],
  [
   "259",
   "0.0838"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 164,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "82 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 164,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 83,
  "name": "Your",
  "id": 110773050
 }
}