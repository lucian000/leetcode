{"id": 118, "ids": "118", "state": "None", "name": "Pascal's Triangle", "key": "pascals-triangle", "link": "https://leetcode.com/problems/pascals-triangle", "locked": false, "percent": 38.269989150837795, "level": "Easy", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "Given numRows, generate the first numRows of Pascal's triangle.\r\n\r\n\r\nFor example, given numRows = 5,\r\nReturn\r\n\r\n[\r\n     [1],\r\n    [1,1],\r\n   [1,2,1],\r\n  [1,3,3,1],\r\n [1,4,6,4,1]\r\n]\r\n\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    vector<vector<int>> generate(int numRows) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public List<List<Integer>> generate(int numRows) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def generate(self, numRows):\r\n        \"\"\"\r\n        :type numRows: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "/**\r\n * Return an array of arrays.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** generate(int numRows, int** columnSizes) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public IList<IList<int>> Generate(int numRows) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number} numRows\r\n * @return {number[][]}\r\n */\r\nvar generate = function(numRows) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer} num_rows\r\n# @return {Integer[][]}\r\ndef generate(num_rows)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\n    func generate(_ numRows: Int) -> [[Int]] {\n        \n    }\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func generate(numRows int) [][]int {\n    \n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def generate(numRows: Int): List[List[Int]] = {\n        \n    }\n}"}], "testcase": "'0'", "testable": true}