{
 "id": 479,
 "ids": "479",
 "state": "notac",
 "name": "Largest Palindrome Product",
 "key": "largest-palindrome-product",
 "link": "https://leetcode.com/problems/largest-palindrome-product",
 "locked": false,
 "percent": 21.196524434113677,
 "level": "Easy",
 "starred": true,
 "loaded": true,
 "totalAC": "3.9K",
 "totalSubmit": "18.2K",
 "desc": "Find the largest palindrome made from the product of two n-digit numbers.\r\n Since the result could be very large, you should return the largest palindrome mod 1337.\r\n\r\nExample:\r\nInput: 2\r\nOutput: 987\r\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\r\n\r\n\r\n\r\n\r\nNote:\r\nThe range of n is [1,8].\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int largestPalindrome(int n) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int largestPalindrome(int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def largestPalindrome(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int largestPalindrome(int n) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int LargestPalindrome(int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar largestPalindrome = function(n) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} n\r\n# @return {Integer}\r\ndef largest_palindrome(n)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func largestPalindrome(_ n: Int) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func largestPalindrome(n int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def largestPalindrome(n: Int): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'1'",
 "testable": true,
 "slug": "largest-palindrome-product",
 "category": "algorithms",
 "fname": "479.largest-palindrome-product.algorithms.py",
 "test_your": {
  "code_answer": [
   "9"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "45 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501949401.24_784204_14"
 },
 "test_expected": {
  "code_answer": [
   "9"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "55 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501949401.26_784204_14"
 },
 "file": "479.largest-palindrome-product.algorithms.py",
 "submit_chart": [
  [
   "26",
   "0.7937"
  ],
  [
   "28",
   "2.3810"
  ],
  [
   "29",
   "5.5556"
  ],
  [
   "32",
   "12.6984"
  ],
  [
   "33",
   "1.5873"
  ],
  [
   "35",
   "6.3492"
  ],
  [
   "36",
   "6.3492"
  ],
  [
   "38",
   "2.3810"
  ],
  [
   "39",
   "6.3492"
  ],
  [
   "42",
   "8.7302"
  ],
  [
   "45",
   "3.1746"
  ],
  [
   "49",
   "3.1746"
  ],
  [
   "52",
   "1.5873"
  ],
  [
   "55",
   "0.7937"
  ],
  [
   "95",
   "0.7937"
  ],
  [
   "185",
   "0.7937"
  ],
  [
   "326",
   "0.7937"
  ],
  [
   "352",
   "0.7937"
  ],
  [
   "372",
   "0.7937"
  ],
  [
   "378",
   "0.7937"
  ],
  [
   "425",
   "0.7937"
  ],
  [
   "449",
   "1.5873"
  ],
  [
   "569",
   "0.7937"
  ],
  [
   "622",
   "0.7937"
  ],
  [
   "635",
   "0.7937"
  ],
  [
   "639",
   "0.7937"
  ],
  [
   "665",
   "0.7937"
  ],
  [
   "678",
   "0.7937"
  ],
  [
   "703",
   "0.7937"
  ],
  [
   "708",
   "0.7937"
  ],
  [
   "742",
   "0.7937"
  ],
  [
   "759",
   "0.7937"
  ],
  [
   "855",
   "0.7937"
  ],
  [
   "895",
   "0.7937"
  ],
  [
   "902",
   "0.7937"
  ],
  [
   "949",
   "0.7937"
  ],
  [
   "952",
   "1.5873"
  ],
  [
   "965",
   "0.7937"
  ],
  [
   "979",
   "1.5873"
  ],
  [
   "982",
   "0.7937"
  ],
  [
   "986",
   "0.7937"
  ],
  [
   "995",
   "0.7937"
  ],
  [
   "1002",
   "0.7937"
  ],
  [
   "1012",
   "1.5873"
  ],
  [
   "1016",
   "0.7937"
  ],
  [
   "1019",
   "0.7937"
  ],
  [
   "1032",
   "0.7937"
  ],
  [
   "1036",
   "0.7937"
  ],
  [
   "1045",
   "0.7937"
  ],
  [
   "1052",
   "0.7937"
  ],
  [
   "1058",
   "1.5873"
  ],
  [
   "1069",
   "0.7937"
  ],
  [
   "1125",
   "0.7937"
  ],
  [
   "1189",
   "0.7937"
  ],
  [
   "1216",
   "0.7937"
  ],
  [
   "1279",
   "1.5873"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 8,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "35 ms",
  "compare_result": "11111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 8,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 479,
  "name": "Your",
  "id": 112605091
 }
}