{
 "id": 257,
 "ids": "257",
 "state": "None",
 "name": "Binary Tree Paths",
 "key": "binary-tree-paths",
 "link": "https://leetcode.com/problems/binary-tree-paths",
 "locked": false,
 "percent": 37.9598825010491,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "113.1K",
 "totalSubmit": "297.9K",
 "desc": "\r\nGiven a binary tree, return all root-to-leaf paths.\r\n\r\n\r\nFor example, given the following binary tree:\r\n\r\n\r\n\r\n   1\r\n /   \\\r\n2     3\r\n \\\r\n  5\r\n\r\n\r\n\r\nAll root-to-leaf paths are:\r\n[\"1->2->5\", \"1->3\"]\r\n\r\n\r\nCredits:Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<string> binaryTreePaths(TreeNode* root) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public List<String> binaryTreePaths(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def binaryTreePaths(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** binaryTreePaths(struct TreeNode* root, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<string> BinaryTreePaths(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {string[]}\r\n */\r\nvar binaryTreePaths = function(root) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {String[]}\r\ndef binary_tree_paths(root)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func binaryTreePaths(_ root: TreeNode?) -> [String] {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc binaryTreePaths(root *TreeNode) []string {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def binaryTreePaths(root: TreeNode): List[String] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,2,3,null,5]'",
 "testable": true,
 "slug": "binary-tree-paths",
 "category": "algorithms",
 "fname": "257.binary-tree-paths.algorithms.py",
 "test_your": {
  "code_answer": [
   "[\"1->2->5\",\"1->3\"]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502250568.68_784204_11"
 },
 "test_expected": {
  "code_answer": [
   "[\"1->2->5\",\"1->3\"]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "3 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502250568.7_784204_11"
 },
 "submit_chart": [
  [
   "35",
   "0.4230"
  ],
  [
   "36",
   "0.5076"
  ],
  [
   "38",
   "1.9459"
  ],
  [
   "39",
   "7.6988"
  ],
  [
   "42",
   "20.3892"
  ],
  [
   "43",
   "1.2690"
  ],
  [
   "45",
   "13.6210"
  ],
  [
   "46",
   "6.1760"
  ],
  [
   "48",
   "3.6379"
  ],
  [
   "49",
   "10.4907"
  ],
  [
   "52",
   "10.8291"
  ],
  [
   "53",
   "0.1692"
  ],
  [
   "55",
   "4.8223"
  ],
  [
   "56",
   "2.6227"
  ],
  [
   "58",
   "0.9306"
  ],
  [
   "59",
   "2.2843"
  ],
  [
   "62",
   "3.0457"
  ],
  [
   "65",
   "1.6920"
  ],
  [
   "66",
   "1.0152"
  ],
  [
   "68",
   "0.4230"
  ],
  [
   "69",
   "2.0305"
  ],
  [
   "72",
   "1.4382"
  ],
  [
   "75",
   "0.8460"
  ],
  [
   "78",
   "0.2538"
  ],
  [
   "79",
   "0.4230"
  ],
  [
   "82",
   "0.1692"
  ],
  [
   "85",
   "0.0846"
  ],
  [
   "89",
   "0.0846"
  ],
  [
   "92",
   "0.0846"
  ],
  [
   "99",
   "0.1692"
  ],
  [
   "102",
   "0.0846"
  ],
  [
   "115",
   "0.0846"
  ],
  [
   "119",
   "0.0846"
  ],
  [
   "145",
   "0.0846"
  ],
  [
   "222",
   "0.0846"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 209,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "46 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 209,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 257,
  "name": "Your",
  "id": 113104656
 }
}