{
 "id": 448,
 "ids": "448",
 "state": "None",
 "name": "Find All Numbers Disappeared in an Array",
 "key": "find-all-numbers-disappeared-in-an-array",
 "link": "https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array",
 "locked": false,
 "percent": 51.73309597491177,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "50K",
 "totalSubmit": "96.6K",
 "desc": "Given an array of integers where 1 \u2264 a[i] \u2264 n (n = size of array), some elements appear twice and others appear once.\r\n\r\nFind all the elements of [1, n] inclusive that do not appear in this array.\r\n\r\nCould you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.\r\n\r\nExample:\r\n\r\nInput:\r\n[4,3,2,7,8,2,3,1]\r\n\r\nOutput:\r\n[5,6]\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public List<Integer> findDisappearedNumbers(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def findDisappearedNumbers(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def findDisappearedNumbers(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public IList<int> FindDisappearedNumbers(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar findDisappearedNumbers = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef find_disappeared_numbers(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func findDisappearedNumbers(_ nums: [Int]) -> [Int] {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func findDisappearedNumbers(nums []int) []int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\r\n    def findDisappearedNumbers(nums: Array[Int]): List[Int] = {\r\n        \r\n    }\r\n}"
  }
 ],
 "testcase": "'[4,3,2,7,8,2,3,1]'",
 "testable": true,
 "slug": "find-all-numbers-disappeared-in-an-array",
 "category": "algorithms",
 "fname": "448.find-all-numbers-disappeared-in-an-array.algorithms.py",
 "test_your": {
  "code_answer": [
   "[5,6]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500989276.02_784204_27"
 },
 "test_expected": {
  "code_answer": [
   "[5,6]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "0",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500989276.06_784204_27"
 },
 "submit_chart": [
  [
   "222",
   "0.0778"
  ],
  [
   "225",
   "0.2333"
  ],
  [
   "229",
   "0.0778"
  ],
  [
   "232",
   "0.5443"
  ],
  [
   "235",
   "0.5443"
  ],
  [
   "236",
   "0.1555"
  ],
  [
   "238",
   "0.0778"
  ],
  [
   "239",
   "0.5443"
  ],
  [
   "242",
   "1.0886"
  ],
  [
   "245",
   "0.7776"
  ],
  [
   "246",
   "0.7776"
  ],
  [
   "248",
   "0.3888"
  ],
  [
   "249",
   "0.9331"
  ],
  [
   "252",
   "1.2442"
  ],
  [
   "255",
   "1.2442"
  ],
  [
   "256",
   "0.4666"
  ],
  [
   "258",
   "0.3888"
  ],
  [
   "259",
   "0.7776"
  ],
  [
   "262",
   "1.3997"
  ],
  [
   "265",
   "1.0886"
  ],
  [
   "266",
   "0.4666"
  ],
  [
   "268",
   "0.3888"
  ],
  [
   "269",
   "0.7776"
  ],
  [
   "272",
   "1.5552"
  ],
  [
   "275",
   "1.0886"
  ],
  [
   "276",
   "0.1555"
  ],
  [
   "278",
   "0.3888"
  ],
  [
   "279",
   "1.0886"
  ],
  [
   "282",
   "1.3219"
  ],
  [
   "285",
   "1.2442"
  ],
  [
   "286",
   "0.7776"
  ],
  [
   "288",
   "1.0109"
  ],
  [
   "289",
   "1.2442"
  ],
  [
   "292",
   "1.3997"
  ],
  [
   "293",
   "0.0778"
  ],
  [
   "295",
   "0.6998"
  ],
  [
   "296",
   "0.5443"
  ],
  [
   "298",
   "0.6221"
  ],
  [
   "299",
   "1.3219"
  ],
  [
   "302",
   "2.4106"
  ],
  [
   "305",
   "0.8554"
  ],
  [
   "306",
   "0.7776"
  ],
  [
   "308",
   "0.4666"
  ],
  [
   "309",
   "1.0109"
  ],
  [
   "312",
   "2.0995"
  ],
  [
   "315",
   "1.0109"
  ],
  [
   "316",
   "0.4666"
  ],
  [
   "318",
   "1.0109"
  ],
  [
   "319",
   "1.6330"
  ],
  [
   "322",
   "2.1773"
  ],
  [
   "325",
   "1.6330"
  ],
  [
   "326",
   "0.6998"
  ],
  [
   "328",
   "0.5443"
  ],
  [
   "329",
   "1.0109"
  ],
  [
   "332",
   "1.6330"
  ],
  [
   "335",
   "1.2442"
  ],
  [
   "336",
   "1.0886"
  ],
  [
   "338",
   "0.7776"
  ],
  [
   "339",
   "1.0886"
  ],
  [
   "342",
   "2.4106"
  ],
  [
   "345",
   "1.3219"
  ],
  [
   "346",
   "0.5443"
  ],
  [
   "348",
   "0.3888"
  ],
  [
   "349",
   "1.1664"
  ],
  [
   "352",
   "0.8554"
  ],
  [
   "355",
   "1.0109"
  ],
  [
   "356",
   "0.3888"
  ],
  [
   "358",
   "0.5443"
  ],
  [
   "359",
   "0.9331"
  ],
  [
   "362",
   "1.4774"
  ],
  [
   "365",
   "1.0886"
  ],
  [
   "366",
   "0.4666"
  ],
  [
   "368",
   "0.6221"
  ],
  [
   "369",
   "0.9331"
  ],
  [
   "372",
   "1.6330"
  ],
  [
   "375",
   "0.9331"
  ],
  [
   "376",
   "0.6221"
  ],
  [
   "378",
   "0.3110"
  ],
  [
   "379",
   "0.9331"
  ],
  [
   "382",
   "1.0109"
  ],
  [
   "385",
   "1.0109"
  ],
  [
   "386",
   "0.3888"
  ],
  [
   "388",
   "0.2333"
  ],
  [
   "389",
   "1.3219"
  ],
  [
   "392",
   "1.3997"
  ],
  [
   "395",
   "1.0109"
  ],
  [
   "396",
   "0.4666"
  ],
  [
   "398",
   "0.2333"
  ],
  [
   "399",
   "1.2442"
  ],
  [
   "402",
   "1.2442"
  ],
  [
   "405",
   "0.5443"
  ],
  [
   "406",
   "0.3110"
  ],
  [
   "408",
   "0.3888"
  ],
  [
   "409",
   "0.3110"
  ],
  [
   "412",
   "0.5443"
  ],
  [
   "415",
   "0.3110"
  ],
  [
   "416",
   "0.2333"
  ],
  [
   "418",
   "0.1555"
  ],
  [
   "419",
   "0.6998"
  ],
  [
   "422",
   "0.6221"
  ],
  [
   "425",
   "0.3110"
  ],
  [
   "426",
   "0.3110"
  ],
  [
   "428",
   "0.1555"
  ],
  [
   "429",
   "0.1555"
  ],
  [
   "432",
   "1.0109"
  ],
  [
   "435",
   "0.3110"
  ],
  [
   "436",
   "0.0778"
  ],
  [
   "438",
   "0.0778"
  ],
  [
   "439",
   "0.3888"
  ],
  [
   "442",
   "0.5443"
  ],
  [
   "445",
   "0.0778"
  ],
  [
   "446",
   "0.0778"
  ],
  [
   "448",
   "0.0778"
  ],
  [
   "449",
   "0.3110"
  ],
  [
   "452",
   "0.3888"
  ],
  [
   "455",
   "0.4666"
  ],
  [
   "456",
   "0.0778"
  ],
  [
   "458",
   "0.0778"
  ],
  [
   "459",
   "0.3110"
  ],
  [
   "462",
   "0.1555"
  ],
  [
   "465",
   "0.1555"
  ],
  [
   "466",
   "0.0778"
  ],
  [
   "468",
   "0.1555"
  ],
  [
   "469",
   "0.3110"
  ],
  [
   "472",
   "0.3888"
  ],
  [
   "475",
   "0.0778"
  ],
  [
   "478",
   "0.0778"
  ],
  [
   "479",
   "0.0778"
  ],
  [
   "482",
   "0.3888"
  ],
  [
   "485",
   "0.2333"
  ],
  [
   "486",
   "0.2333"
  ],
  [
   "488",
   "0.0778"
  ],
  [
   "489",
   "0.1555"
  ],
  [
   "492",
   "0.1555"
  ],
  [
   "495",
   "0.0778"
  ],
  [
   "496",
   "0.0778"
  ],
  [
   "499",
   "0.0778"
  ],
  [
   "502",
   "0.3110"
  ],
  [
   "505",
   "0.3888"
  ],
  [
   "506",
   "0.0778"
  ],
  [
   "509",
   "0.1555"
  ],
  [
   "515",
   "0.1555"
  ],
  [
   "516",
   "0.1555"
  ],
  [
   "519",
   "0.0778"
  ],
  [
   "522",
   "0.0778"
  ],
  [
   "532",
   "0.0778"
  ],
  [
   "535",
   "0.1555"
  ],
  [
   "538",
   "0.0778"
  ],
  [
   "539",
   "0.0778"
  ],
  [
   "542",
   "0.0778"
  ],
  [
   "548",
   "0.1555"
  ],
  [
   "549",
   "0.0778"
  ],
  [
   "552",
   "0.2333"
  ],
  [
   "555",
   "0.0778"
  ],
  [
   "556",
   "0.0778"
  ],
  [
   "559",
   "0.0778"
  ],
  [
   "565",
   "0.2333"
  ],
  [
   "566",
   "0.0778"
  ],
  [
   "569",
   "0.2333"
  ],
  [
   "576",
   "0.0778"
  ],
  [
   "582",
   "0.1555"
  ],
  [
   "586",
   "0.0778"
  ],
  [
   "588",
   "0.0778"
  ],
  [
   "592",
   "0.3110"
  ],
  [
   "595",
   "0.0778"
  ],
  [
   "615",
   "0.0778"
  ],
  [
   "619",
   "0.0778"
  ],
  [
   "622",
   "0.1555"
  ],
  [
   "625",
   "0.0778"
  ],
  [
   "626",
   "0.0778"
  ],
  [
   "629",
   "0.0778"
  ],
  [
   "632",
   "0.0778"
  ],
  [
   "652",
   "0.1555"
  ],
  [
   "669",
   "0.1555"
  ],
  [
   "672",
   "0.1555"
  ],
  [
   "675",
   "0.1555"
  ],
  [
   "688",
   "0.0778"
  ],
  [
   "692",
   "0.0778"
  ],
  [
   "712",
   "0.0778"
  ],
  [
   "739",
   "0.0778"
  ],
  [
   "742",
   "0.0778"
  ],
  [
   "765",
   "0.0778"
  ],
  [
   "769",
   "0.0778"
  ],
  [
   "829",
   "0.0778"
  ],
  [
   "899",
   "0.0778"
  ],
  [
   "905",
   "0.0778"
  ],
  [
   "926",
   "0.0778"
  ],
  [
   "948",
   "0.0778"
  ],
  [
   "958",
   "0.0778"
  ],
  [
   "1002",
   "0.0778"
  ],
  [
   "1059",
   "0.0778"
  ],
  [
   "1138",
   "0.0778"
  ],
  [
   "1158",
   "0.0778"
  ],
  [
   "1385",
   "0.0778"
  ],
  [
   "1505",
   "0.0778"
  ],
  [
   "1782",
   "0.0778"
  ],
  [
   "1872",
   "0.2333"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 34,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "302 ms",
  "compare_result": "1111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 34,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 448,
  "name": "Your",
  "id": 111085395
 }
}