{
 "id": 304,
 "ids": "304",
 "state": "None",
 "name": "Range Sum Query 2D - Immutable",
 "key": "range-sum-query-2d-immutable",
 "link": "https://leetcode.com/problems/range-sum-query-2d-immutable",
 "locked": false,
 "percent": 24.74519455811074,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "",
 "totalSubmit": "",
 "desc": "Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\r\n\r\n\r\n\r\nThe above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.\r\n\r\n\r\nExample:\r\n\r\nGiven matrix = [\r\n  [3, 0, 1, 4, 2],\r\n  [5, 6, 3, 2, 1],\r\n  [1, 2, 0, 1, 5],\r\n  [4, 1, 0, 1, 7],\r\n  [1, 0, 3, 0, 5]\r\n]\r\n\r\nsumRegion(2, 1, 4, 3) -> 8\r\nsumRegion(1, 1, 2, 2) -> 11\r\nsumRegion(1, 2, 2, 4) -> 12\r\n\r\n\r\n\r\nNote:\r\n\r\nYou may assume that the matrix does not change.\r\nThere are many calls to sumRegion function.\r\nYou may assume that row1 \u2264 row2 and col1 \u2264 col2.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class NumMatrix {\r\npublic:\r\n    NumMatrix(vector<vector<int>> matrix) {\r\n        \r\n    }\r\n    \r\n    int sumRegion(int row1, int col1, int row2, int col2) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your NumMatrix object will be instantiated and called as such:\r\n * NumMatrix obj = new NumMatrix(matrix);\r\n * int param_1 = obj.sumRegion(row1,col1,row2,col2);\r\n */"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class NumMatrix {\r\n\r\n    public NumMatrix(int[][] matrix) {\r\n        \r\n    }\r\n    \r\n    public int sumRegion(int row1, int col1, int row2, int col2) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumMatrix object will be instantiated and called as such:\r\n * NumMatrix obj = new NumMatrix(matrix);\r\n * int param_1 = obj.sumRegion(row1,col1,row2,col2);\r\n */"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class NumMatrix(object):\r\n\r\n    def __init__(self, matrix):\r\n        \"\"\"\r\n        :type matrix: List[List[int]]\r\n        \"\"\"\r\n        \r\n\r\n    def sumRegion(self, row1, col1, row2, col2):\r\n        \"\"\"\r\n        :type row1: int\r\n        :type col1: int\r\n        :type row2: int\r\n        :type col2: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your NumMatrix object will be instantiated and called as such:\r\n# obj = NumMatrix(matrix)\r\n# param_1 = obj.sumRegion(row1,col1,row2,col2)"
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "typedef struct {\n    \n} NumMatrix;\n\nNumMatrix* numMatrixCreate(int** matrix, int matrixRowSize, int matrixColSize) {\n    \n}\n\nint numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {\n    \n}\n\nvoid numMatrixFree(NumMatrix* obj) {\n    \n}\n\n/**\n * Your NumMatrix struct will be instantiated and called as such:\n * struct NumMatrix* obj = numMatrixCreate(matrix, matrixRowSize, matrixColSize);\n * int param_1 = numMatrixSumRegion(obj, row1, col1, row2, col2);\n * numMatrixFree(obj);\n */"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class NumMatrix {\r\n\r\n    public NumMatrix(int[,] matrix) {\r\n        \r\n    }\r\n    \r\n    public int SumRegion(int row1, int col1, int row2, int col2) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumMatrix object will be instantiated and called as such:\r\n * NumMatrix obj = new NumMatrix(matrix);\r\n * int param_1 = obj.SumRegion(row1,col1,row2,col2);\r\n */"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[][]} matrix\r\n */\r\nvar NumMatrix = function(matrix) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} row1 \r\n * @param {number} col1 \r\n * @param {number} row2 \r\n * @param {number} col2\r\n * @return {number}\r\n */\r\nNumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {\r\n    \r\n};\r\n\r\n/** \r\n * Your NumMatrix object will be instantiated and called as such:\r\n * var obj = Object.create(NumMatrix).createNew(matrix)\r\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\r\n */"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "class NumMatrix\r\n\r\n=begin\r\n    :type matrix: Integer[][]\r\n=end\r\n    def initialize(matrix)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type row1: Integer\r\n    :type col1: Integer\r\n    :type row2: Integer\r\n    :type col2: Integer\r\n    :rtype: Integer\r\n=end\r\n    def sum_region(row1, col1, row2, col2)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your NumMatrix object will be instantiated and called as such:\r\n# obj = NumMatrix.new(matrix)\r\n# param_1 = obj.sum_region(row1,col1,row2,col2)"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "type NumMatrix struct {\n    \n}\n\n\nfunc Constructor(matrix [][]int) NumMatrix {\n    \n}\n\n\nfunc (this *NumMatrix) SumRegion(row1 int, col1 int, row2 int, col2 int) int {\n    \n}\n\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * obj := Constructor(matrix);\n * param_1 := obj.SumRegion(row1,col1,row2,col2);\n */"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "class NumMatrix(var _matrix: Array[Array[Int]]) {\n    \n    def sumRegion(int row1, int col1, int row2, int col2) : Int = {\n\n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * var obj = new NumMatrix(matrix);\n * Int param_1 = obj.sumRegion(row1,col1,row2,col2);\n */"
  }
 ],
 "testcase": "'[\"NumMatrix\",\"sumRegion\",\"sumRegion\",\"sumRegion\"]\\n[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]'",
 "testable": true
}