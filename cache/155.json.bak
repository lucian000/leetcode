{
 "id": 155,
 "ids": "155",
 "state": "None",
 "name": "Min Stack",
 "key": "min-stack",
 "link": "https://leetcode.com/problems/min-stack",
 "locked": false,
 "percent": 28.34637804662945,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "133.4K",
 "totalSubmit": "470.6K",
 "desc": "\r\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\r\n\r\n\r\npush(x) -- Push element x onto stack.\r\n\r\n\r\npop() -- Removes the element on top of the stack.\r\n\r\n\r\ntop() -- Get the top element.\r\n\r\n\r\ngetMin() -- Retrieve the minimum element in the stack.\r\n\r\n\r\n\r\n\r\nExample:\r\n\r\nMinStack minStack = new MinStack();\r\nminStack.push(-2);\r\nminStack.push(0);\r\nminStack.push(-3);\r\nminStack.getMin();   --> Returns -3.\r\nminStack.pop();\r\nminStack.top();      --> Returns 0.\r\nminStack.getMin();   --> Returns -2.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class MinStack {\r\npublic:\r\n    /** initialize your data structure here. */\r\n    MinStack() {\r\n        \r\n    }\r\n    \r\n    void push(int x) {\r\n        \r\n    }\r\n    \r\n    void pop() {\r\n        \r\n    }\r\n    \r\n    int top() {\r\n        \r\n    }\r\n    \r\n    int getMin() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * MinStack obj = new MinStack();\r\n * obj.push(x);\r\n * obj.pop();\r\n * int param_3 = obj.top();\r\n * int param_4 = obj.getMin();\r\n */"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class MinStack {\r\n\r\n    /** initialize your data structure here. */\r\n    public MinStack() {\r\n        \r\n    }\r\n    \r\n    public void push(int x) {\r\n        \r\n    }\r\n    \r\n    public void pop() {\r\n        \r\n    }\r\n    \r\n    public int top() {\r\n        \r\n    }\r\n    \r\n    public int getMin() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * MinStack obj = new MinStack();\r\n * obj.push(x);\r\n * obj.pop();\r\n * int param_3 = obj.top();\r\n * int param_4 = obj.getMin();\r\n */"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class MinStack(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def push(self, x):\r\n        \"\"\"\r\n        :type x: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def pop(self):\r\n        \"\"\"\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def top(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def getMin(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MinStack object will be instantiated and called as such:\r\n# obj = MinStack()\r\n# obj.push(x)\r\n# obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.getMin()"
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "typedef struct {\n    \n} MinStack;\n\n/** initialize your data structure here. */\nMinStack* minStackCreate(int maxSize) {\n    \n}\n\nvoid minStackPush(MinStack* obj, int x) {\n    \n}\n\nvoid minStackPop(MinStack* obj) {\n    \n}\n\nint minStackTop(MinStack* obj) {\n    \n}\n\nint minStackGetMin(MinStack* obj) {\n    \n}\n\nvoid minStackFree(MinStack* obj) {\n    \n}\n\n/**\n * Your MinStack struct will be instantiated and called as such:\n * struct MinStack* obj = minStackCreate(maxSize);\n * minStackPush(obj, x);\n * minStackPop(obj);\n * int param_3 = minStackTop(obj);\n * int param_4 = minStackGetMin(obj);\n * minStackFree(obj);\n */"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class MinStack {\r\n\r\n    /** initialize your data structure here. */\r\n    public MinStack() {\r\n        \r\n    }\r\n    \r\n    public void Push(int x) {\r\n        \r\n    }\r\n    \r\n    public void Pop() {\r\n        \r\n    }\r\n    \r\n    public int Top() {\r\n        \r\n    }\r\n    \r\n    public int GetMin() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * MinStack obj = new MinStack();\r\n * obj.Push(x);\r\n * obj.Pop();\r\n * int param_3 = obj.Top();\r\n * int param_4 = obj.GetMin();\r\n */"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * initialize your data structure here.\r\n */\r\nvar MinStack = function() {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nMinStack.prototype.push = function(x) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {void}\r\n */\r\nMinStack.prototype.pop = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMinStack.prototype.top = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMinStack.prototype.getMin = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MinStack object will be instantiated and called as such:\r\n * var obj = Object.create(MinStack).createNew()\r\n * obj.push(x)\r\n * obj.pop()\r\n * var param_3 = obj.top()\r\n * var param_4 = obj.getMin()\r\n */"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "class MinStack\r\n\r\n=begin\r\n    initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type x: Integer\r\n    :rtype: Void\r\n=end\r\n    def push(x)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Void\r\n=end\r\n    def pop()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer\r\n=end\r\n    def top()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer\r\n=end\r\n    def get_min()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MinStack object will be instantiated and called as such:\r\n# obj = MinStack.new()\r\n# obj.push(x)\r\n# obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.get_min()"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "type MinStack struct {\r\n    \r\n}\r\n\r\n\r\n/** initialize your data structure here. */\r\nfunc Constructor() MinStack {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) Push(x int)  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) Pop()  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) Top() int {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) GetMin() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Push(x);\r\n * obj.Pop();\r\n * param_3 := obj.Top();\r\n * param_4 := obj.GetMin();\r\n */"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "\n    /** initialize your data structure here. */class MinStack() {\n    \n    def push(int x) {\n\n    }\n    \n    def pop() {\n\n    }\n    \n    def top() : Int = {\n\n    }\n    \n    def getMin() : Int = {\n\n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack();\n * obj.push(x);\n * obj.pop();\n * Int param_3 = obj.top();\n * Int param_4 = obj.getMin();\n */"
  }
 ],
 "testcase": "'[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\\n[[],[-2],[0],[-3],[],[],[],[]]'",
 "testable": true,
 "slug": "min-stack",
 "category": "algorithms",
 "fname": "155.min-stack.algorithms.py",
 "test_your": {
  "code_answer": [
   "[null,null,null,null,-3,null,0,-2]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "48 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501646256.12_784204_21"
 },
 "test_expected": {
  "code_answer": [
   "[null,null,null,null,-3,null,0,-2]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501646256.14_784204_21"
 },
 "submit_chart": [
  [
   "69",
   "0.2502"
  ],
  [
   "72",
   "1.6681"
  ],
  [
   "73",
   "0.1668"
  ],
  [
   "75",
   "4.5872"
  ],
  [
   "76",
   "3.3361"
  ],
  [
   "78",
   "3.2527"
  ],
  [
   "79",
   "7.9233"
  ],
  [
   "82",
   "11.7598"
  ],
  [
   "83",
   "0.7506"
  ],
  [
   "85",
   "7.2560"
  ],
  [
   "86",
   "5.4212"
  ],
  [
   "88",
   "2.7523"
  ],
  [
   "89",
   "5.5046"
  ],
  [
   "92",
   "7.6731"
  ],
  [
   "93",
   "0.0834"
  ],
  [
   "95",
   "4.4204"
  ],
  [
   "96",
   "2.2519"
  ],
  [
   "98",
   "1.2510"
  ],
  [
   "99",
   "3.5029"
  ],
  [
   "102",
   "4.5872"
  ],
  [
   "105",
   "2.5021"
  ],
  [
   "106",
   "1.1676"
  ],
  [
   "108",
   "0.6672"
  ],
  [
   "109",
   "1.2510"
  ],
  [
   "112",
   "1.3344"
  ],
  [
   "113",
   "0.0834"
  ],
  [
   "115",
   "1.2510"
  ],
  [
   "116",
   "0.7506"
  ],
  [
   "118",
   "0.4170"
  ],
  [
   "119",
   "1.0842"
  ],
  [
   "122",
   "1.0842"
  ],
  [
   "125",
   "0.5838"
  ],
  [
   "126",
   "0.3336"
  ],
  [
   "128",
   "0.2502"
  ],
  [
   "129",
   "0.6672"
  ],
  [
   "132",
   "0.5004"
  ],
  [
   "135",
   "0.1668"
  ],
  [
   "136",
   "0.2502"
  ],
  [
   "139",
   "0.5838"
  ],
  [
   "142",
   "0.3336"
  ],
  [
   "145",
   "0.5004"
  ],
  [
   "148",
   "0.0834"
  ],
  [
   "149",
   "0.1668"
  ],
  [
   "152",
   "0.0834"
  ],
  [
   "155",
   "0.2502"
  ],
  [
   "156",
   "0.1668"
  ],
  [
   "159",
   "0.0834"
  ],
  [
   "162",
   "0.0834"
  ],
  [
   "165",
   "0.0834"
  ],
  [
   "168",
   "0.0834"
  ],
  [
   "169",
   "0.0834"
  ],
  [
   "179",
   "0.0834"
  ],
  [
   "189",
   "0.0834"
  ],
  [
   "192",
   "0.1668"
  ],
  [
   "195",
   "0.0834"
  ],
  [
   "205",
   "0.0834"
  ],
  [
   "209",
   "0.0834"
  ],
  [
   "218",
   "0.0834"
  ],
  [
   "222",
   "0.0834"
  ],
  [
   "246",
   "0.0834"
  ],
  [
   "269",
   "0.0834"
  ],
  [
   "272",
   "0.0834"
  ],
  [
   "302",
   "0.0834"
  ],
  [
   "305",
   "0.0834"
  ],
  [
   "315",
   "0.0834"
  ],
  [
   "325",
   "0.0834"
  ],
  [
   "332",
   "0.0834"
  ],
  [
   "338",
   "0.0834"
  ],
  [
   "342",
   "0.0834"
  ],
  [
   "362",
   "0.0834"
  ],
  [
   "398",
   "0.0834"
  ],
  [
   "419",
   "0.0834"
  ],
  [
   "426",
   "0.0834"
  ],
  [
   "435",
   "0.0834"
  ],
  [
   "439",
   "0.0834"
  ],
  [
   "446",
   "0.1668"
  ],
  [
   "452",
   "0.0834"
  ],
  [
   "466",
   "0.0834"
  ],
  [
   "472",
   "0.0834"
  ],
  [
   "475",
   "0.0834"
  ],
  [
   "482",
   "0.0834"
  ],
  [
   "486",
   "0.0834"
  ],
  [
   "505",
   "0.0834"
  ],
  [
   "565",
   "0.0834"
  ],
  [
   "568",
   "0.0834"
  ],
  [
   "576",
   "0.0834"
  ],
  [
   "578",
   "0.0834"
  ],
  [
   "579",
   "0.0834"
  ],
  [
   "582",
   "0.1668"
  ],
  [
   "605",
   "0.0834"
  ],
  [
   "608",
   "0.0834"
  ],
  [
   "612",
   "0.0834"
  ],
  [
   "622",
   "0.0834"
  ],
  [
   "632",
   "0.0834"
  ],
  [
   "649",
   "0.0834"
  ],
  [
   "668",
   "0.1668"
  ],
  [
   "676",
   "0.0834"
  ],
  [
   "679",
   "0.0834"
  ],
  [
   "695",
   "0.0834"
  ],
  [
   "698",
   "0.0834"
  ],
  [
   "699",
   "0.0834"
  ],
  [
   "702",
   "0.0834"
  ],
  [
   "766",
   "0.0834"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 18,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "78 ms",
  "compare_result": "111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 18,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 155,
  "name": "Your",
  "id": 112130608
 }
}