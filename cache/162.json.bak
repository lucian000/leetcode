{"id": 162, "ids": "162", "state": "None", "name": "Find Peak Element", "key": "find-peak-element", "link": "https://leetcode.com/problems/find-peak-element", "locked": false, "percent": 37.15739952274721, "level": "Medium", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "A peak element is an element that is greater than its neighbors.\r\n\r\nGiven an input array where num[i] \u2260 num[i+1], find a peak element and return its index.\r\n\r\nThe array may contain multiple peaks, in that case return the index to any one of the peaks is fine.\r\n\r\nYou may imagine that num[-1] = num[n] = -\u221e.\r\n\r\nFor example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.\r\n\r\nclick to show spoilers.\r\n\r\nNote:\r\nYour solution should be in logarithmic complexity.\r\n\r\n\r\nCredits:Special thanks to @ts for adding this problem and creating all test cases.", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    int findPeakElement(vector<int>& nums) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int findPeakElement(int[] nums) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def findPeakElement(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "int findPeakElement(int* nums, int numsSize) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int FindPeakElement(int[] nums) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findPeakElement = function(nums) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_peak_element(nums)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\r\n    func findPeakElement(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func findPeakElement(nums []int) int {\r\n    \r\n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\r\n    def findPeakElement(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"}], "testcase": "'[1,2,3,1]'", "testable": true}