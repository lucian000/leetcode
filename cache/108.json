{
 "id": 108,
 "ids": "108",
 "state": "None",
 "name": "Convert Sorted Array to Binary Search Tree",
 "key": "convert-sorted-array-to-binary-search-tree",
 "link": "https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",
 "locked": false,
 "percent": 41.936448209417414,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "129.1K",
 "totalSubmit": "307.8K",
 "desc": "Given an array where elements are sorted in ascending order, convert it to a height balanced BST.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode sortedArrayToBST(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def sortedArrayToBST(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: TreeNode\r\n        \"\"\""
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode SortedArrayToBST(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {number[]} nums\r\n * @return {TreeNode}\r\n */\r\nvar sortedArrayToBST = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {Integer[]} nums\r\n# @return {TreeNode}\r\ndef sorted_array_to_bst(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc sortedArrayToBST(nums []int) *TreeNode {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def sortedArrayToBST(nums: Array[Int]): TreeNode = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]'",
 "testable": true,
 "slug": "convert-sorted-array-to-binary-search-tree",
 "category": "algorithms",
 "fname": "108.convert-sorted-array-to-binary-search-tree.algorithms.py",
 "test_your": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501646864.03_784204_22"
 },
 "test_expected": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501646864.06_784204_22"
 },
 "submit_chart": [
  [
   "78",
   "0.0842"
  ],
  [
   "79",
   "0.5051"
  ],
  [
   "82",
   "2.7778"
  ],
  [
   "83",
   "0.0842"
  ],
  [
   "85",
   "4.8822"
  ],
  [
   "86",
   "2.5253"
  ],
  [
   "88",
   "2.6936"
  ],
  [
   "89",
   "7.9125"
  ],
  [
   "92",
   "12.6263"
  ],
  [
   "93",
   "0.1684"
  ],
  [
   "95",
   "9.7643"
  ],
  [
   "96",
   "4.7980"
  ],
  [
   "98",
   "2.8620"
  ],
  [
   "99",
   "6.6498"
  ],
  [
   "102",
   "8.6700"
  ],
  [
   "103",
   "0.3367"
  ],
  [
   "105",
   "2.9461"
  ],
  [
   "106",
   "2.7778"
  ],
  [
   "108",
   "1.8519"
  ],
  [
   "109",
   "3.7037"
  ],
  [
   "112",
   "3.5354"
  ],
  [
   "113",
   "0.0842"
  ],
  [
   "115",
   "2.2727"
  ],
  [
   "116",
   "0.7576"
  ],
  [
   "118",
   "0.3367"
  ],
  [
   "119",
   "1.8519"
  ],
  [
   "122",
   "1.4310"
  ],
  [
   "125",
   "1.2626"
  ],
  [
   "126",
   "0.3367"
  ],
  [
   "128",
   "0.5051"
  ],
  [
   "129",
   "0.6734"
  ],
  [
   "132",
   "1.0101"
  ],
  [
   "135",
   "0.7576"
  ],
  [
   "136",
   "0.3367"
  ],
  [
   "138",
   "0.0842"
  ],
  [
   "139",
   "0.5051"
  ],
  [
   "142",
   "0.7576"
  ],
  [
   "145",
   "0.5892"
  ],
  [
   "146",
   "0.3367"
  ],
  [
   "148",
   "0.1684"
  ],
  [
   "149",
   "0.5892"
  ],
  [
   "152",
   "0.3367"
  ],
  [
   "155",
   "0.2525"
  ],
  [
   "156",
   "0.0842"
  ],
  [
   "158",
   "0.1684"
  ],
  [
   "159",
   "0.3367"
  ],
  [
   "162",
   "0.2525"
  ],
  [
   "165",
   "0.1684"
  ],
  [
   "166",
   "0.0842"
  ],
  [
   "168",
   "0.0842"
  ],
  [
   "169",
   "0.0842"
  ],
  [
   "172",
   "0.0842"
  ],
  [
   "175",
   "0.0842"
  ],
  [
   "176",
   "0.0842"
  ],
  [
   "185",
   "0.0842"
  ],
  [
   "189",
   "0.0842"
  ],
  [
   "212",
   "0.0842"
  ],
  [
   "225",
   "0.0842"
  ],
  [
   "252",
   "0.0842"
  ],
  [
   "409",
   "0.0842"
  ],
  [
   "412",
   "0.0842"
  ],
  [
   "452",
   "0.0842"
  ],
  [
   "459",
   "0.0842"
  ],
  [
   "462",
   "0.0842"
  ],
  [
   "552",
   "0.0842"
  ],
  [
   "608",
   "0.0842"
  ],
  [
   "776",
   "0.0842"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 32,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "112 ms",
  "compare_result": "11111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 32,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 108,
  "name": "Your",
  "id": 112138067
 }
}