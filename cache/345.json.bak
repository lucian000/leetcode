{
 "id": 345,
 "ids": "345",
 "state": "None",
 "name": "Reverse Vowels of a String",
 "key": "reverse-vowels-of-a-string",
 "link": "https://leetcode.com/problems/reverse-vowels-of-a-string",
 "locked": false,
 "percent": 38.39753823596085,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "79.6K",
 "totalSubmit": "207.3K",
 "desc": "Write a function that takes a string as input and reverse only the vowels of a string.\r\n\r\n\r\nExample 1:\r\nGiven s = \"hello\", return \"holle\".\r\n\r\n\r\n\r\nExample 2:\r\nGiven s = \"leetcode\", return \"leotcede\".\r\n\r\n\r\n\r\nNote:\r\nThe vowels does not include the letter \"y\".\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    string reverseVowels(string s) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public String reverseVowels(String s) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def reverseVowels(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "char* reverseVowels(char* s) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public string ReverseVowels(string s) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nvar reverseVowels = function(s) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\r\n# @return {String}\r\ndef reverse_vowels(s)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func reverseVowels(_ s: String) -> String {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func reverseVowels(s string) string {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def reverseVowels(s: String): String = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"hello\"'",
 "testable": true,
 "slug": "reverse-vowels-of-a-string",
 "category": "algorithms",
 "fname": "345.reverse-vowels-of-a-string.algorithms.py",
 "test_your": {
  "code_answer": [
   "\"holle\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500814406.03_784204_19"
 },
 "test_expected": {
  "code_answer": [
   "\"holle\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500814406.05_784204_19"
 },
 "submit_chart": [
  [
   "62",
   "0.2717"
  ],
  [
   "65",
   "0.2717"
  ],
  [
   "66",
   "0.1359"
  ],
  [
   "68",
   "0.8152"
  ],
  [
   "69",
   "0.9511"
  ],
  [
   "72",
   "2.4457"
  ],
  [
   "75",
   "2.1739"
  ],
  [
   "76",
   "1.3587"
  ],
  [
   "78",
   "0.5435"
  ],
  [
   "79",
   "2.3098"
  ],
  [
   "82",
   "4.6196"
  ],
  [
   "83",
   "0.1359"
  ],
  [
   "85",
   "1.7663"
  ],
  [
   "86",
   "2.3098"
  ],
  [
   "88",
   "0.8152"
  ],
  [
   "89",
   "2.7174"
  ],
  [
   "92",
   "2.9891"
  ],
  [
   "95",
   "1.7663"
  ],
  [
   "96",
   "1.2228"
  ],
  [
   "98",
   "1.2228"
  ],
  [
   "99",
   "2.1739"
  ],
  [
   "102",
   "3.1250"
  ],
  [
   "105",
   "0.8152"
  ],
  [
   "106",
   "0.9511"
  ],
  [
   "108",
   "0.8152"
  ],
  [
   "109",
   "1.9022"
  ],
  [
   "112",
   "1.7663"
  ],
  [
   "115",
   "0.8152"
  ],
  [
   "116",
   "0.8152"
  ],
  [
   "118",
   "1.3587"
  ],
  [
   "119",
   "0.6793"
  ],
  [
   "122",
   "1.3587"
  ],
  [
   "125",
   "0.9511"
  ],
  [
   "126",
   "0.5435"
  ],
  [
   "128",
   "0.2717"
  ],
  [
   "129",
   "0.9511"
  ],
  [
   "132",
   "0.5435"
  ],
  [
   "133",
   "0.1359"
  ],
  [
   "135",
   "0.5435"
  ],
  [
   "136",
   "0.6793"
  ],
  [
   "138",
   "0.4076"
  ],
  [
   "139",
   "1.0870"
  ],
  [
   "142",
   "0.5435"
  ],
  [
   "145",
   "0.5435"
  ],
  [
   "146",
   "0.4076"
  ],
  [
   "148",
   "0.4076"
  ],
  [
   "149",
   "0.2717"
  ],
  [
   "152",
   "0.4076"
  ],
  [
   "155",
   "0.6793"
  ],
  [
   "156",
   "0.4076"
  ],
  [
   "158",
   "0.1359"
  ],
  [
   "159",
   "0.8152"
  ],
  [
   "162",
   "0.4076"
  ],
  [
   "169",
   "0.1359"
  ],
  [
   "172",
   "0.2717"
  ],
  [
   "175",
   "0.4076"
  ],
  [
   "176",
   "0.2717"
  ],
  [
   "178",
   "0.2717"
  ],
  [
   "179",
   "0.8152"
  ],
  [
   "182",
   "1.3587"
  ],
  [
   "185",
   "0.8152"
  ],
  [
   "186",
   "0.4076"
  ],
  [
   "188",
   "0.4076"
  ],
  [
   "189",
   "1.3587"
  ],
  [
   "192",
   "1.9022"
  ],
  [
   "195",
   "0.9511"
  ],
  [
   "196",
   "0.4076"
  ],
  [
   "198",
   "0.2717"
  ],
  [
   "199",
   "1.2228"
  ],
  [
   "202",
   "1.6304"
  ],
  [
   "205",
   "1.0870"
  ],
  [
   "206",
   "0.6793"
  ],
  [
   "208",
   "0.5435"
  ],
  [
   "209",
   "0.6793"
  ],
  [
   "212",
   "1.2228"
  ],
  [
   "213",
   "0.1359"
  ],
  [
   "215",
   "0.8152"
  ],
  [
   "216",
   "0.6793"
  ],
  [
   "218",
   "0.1359"
  ],
  [
   "219",
   "0.8152"
  ],
  [
   "222",
   "0.4076"
  ],
  [
   "225",
   "0.9511"
  ],
  [
   "226",
   "0.5435"
  ],
  [
   "228",
   "0.2717"
  ],
  [
   "229",
   "0.4076"
  ],
  [
   "232",
   "1.2228"
  ],
  [
   "235",
   "0.5435"
  ],
  [
   "236",
   "0.8152"
  ],
  [
   "238",
   "0.4076"
  ],
  [
   "239",
   "0.4076"
  ],
  [
   "242",
   "0.5435"
  ],
  [
   "245",
   "0.6793"
  ],
  [
   "246",
   "0.5435"
  ],
  [
   "248",
   "0.1359"
  ],
  [
   "249",
   "0.4076"
  ],
  [
   "252",
   "0.2717"
  ],
  [
   "255",
   "0.4076"
  ],
  [
   "256",
   "0.4076"
  ],
  [
   "262",
   "0.2717"
  ],
  [
   "265",
   "0.2717"
  ],
  [
   "266",
   "0.1359"
  ],
  [
   "272",
   "0.2717"
  ],
  [
   "275",
   "0.1359"
  ],
  [
   "282",
   "0.1359"
  ],
  [
   "285",
   "0.2717"
  ],
  [
   "288",
   "0.2717"
  ],
  [
   "292",
   "0.5435"
  ],
  [
   "296",
   "0.2717"
  ],
  [
   "298",
   "0.1359"
  ],
  [
   "299",
   "0.2717"
  ],
  [
   "303",
   "0.1359"
  ],
  [
   "305",
   "0.5435"
  ],
  [
   "306",
   "0.2717"
  ],
  [
   "309",
   "0.2717"
  ],
  [
   "312",
   "0.5435"
  ],
  [
   "315",
   "0.1359"
  ],
  [
   "316",
   "0.1359"
  ],
  [
   "318",
   "0.1359"
  ],
  [
   "319",
   "0.6793"
  ],
  [
   "322",
   "0.1359"
  ],
  [
   "328",
   "0.1359"
  ],
  [
   "329",
   "0.1359"
  ],
  [
   "332",
   "0.1359"
  ],
  [
   "335",
   "0.1359"
  ],
  [
   "339",
   "0.1359"
  ],
  [
   "345",
   "0.1359"
  ],
  [
   "348",
   "0.1359"
  ],
  [
   "352",
   "0.2717"
  ],
  [
   "359",
   "0.1359"
  ],
  [
   "362",
   "0.1359"
  ],
  [
   "365",
   "0.2717"
  ],
  [
   "372",
   "0.1359"
  ],
  [
   "373",
   "0.1359"
  ],
  [
   "382",
   "0.2717"
  ],
  [
   "385",
   "0.1359"
  ],
  [
   "386",
   "0.1359"
  ],
  [
   "402",
   "0.1359"
  ],
  [
   "409",
   "0.1359"
  ],
  [
   "412",
   "0.1359"
  ],
  [
   "426",
   "0.1359"
  ],
  [
   "432",
   "0.2717"
  ],
  [
   "442",
   "0.1359"
  ],
  [
   "482",
   "0.1359"
  ],
  [
   "485",
   "0.1359"
  ],
  [
   "488",
   "0.1359"
  ],
  [
   "492",
   "0.1359"
  ],
  [
   "506",
   "0.1359"
  ],
  [
   "542",
   "0.1359"
  ],
  [
   "545",
   "0.1359"
  ],
  [
   "549",
   "0.1359"
  ],
  [
   "556",
   "0.1359"
  ],
  [
   "592",
   "0.1359"
  ],
  [
   "615",
   "0.1359"
  ],
  [
   "616",
   "0.1359"
  ],
  [
   "626",
   "0.1359"
  ],
  [
   "635",
   "0.1359"
  ],
  [
   "652",
   "0.1359"
  ],
  [
   "915",
   "0.1359"
  ],
  [
   "1076",
   "0.1359"
  ],
  [
   "1175",
   "0.1359"
  ],
  [
   "1258",
   "0.1359"
  ],
  [
   "1285",
   "0.1359"
  ],
  [
   "1842",
   "0.1359"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 481,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "102 ms",
  "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 481,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 345,
  "name": "Your",
  "id": 110798103
 }
}