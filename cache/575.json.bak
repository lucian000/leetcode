{
 "id": 575,
 "ids": "575",
 "state": "None",
 "name": "Distribute Candies",
 "key": "distribute-candies",
 "link": "https://leetcode.com/problems/distribute-candies",
 "locked": false,
 "percent": 59.52883051153823,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "20.1K",
 "totalSubmit": "33.8K",
 "desc": "Given an integer array with even length, where different numbers in this array represent different kinds of candies. Each number means one candy of the corresponding kind. You need to distribute these candies equally in number to brother and sister. Return the maximum number of kinds of candies the sister could gain. \r\n\r\nExample 1:\r\n\r\nInput: candies = [1,1,2,2,3,3]\r\nOutput: 3\r\nExplanation:\r\nThere are three different kinds of candies (1, 2 and 3), and two candies for each kind.\r\nOptimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too. \r\nThe sister has three different kinds of candies. \r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: candies = [1,1,2,3]\r\nOutput: 2\r\nExplanation: For example, the sister has candies [2,3] and the brother has candies [1,1]. \r\nThe sister has two different kinds of candies, the brother has only one kind of candies. \r\n\r\n\r\n\r\nNote:\r\n\r\nThe length of the given array is in range [2, 10,000], and will be even.\r\nThe number in given array is in range [-100,000, 100,000].\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int distributeCandies(vector<int>& candies) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int distributeCandies(int[] candies) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def distributeCandies(self, candies):\r\n        \"\"\"\r\n        :type candies: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def distributeCandies(self, candies):\r\n        \"\"\"\r\n        :type candies: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int distributeCandies(int* candies, int candiesSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int DistributeCandies(int[] candies) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} candies\r\n * @return {number}\r\n */\r\nvar distributeCandies = function(candies) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} candies\r\n# @return {Integer}\r\ndef distribute_candies(candies)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func distributeCandies(_ candies: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func distributeCandies(candies []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def distributeCandies(candies: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,1,2,2,3,3]'",
 "testable": true,
 "slug": "distribute-candies",
 "category": "algorithms",
 "fname": "575.distribute-candies.algorithms.py",
 "test_your": {
  "code_answer": [
   "3"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502034469.79_784204_50"
 },
 "test_expected": {
  "code_answer": [
   "3"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502034469.81_784204_50"
 },
 "submit_chart": [
  [
   "139",
   "0.1416"
  ],
  [
   "142",
   "1.6997"
  ],
  [
   "145",
   "1.4873"
  ],
  [
   "146",
   "0.9207"
  ],
  [
   "148",
   "1.6997"
  ],
  [
   "149",
   "2.4788"
  ],
  [
   "152",
   "6.0198"
  ],
  [
   "155",
   "3.1870"
  ],
  [
   "156",
   "1.8414"
  ],
  [
   "158",
   "1.5581"
  ],
  [
   "159",
   "3.1870"
  ],
  [
   "162",
   "4.9575"
  ],
  [
   "163",
   "0.1416"
  ],
  [
   "165",
   "3.8952"
  ],
  [
   "166",
   "1.4873"
  ],
  [
   "168",
   "1.8414"
  ],
  [
   "169",
   "2.6204"
  ],
  [
   "172",
   "2.8329"
  ],
  [
   "173",
   "0.1416"
  ],
  [
   "175",
   "1.6289"
  ],
  [
   "176",
   "1.2748"
  ],
  [
   "178",
   "0.8499"
  ],
  [
   "179",
   "1.7705"
  ],
  [
   "182",
   "2.1246"
  ],
  [
   "185",
   "1.3456"
  ],
  [
   "186",
   "0.8499"
  ],
  [
   "188",
   "0.8499"
  ],
  [
   "189",
   "1.0623"
  ],
  [
   "192",
   "1.6997"
  ],
  [
   "195",
   "0.7790"
  ],
  [
   "196",
   "0.7790"
  ],
  [
   "198",
   "0.4249"
  ],
  [
   "199",
   "1.0623"
  ],
  [
   "202",
   "1.3456"
  ],
  [
   "203",
   "0.0708"
  ],
  [
   "205",
   "0.6374"
  ],
  [
   "206",
   "0.5666"
  ],
  [
   "208",
   "0.7790"
  ],
  [
   "209",
   "0.7082"
  ],
  [
   "212",
   "1.6289"
  ],
  [
   "213",
   "0.0708"
  ],
  [
   "215",
   "0.7790"
  ],
  [
   "216",
   "0.4958"
  ],
  [
   "218",
   "0.4958"
  ],
  [
   "219",
   "0.9207"
  ],
  [
   "222",
   "1.2040"
  ],
  [
   "223",
   "0.0708"
  ],
  [
   "225",
   "0.8499"
  ],
  [
   "226",
   "0.2833"
  ],
  [
   "228",
   "0.3541"
  ],
  [
   "229",
   "0.7082"
  ],
  [
   "232",
   "1.4164"
  ],
  [
   "235",
   "0.3541"
  ],
  [
   "236",
   "0.3541"
  ],
  [
   "238",
   "0.1416"
  ],
  [
   "239",
   "0.2125"
  ],
  [
   "242",
   "1.2040"
  ],
  [
   "243",
   "0.0708"
  ],
  [
   "245",
   "0.7082"
  ],
  [
   "246",
   "0.5666"
  ],
  [
   "248",
   "0.4249"
  ],
  [
   "249",
   "0.2125"
  ],
  [
   "252",
   "0.7790"
  ],
  [
   "255",
   "0.5666"
  ],
  [
   "256",
   "0.2125"
  ],
  [
   "258",
   "0.1416"
  ],
  [
   "259",
   "0.2833"
  ],
  [
   "262",
   "0.4958"
  ],
  [
   "265",
   "0.3541"
  ],
  [
   "266",
   "0.0708"
  ],
  [
   "268",
   "0.1416"
  ],
  [
   "269",
   "0.1416"
  ],
  [
   "272",
   "0.7082"
  ],
  [
   "275",
   "0.4958"
  ],
  [
   "278",
   "0.2125"
  ],
  [
   "279",
   "0.1416"
  ],
  [
   "282",
   "0.5666"
  ],
  [
   "285",
   "0.2833"
  ],
  [
   "286",
   "0.3541"
  ],
  [
   "288",
   "0.0708"
  ],
  [
   "289",
   "0.3541"
  ],
  [
   "292",
   "0.7082"
  ],
  [
   "296",
   "0.0708"
  ],
  [
   "298",
   "0.0708"
  ],
  [
   "299",
   "0.2125"
  ],
  [
   "302",
   "0.2125"
  ],
  [
   "305",
   "0.2125"
  ],
  [
   "306",
   "0.0708"
  ],
  [
   "308",
   "0.0708"
  ],
  [
   "309",
   "0.0708"
  ],
  [
   "312",
   "0.0708"
  ],
  [
   "315",
   "0.1416"
  ],
  [
   "316",
   "0.2125"
  ],
  [
   "318",
   "0.0708"
  ],
  [
   "319",
   "0.1416"
  ],
  [
   "322",
   "0.3541"
  ],
  [
   "325",
   "0.2833"
  ],
  [
   "326",
   "0.2125"
  ],
  [
   "328",
   "0.0708"
  ],
  [
   "329",
   "0.0708"
  ],
  [
   "332",
   "0.2833"
  ],
  [
   "335",
   "0.2125"
  ],
  [
   "336",
   "0.1416"
  ],
  [
   "338",
   "0.0708"
  ],
  [
   "339",
   "0.2125"
  ],
  [
   "342",
   "0.4958"
  ],
  [
   "345",
   "0.2125"
  ],
  [
   "346",
   "0.0708"
  ],
  [
   "352",
   "0.2125"
  ],
  [
   "355",
   "0.0708"
  ],
  [
   "359",
   "0.2833"
  ],
  [
   "365",
   "0.2125"
  ],
  [
   "369",
   "0.3541"
  ],
  [
   "372",
   "0.2833"
  ],
  [
   "375",
   "0.2833"
  ],
  [
   "376",
   "0.0708"
  ],
  [
   "378",
   "0.2125"
  ],
  [
   "382",
   "0.4249"
  ],
  [
   "385",
   "0.3541"
  ],
  [
   "389",
   "0.2833"
  ],
  [
   "392",
   "0.2833"
  ],
  [
   "395",
   "0.2125"
  ],
  [
   "396",
   "0.1416"
  ],
  [
   "398",
   "0.0708"
  ],
  [
   "399",
   "0.0708"
  ],
  [
   "402",
   "0.7790"
  ],
  [
   "405",
   "0.0708"
  ],
  [
   "406",
   "0.0708"
  ],
  [
   "408",
   "0.0708"
  ],
  [
   "409",
   "0.0708"
  ],
  [
   "412",
   "0.4249"
  ],
  [
   "415",
   "0.1416"
  ],
  [
   "416",
   "0.0708"
  ],
  [
   "418",
   "0.0708"
  ],
  [
   "419",
   "0.2125"
  ],
  [
   "422",
   "0.2833"
  ],
  [
   "425",
   "0.1416"
  ],
  [
   "426",
   "0.1416"
  ],
  [
   "429",
   "0.2125"
  ],
  [
   "432",
   "0.3541"
  ],
  [
   "435",
   "0.2833"
  ],
  [
   "436",
   "0.1416"
  ],
  [
   "439",
   "0.0708"
  ],
  [
   "442",
   "0.1416"
  ],
  [
   "445",
   "0.0708"
  ],
  [
   "446",
   "0.0708"
  ],
  [
   "448",
   "0.0708"
  ],
  [
   "449",
   "0.2125"
  ],
  [
   "452",
   "0.1416"
  ],
  [
   "455",
   "0.0708"
  ],
  [
   "456",
   "0.0708"
  ],
  [
   "459",
   "0.0708"
  ],
  [
   "462",
   "0.5666"
  ],
  [
   "465",
   "0.0708"
  ],
  [
   "466",
   "0.0708"
  ],
  [
   "475",
   "0.0708"
  ],
  [
   "476",
   "0.1416"
  ],
  [
   "478",
   "0.0708"
  ],
  [
   "482",
   "0.2125"
  ],
  [
   "488",
   "0.1416"
  ],
  [
   "489",
   "0.1416"
  ],
  [
   "492",
   "0.0708"
  ],
  [
   "498",
   "0.1416"
  ],
  [
   "502",
   "0.1416"
  ],
  [
   "506",
   "0.0708"
  ],
  [
   "509",
   "0.0708"
  ],
  [
   "515",
   "0.0708"
  ],
  [
   "532",
   "0.0708"
  ],
  [
   "542",
   "0.0708"
  ],
  [
   "546",
   "0.0708"
  ],
  [
   "548",
   "0.1416"
  ],
  [
   "565",
   "0.0708"
  ],
  [
   "572",
   "0.0708"
  ],
  [
   "576",
   "0.0708"
  ],
  [
   "612",
   "0.0708"
  ],
  [
   "615",
   "0.0708"
  ],
  [
   "622",
   "0.0708"
  ],
  [
   "642",
   "0.1416"
  ],
  [
   "645",
   "0.0708"
  ],
  [
   "652",
   "0.0708"
  ],
  [
   "669",
   "0.0708"
  ],
  [
   "688",
   "0.0708"
  ],
  [
   "718",
   "0.0708"
  ],
  [
   "739",
   "0.0708"
  ],
  [
   "746",
   "0.0708"
  ],
  [
   "782",
   "0.0708"
  ],
  [
   "785",
   "0.0708"
  ],
  [
   "795",
   "0.0708"
  ],
  [
   "842",
   "0.0708"
  ],
  [
   "845",
   "0.0708"
  ],
  [
   "878",
   "0.0708"
  ],
  [
   "1119",
   "0.0708"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 207,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "158 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 207,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 575,
  "name": "Your",
  "id": 112734780
 }
}