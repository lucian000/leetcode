{
 "id": 205,
 "ids": "205",
 "state": "notac",
 "name": "Isomorphic Strings",
 "key": "isomorphic-strings",
 "link": "https://leetcode.com/problems/isomorphic-strings",
 "locked": false,
 "percent": 33.68948839409652,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "108.3K",
 "totalSubmit": "321.6K",
 "desc": "Given two strings s and t, determine if they are isomorphic.\r\n\r\nTwo strings are isomorphic if the characters in s can be replaced to get t.\r\n\r\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\r\n\r\nFor example,\r\nGiven \"egg\", \"add\", return true.\r\n\r\nGiven \"foo\", \"bar\", return false.\r\n\r\nGiven \"paper\", \"title\", return true.\r\n\r\nNote:\r\nYou may assume both s and t have the same length.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool isIsomorphic(string s, string t) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean isIsomorphic(String s, String t) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def isIsomorphic(self, s, t):\r\n        \"\"\"\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool isIsomorphic(char* s, char* t) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool IsIsomorphic(string s, string t) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {boolean}\r\n */\r\nvar isIsomorphic = function(s, t) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\r\n# @param {String} t\r\n# @return {Boolean}\r\ndef is_isomorphic(s, t)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func isIsomorphic(_ s: String, _ t: String) -> Bool {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func isIsomorphic(s string, t string) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def isIsomorphic(s: String, t: String): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"egg\"\\n\"add\"'",
 "testable": true,
 "slug": "isomorphic-strings",
 "category": "algorithms",
 "fname": "205.isomorphic-strings.algorithms.py",
 "test_your": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501753155.56_784204_13"
 },
 "test_expected": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "46 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501753155.59_784204_13"
 },
 "file": "205.isomorphic-strings.algorithms.py",
 "submit_chart": [
  [
   "42",
   "0.5102"
  ],
  [
   "43",
   "0.1276"
  ],
  [
   "45",
   "1.6582"
  ],
  [
   "46",
   "1.1480"
  ],
  [
   "48",
   "1.6582"
  ],
  [
   "49",
   "4.2092"
  ],
  [
   "52",
   "7.2704"
  ],
  [
   "53",
   "0.2551"
  ],
  [
   "55",
   "5.7398"
  ],
  [
   "56",
   "3.6990"
  ],
  [
   "58",
   "1.9133"
  ],
  [
   "59",
   "4.3367"
  ],
  [
   "62",
   "7.0153"
  ],
  [
   "63",
   "0.3827"
  ],
  [
   "65",
   "4.5918"
  ],
  [
   "66",
   "2.9337"
  ],
  [
   "68",
   "2.8061"
  ],
  [
   "69",
   "5.1020"
  ],
  [
   "72",
   "4.7194"
  ],
  [
   "75",
   "2.5510"
  ],
  [
   "76",
   "1.0204"
  ],
  [
   "78",
   "1.4031"
  ],
  [
   "79",
   "2.8061"
  ],
  [
   "82",
   "3.4439"
  ],
  [
   "83",
   "0.1276"
  ],
  [
   "85",
   "1.2755"
  ],
  [
   "86",
   "0.3827"
  ],
  [
   "88",
   "0.6378"
  ],
  [
   "89",
   "1.4031"
  ],
  [
   "92",
   "1.5306"
  ],
  [
   "95",
   "1.1480"
  ],
  [
   "96",
   "0.5102"
  ],
  [
   "98",
   "0.3827"
  ],
  [
   "99",
   "0.8929"
  ],
  [
   "102",
   "0.8929"
  ],
  [
   "105",
   "0.6378"
  ],
  [
   "106",
   "0.5102"
  ],
  [
   "108",
   "0.1276"
  ],
  [
   "109",
   "0.2551"
  ],
  [
   "112",
   "0.8929"
  ],
  [
   "115",
   "0.1276"
  ],
  [
   "116",
   "0.1276"
  ],
  [
   "119",
   "0.3827"
  ],
  [
   "125",
   "0.1276"
  ],
  [
   "128",
   "0.1276"
  ],
  [
   "129",
   "0.1276"
  ],
  [
   "132",
   "0.5102"
  ],
  [
   "145",
   "0.1276"
  ],
  [
   "146",
   "0.1276"
  ],
  [
   "148",
   "0.1276"
  ],
  [
   "152",
   "0.2551"
  ],
  [
   "159",
   "0.1276"
  ],
  [
   "162",
   "0.1276"
  ],
  [
   "169",
   "0.2551"
  ],
  [
   "185",
   "0.2551"
  ],
  [
   "188",
   "0.1276"
  ],
  [
   "189",
   "0.2551"
  ],
  [
   "199",
   "0.2551"
  ],
  [
   "202",
   "0.1276"
  ],
  [
   "205",
   "0.1276"
  ],
  [
   "208",
   "0.1276"
  ],
  [
   "209",
   "0.3827"
  ],
  [
   "212",
   "0.2551"
  ],
  [
   "215",
   "0.2551"
  ],
  [
   "216",
   "0.1276"
  ],
  [
   "218",
   "0.1276"
  ],
  [
   "219",
   "0.1276"
  ],
  [
   "222",
   "0.7653"
  ],
  [
   "225",
   "0.3827"
  ],
  [
   "226",
   "0.1276"
  ],
  [
   "228",
   "0.1276"
  ],
  [
   "229",
   "0.3827"
  ],
  [
   "232",
   "0.1276"
  ],
  [
   "235",
   "0.2551"
  ],
  [
   "236",
   "0.1276"
  ],
  [
   "238",
   "0.2551"
  ],
  [
   "239",
   "0.2551"
  ],
  [
   "242",
   "0.1276"
  ],
  [
   "245",
   "0.1276"
  ],
  [
   "248",
   "0.1276"
  ],
  [
   "252",
   "0.1276"
  ],
  [
   "256",
   "0.1276"
  ],
  [
   "259",
   "0.1276"
  ],
  [
   "262",
   "0.1276"
  ],
  [
   "269",
   "0.1276"
  ],
  [
   "273",
   "0.1276"
  ],
  [
   "275",
   "0.2551"
  ],
  [
   "278",
   "0.1276"
  ],
  [
   "279",
   "0.1276"
  ],
  [
   "282",
   "0.1276"
  ],
  [
   "289",
   "0.1276"
  ],
  [
   "292",
   "0.2551"
  ],
  [
   "296",
   "0.1276"
  ],
  [
   "299",
   "0.2551"
  ],
  [
   "302",
   "0.2551"
  ],
  [
   "305",
   "0.2551"
  ],
  [
   "309",
   "0.2551"
  ],
  [
   "312",
   "0.2551"
  ],
  [
   "318",
   "0.2551"
  ],
  [
   "322",
   "0.6378"
  ],
  [
   "329",
   "0.1276"
  ],
  [
   "332",
   "0.1276"
  ],
  [
   "339",
   "0.2551"
  ],
  [
   "342",
   "0.2551"
  ],
  [
   "348",
   "0.1276"
  ],
  [
   "352",
   "0.1276"
  ],
  [
   "355",
   "0.1276"
  ],
  [
   "362",
   "0.1276"
  ],
  [
   "366",
   "0.1276"
  ],
  [
   "379",
   "0.1276"
  ],
  [
   "382",
   "0.1276"
  ],
  [
   "385",
   "0.2551"
  ],
  [
   "399",
   "0.1276"
  ],
  [
   "402",
   "0.1276"
  ],
  [
   "405",
   "0.1276"
  ],
  [
   "412",
   "0.1276"
  ],
  [
   "415",
   "0.1276"
  ],
  [
   "422",
   "0.2551"
  ],
  [
   "429",
   "0.1276"
  ],
  [
   "445",
   "0.1276"
  ],
  [
   "465",
   "0.1276"
  ],
  [
   "485",
   "0.1276"
  ],
  [
   "532",
   "0.2551"
  ],
  [
   "539",
   "0.1276"
  ],
  [
   "602",
   "0.1276"
  ],
  [
   "605",
   "0.1276"
  ],
  [
   "669",
   "0.1276"
  ],
  [
   "672",
   "0.1276"
  ],
  [
   "705",
   "0.1276"
  ],
  [
   "838",
   "0.2551"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 30,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "69 ms",
  "compare_result": "111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 30,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 205,
  "name": "Your",
  "id": 112322774
 }
}