{
 "id": 49,
 "ids": "49",
 "state": "None",
 "name": "Group Anagrams",
 "key": "group-anagrams",
 "link": "https://leetcode.com/problems/group-anagrams",
 "locked": false,
 "percent": 34.17923089115188,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "",
 "totalSubmit": "",
 "desc": "Given an array of strings, group anagrams together.\r\n\r\n\r\nFor example, given: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"], \r\nReturn:\r\n\r\n[\r\n  [\"ate\", \"eat\",\"tea\"],\r\n  [\"nat\",\"tan\"],\r\n  [\"bat\"]\r\n]\r\n\r\nNote: All inputs will be in lower-case.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public List<List<String>> groupAnagrams(String[] strs) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def groupAnagrams(self, strs):\r\n        \"\"\"\r\n        :type strs: List[str]\r\n        :rtype: List[List[str]]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar*** groupAnagrams(char** strs, int strsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string[]} strs\r\n * @return {string[][]}\r\n */\r\nvar groupAnagrams = function(strs) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String[]} strs\r\n# @return {String[][]}\r\ndef group_anagrams(strs)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func groupAnagrams(strs []string) [][]string {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]'",
 "testable": true
}