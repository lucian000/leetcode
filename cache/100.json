{
 "id": 100,
 "ids": "100",
 "state": "None",
 "name": "Same Tree",
 "key": "same-tree",
 "link": "https://leetcode.com/problems/same-tree",
 "locked": false,
 "percent": 46.339965965587425,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "208.3K",
 "totalSubmit": "449.6K",
 "desc": "\r\nGiven two binary trees, write a function to check if they are equal or not.\r\n\r\n\r\nTwo binary trees are considered equal if they are structurally identical and the nodes have the same value.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool isSameTree(TreeNode* p, TreeNode* q) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public boolean isSameTree(TreeNode p, TreeNode q) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def isSameTree(self, p, q):\r\n        \"\"\"\r\n        :type p: TreeNode\r\n        :type q: TreeNode\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool isSameTree(struct TreeNode* p, struct TreeNode* q) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool IsSameTree(TreeNode p, TreeNode q) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} p\r\n * @param {TreeNode} q\r\n * @return {boolean}\r\n */\r\nvar isSameTree = function(p, q) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} p\r\n# @param {TreeNode} q\r\n# @return {Boolean}\r\ndef is_same_tree(p, q)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -> Bool {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def isSameTree(p: TreeNode, q: TreeNode): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]\\n[]'",
 "testable": true,
 "slug": "same-tree",
 "category": "algorithms",
 "fname": "100.same-tree.algorithms.py",
 "test_your": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501511692.99_784204_4"
 },
 "test_expected": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501511693.02_784204_4"
 },
 "submit_chart": [
  [
   "28",
   "0.2738"
  ],
  [
   "29",
   "1.9165"
  ],
  [
   "32",
   "16.1533"
  ],
  [
   "33",
   "1.9165"
  ],
  [
   "35",
   "14.3737"
  ],
  [
   "36",
   "11.1567"
  ],
  [
   "38",
   "5.4757"
  ],
  [
   "39",
   "12.5941"
  ],
  [
   "42",
   "11.8412"
  ],
  [
   "43",
   "0.4107"
  ],
  [
   "45",
   "5.2704"
  ],
  [
   "46",
   "2.9432"
  ],
  [
   "48",
   "1.5058"
  ],
  [
   "49",
   "3.2854"
  ],
  [
   "52",
   "3.8330"
  ],
  [
   "55",
   "1.8480"
  ],
  [
   "56",
   "1.1636"
  ],
  [
   "58",
   "0.4107"
  ],
  [
   "59",
   "1.0267"
  ],
  [
   "62",
   "0.7529"
  ],
  [
   "65",
   "0.5476"
  ],
  [
   "66",
   "0.2053"
  ],
  [
   "68",
   "0.1369"
  ],
  [
   "69",
   "0.0684"
  ],
  [
   "72",
   "0.3422"
  ],
  [
   "75",
   "0.0684"
  ],
  [
   "76",
   "0.0684"
  ],
  [
   "82",
   "0.0684"
  ],
  [
   "86",
   "0.0684"
  ],
  [
   "95",
   "0.0684"
  ],
  [
   "99",
   "0.0684"
  ],
  [
   "119",
   "0.0684"
  ],
  [
   "168",
   "0.0684"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 54,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "33 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 54,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 100,
  "name": "Your",
  "id": 111897029
 }
}