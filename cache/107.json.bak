{
 "id": 107,
 "ids": "107",
 "state": "None",
 "name": "Binary Tree Level Order Traversal II",
 "key": "binary-tree-level-order-traversal-ii",
 "link": "https://leetcode.com/problems/binary-tree-level-order-traversal-ii",
 "locked": false,
 "percent": 39.85999951346486,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "131.1K",
 "totalSubmit": "328.9K",
 "desc": "Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).\r\n\r\n\r\nFor example:\r\nGiven binary tree [3,9,20,null,null,15,7],\r\n\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n\r\n\r\n\r\nreturn its bottom-up level order traversal as:\r\n\r\n[\r\n  [15,7],\r\n  [9,20],\r\n  [3]\r\n]\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<vector<int>> levelOrderBottom(TreeNode* root) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def levelOrderBottom(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** levelOrderBottom(struct TreeNode* root, int** columnSizes, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<IList<int>> LevelOrderBottom(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[][]}\r\n */\r\nvar levelOrderBottom = function(root) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[][]}\r\ndef level_order_bottom(root)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func levelOrderBottom(_ root: TreeNode?) -> [[Int]] {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc levelOrderBottom(root *TreeNode) [][]int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def levelOrderBottom(root: TreeNode): List[List[Int]] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[3,9,20,null,null,15,7]'",
 "testable": true,
 "slug": "binary-tree-level-order-traversal-ii",
 "category": "algorithms",
 "fname": "107.binary-tree-level-order-traversal-ii.algorithms.py",
 "test_your": {
  "code_answer": [
   "[[15,7],[9,20],[3]]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500821696.03_784204_33"
 },
 "test_expected": {
  "code_answer": [
   "[[15,7],[9,20],[3]]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "36 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500821696.05_784204_33"
 },
 "submit_chart": [
  [
   "38",
   "0.1159"
  ],
  [
   "42",
   "5.5620"
  ],
  [
   "43",
   "0.3476"
  ],
  [
   "45",
   "9.0382"
  ],
  [
   "46",
   "8.2271"
  ],
  [
   "48",
   "4.8667"
  ],
  [
   "49",
   "12.3986"
  ],
  [
   "52",
   "13.3256"
  ],
  [
   "53",
   "0.2317"
  ],
  [
   "55",
   "6.0255"
  ],
  [
   "56",
   "3.5921"
  ],
  [
   "58",
   "3.4762"
  ],
  [
   "59",
   "6.1414"
  ],
  [
   "62",
   "6.2572"
  ],
  [
   "63",
   "0.2317"
  ],
  [
   "65",
   "2.5492"
  ],
  [
   "66",
   "1.1587"
  ],
  [
   "68",
   "1.0429"
  ],
  [
   "69",
   "2.6651"
  ],
  [
   "72",
   "2.0857"
  ],
  [
   "75",
   "1.1587"
  ],
  [
   "76",
   "0.4635"
  ],
  [
   "78",
   "0.4635"
  ],
  [
   "79",
   "0.8111"
  ],
  [
   "82",
   "1.2746"
  ],
  [
   "85",
   "1.1587"
  ],
  [
   "86",
   "0.8111"
  ],
  [
   "88",
   "0.3476"
  ],
  [
   "89",
   "0.9270"
  ],
  [
   "92",
   "0.9270"
  ],
  [
   "95",
   "0.2317"
  ],
  [
   "96",
   "0.2317"
  ],
  [
   "99",
   "0.1159"
  ],
  [
   "102",
   "0.3476"
  ],
  [
   "105",
   "0.1159"
  ],
  [
   "112",
   "0.1159"
  ],
  [
   "125",
   "0.1159"
  ],
  [
   "146",
   "0.1159"
  ],
  [
   "158",
   "0.1159"
  ],
  [
   "185",
   "0.1159"
  ],
  [
   "196",
   "0.1159"
  ],
  [
   "238",
   "0.1159"
  ],
  [
   "336",
   "0.1159"
  ],
  [
   "392",
   "0.1159"
  ],
  [
   "535",
   "0.1159"
  ],
  [
   "565",
   "0.1159"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 34,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "59 ms",
  "compare_result": "1111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 34,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 107,
  "name": "Your",
  "id": 110806657
 }
}