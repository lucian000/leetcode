{
 "id": 564,
 "ids": "564",
 "state": "None",
 "name": "Find the Closest Palindrome",
 "key": "find-the-closest-palindrome",
 "link": "https://leetcode.com/problems/find-the-closest-palindrome",
 "locked": false,
 "percent": 16.53890824622532,
 "level": "Hard",
 "starred": false,
 "loaded": true,
 "totalAC": "",
 "totalSubmit": "",
 "desc": "Given an integer n, find the closest integer (not including itself), which is a palindrome. \r\n\r\nThe 'closest' is defined as absolute difference minimized between two integers.\r\n\r\nExample 1:\r\n\r\nInput: \"123\"\r\nOutput: \"121\"\r\n\r\n\r\n\r\nNote:\r\n\r\nThe input n is a positive integer represented by string, whose length will not exceed 18.\r\nIf there is a tie, return the smaller one as answer.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\npublic:\n    string nearestPalindromic(string n) {\n        \n    }\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\n    public String nearestPalindromic(String n) {\n        \n    }\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "char* nearestPalindromic(char* n) {\n    \n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\n    public string NearestPalindromic(string n) {\n        \n    }\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\n * @param {string} n\n * @return {string}\n */\nvar nearestPalindromic = function(n) {\n    \n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} n\n# @return {String}\ndef nearest_palindromic(n)\n    \nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func nearestPalindromic(_ n: String) -> String {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func nearestPalindromic(n string) string {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def nearestPalindromic(n: String): String = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"1\"'",
 "testable": true
}