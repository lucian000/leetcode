{
 "id": 628,
 "ids": "628",
 "state": "None",
 "name": "Maximum Product of Three Numbers",
 "key": "maximum-product-of-three-numbers",
 "link": "https://leetcode.com/problems/maximum-product-of-three-numbers",
 "locked": false,
 "percent": 45.10561797752809,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "10K",
 "totalSubmit": "22.3K",
 "desc": "Given an integer array, find three numbers whose product is maximum and output the maximum product.\r\n\r\nExample 1:\r\n\r\nInput: [1,2,3]\r\nOutput: 6\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [1,2,3,4]\r\nOutput: 24\r\n\r\n\r\n\r\nNote:\r\n\r\nThe length of the given array will be in range [3,104] and all elements are in the range [-1000, 1000].\r\nMultiplication of any three numbers in the input won't exceed the range of 32-bit signed integer.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int maximumProduct(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int maximumProduct(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def maximumProduct(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def maximumProduct(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int maximumProduct(int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int MaximumProduct(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maximumProduct = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef maximum_product(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func maximumProduct(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func maximumProduct(nums []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def maximumProduct(nums: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,2,3]'",
 "testable": true,
 "slug": "maximum-product-of-three-numbers",
 "category": "algorithms",
 "fname": "628.maximum-product-of-three-numbers.algorithms.py",
 "test_your": {
  "code_answer": [
   "6"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501689234.92_784204_10"
 },
 "test_expected": {
  "code_answer": [
   "6"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501689234.94_784204_10"
 },
 "submit_chart": [
  [
   "62",
   "0.0999"
  ],
  [
   "65",
   "0.0999"
  ],
  [
   "68",
   "0.0499"
  ],
  [
   "69",
   "0.1498"
  ],
  [
   "72",
   "0.7489"
  ],
  [
   "75",
   "1.0984"
  ],
  [
   "76",
   "0.4493"
  ],
  [
   "78",
   "0.4493"
  ],
  [
   "79",
   "0.8487"
  ],
  [
   "82",
   "1.0984"
  ],
  [
   "83",
   "0.0999"
  ],
  [
   "85",
   "1.1483"
  ],
  [
   "86",
   "0.1997"
  ],
  [
   "88",
   "0.0999"
  ],
  [
   "89",
   "1.0484"
  ],
  [
   "92",
   "1.2481"
  ],
  [
   "95",
   "0.3994"
  ],
  [
   "96",
   "0.1997"
  ],
  [
   "98",
   "0.4993"
  ],
  [
   "99",
   "0.9985"
  ],
  [
   "102",
   "2.9456"
  ],
  [
   "103",
   "0.2996"
  ],
  [
   "105",
   "3.3949"
  ],
  [
   "106",
   "2.6960"
  ],
  [
   "108",
   "2.2466"
  ],
  [
   "109",
   "5.7414"
  ],
  [
   "112",
   "8.4873"
  ],
  [
   "113",
   "0.4493"
  ],
  [
   "115",
   "5.3919"
  ],
  [
   "116",
   "2.5961"
  ],
  [
   "118",
   "2.8957"
  ],
  [
   "119",
   "5.6415"
  ],
  [
   "122",
   "6.4403"
  ],
  [
   "123",
   "0.2496"
  ],
  [
   "125",
   "2.9456"
  ],
  [
   "126",
   "1.6975"
  ],
  [
   "128",
   "1.5976"
  ],
  [
   "129",
   "3.4448"
  ],
  [
   "132",
   "3.9441"
  ],
  [
   "133",
   "0.1498"
  ],
  [
   "135",
   "2.0469"
  ],
  [
   "136",
   "1.3979"
  ],
  [
   "138",
   "0.8487"
  ],
  [
   "139",
   "1.5477"
  ],
  [
   "142",
   "1.7474"
  ],
  [
   "145",
   "0.8487"
  ],
  [
   "146",
   "0.4493"
  ],
  [
   "148",
   "0.4993"
  ],
  [
   "149",
   "1.0984"
  ],
  [
   "152",
   "1.2981"
  ],
  [
   "153",
   "0.0999"
  ],
  [
   "155",
   "0.5991"
  ],
  [
   "156",
   "0.4493"
  ],
  [
   "158",
   "0.1997"
  ],
  [
   "159",
   "0.5991"
  ],
  [
   "162",
   "0.9985"
  ],
  [
   "165",
   "0.4993"
  ],
  [
   "166",
   "0.1498"
  ],
  [
   "168",
   "0.4493"
  ],
  [
   "169",
   "0.5991"
  ],
  [
   "172",
   "0.7988"
  ],
  [
   "175",
   "0.3495"
  ],
  [
   "176",
   "0.2496"
  ],
  [
   "178",
   "0.0999"
  ],
  [
   "179",
   "0.2496"
  ],
  [
   "182",
   "0.2996"
  ],
  [
   "185",
   "0.2996"
  ],
  [
   "186",
   "0.0499"
  ],
  [
   "188",
   "0.0999"
  ],
  [
   "189",
   "0.2996"
  ],
  [
   "192",
   "0.4493"
  ],
  [
   "195",
   "0.0499"
  ],
  [
   "196",
   "0.1498"
  ],
  [
   "198",
   "0.0499"
  ],
  [
   "199",
   "0.1997"
  ],
  [
   "202",
   "0.4493"
  ],
  [
   "205",
   "0.1498"
  ],
  [
   "206",
   "0.0499"
  ],
  [
   "208",
   "0.0499"
  ],
  [
   "209",
   "0.1498"
  ],
  [
   "212",
   "0.1498"
  ],
  [
   "215",
   "0.0999"
  ],
  [
   "216",
   "0.1498"
  ],
  [
   "218",
   "0.0999"
  ],
  [
   "219",
   "0.0499"
  ],
  [
   "225",
   "0.0999"
  ],
  [
   "226",
   "0.0999"
  ],
  [
   "228",
   "0.0999"
  ],
  [
   "232",
   "0.0999"
  ],
  [
   "235",
   "0.0499"
  ],
  [
   "248",
   "0.0499"
  ],
  [
   "249",
   "0.0499"
  ],
  [
   "252",
   "0.1498"
  ],
  [
   "256",
   "0.0499"
  ],
  [
   "258",
   "0.0499"
  ],
  [
   "259",
   "0.0499"
  ],
  [
   "262",
   "0.0999"
  ],
  [
   "265",
   "0.0999"
  ],
  [
   "266",
   "0.0499"
  ],
  [
   "268",
   "0.0999"
  ],
  [
   "272",
   "0.0999"
  ],
  [
   "275",
   "0.0499"
  ],
  [
   "276",
   "0.0499"
  ],
  [
   "282",
   "0.1498"
  ],
  [
   "289",
   "0.0499"
  ],
  [
   "292",
   "0.0499"
  ],
  [
   "299",
   "0.0499"
  ],
  [
   "302",
   "0.1498"
  ],
  [
   "305",
   "0.0499"
  ],
  [
   "315",
   "0.0999"
  ],
  [
   "316",
   "0.0499"
  ],
  [
   "319",
   "0.0999"
  ],
  [
   "322",
   "0.0499"
  ],
  [
   "332",
   "0.0999"
  ],
  [
   "338",
   "0.0499"
  ],
  [
   "342",
   "0.0499"
  ],
  [
   "345",
   "0.0999"
  ],
  [
   "359",
   "0.0499"
  ],
  [
   "362",
   "0.0499"
  ],
  [
   "365",
   "0.0499"
  ],
  [
   "369",
   "0.0499"
  ],
  [
   "372",
   "0.0999"
  ],
  [
   "385",
   "0.0999"
  ],
  [
   "396",
   "0.0499"
  ],
  [
   "422",
   "0.0499"
  ],
  [
   "429",
   "0.0499"
  ],
  [
   "459",
   "0.0499"
  ],
  [
   "469",
   "0.0499"
  ],
  [
   "482",
   "0.0499"
  ],
  [
   "488",
   "0.0499"
  ],
  [
   "492",
   "0.0499"
  ],
  [
   "522",
   "0.1498"
  ],
  [
   "525",
   "0.0499"
  ],
  [
   "535",
   "0.0999"
  ],
  [
   "536",
   "0.0499"
  ],
  [
   "549",
   "0.0499"
  ],
  [
   "556",
   "0.0499"
  ],
  [
   "569",
   "0.0499"
  ],
  [
   "605",
   "0.0499"
  ],
  [
   "609",
   "0.0499"
  ],
  [
   "642",
   "0.0499"
  ],
  [
   "685",
   "0.0499"
  ],
  [
   "745",
   "0.0499"
  ],
  [
   "799",
   "0.0499"
  ],
  [
   "829",
   "0.0499"
  ],
  [
   "898",
   "0.0499"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 83,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "122 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 83,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 628,
  "name": "Your",
  "id": 112200839
 }
}