{
 "id": 303,
 "ids": "303",
 "state": "None",
 "name": "Range Sum Query - Immutable",
 "key": "range-sum-query-immutable",
 "link": "https://leetcode.com/problems/range-sum-query-immutable",
 "locked": false,
 "percent": 29.14845998081637,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "71.1K",
 "totalSubmit": "244K",
 "desc": "Given an integer array nums, find the sum of the elements between indices i and j (i \u2264 j), inclusive.\r\n\r\nExample:\r\n\r\nGiven nums = [-2, 0, 3, -5, 2, -1]\r\n\r\nsumRange(0, 2) -> 1\r\nsumRange(2, 5) -> -1\r\nsumRange(0, 5) -> -3\r\n\r\n\r\n\r\nNote:\r\n\r\nYou may assume that the array does not change.\r\nThere are many calls to sumRange function.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class NumArray {\r\npublic:\r\n    NumArray(vector<int> nums) {\r\n        \r\n    }\r\n    \r\n    int sumRange(int i, int j) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * int param_1 = obj.sumRange(i,j);\r\n */"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class NumArray {\r\n\r\n    public NumArray(int[] nums) {\r\n        \r\n    }\r\n    \r\n    public int sumRange(int i, int j) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * int param_1 = obj.sumRange(i,j);\r\n */"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class NumArray(object):\r\n\r\n    def __init__(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def sumRange(self, i, j):\r\n        \"\"\"\r\n        :type i: int\r\n        :type j: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray(nums)\r\n# param_1 = obj.sumRange(i,j)"
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "typedef struct {\n    \n} NumArray;\n\nNumArray* numArrayCreate(int* nums, int numsSize) {\n    \n}\n\nint numArraySumRange(NumArray* obj, int i, int j) {\n    \n}\n\nvoid numArrayFree(NumArray* obj) {\n    \n}\n\n/**\n * Your NumArray struct will be instantiated and called as such:\n * struct NumArray* obj = numArrayCreate(nums, numsSize);\n * int param_1 = numArraySumRange(obj, i, j);\n * numArrayFree(obj);\n */"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class NumArray {\r\n\r\n    public NumArray(int[] nums) {\r\n        \r\n    }\r\n    \r\n    public int SumRange(int i, int j) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * int param_1 = obj.SumRange(i,j);\r\n */"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n */\r\nvar NumArray = function(nums) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} i \r\n * @param {number} j\r\n * @return {number}\r\n */\r\nNumArray.prototype.sumRange = function(i, j) {\r\n    \r\n};\r\n\r\n/** \r\n * Your NumArray object will be instantiated and called as such:\r\n * var obj = Object.create(NumArray).createNew(nums)\r\n * var param_1 = obj.sumRange(i,j)\r\n */"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "class NumArray\r\n\r\n=begin\r\n    :type nums: Integer[]\r\n=end\r\n    def initialize(nums)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type i: Integer\r\n    :type j: Integer\r\n    :rtype: Integer\r\n=end\r\n    def sum_range(i, j)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray.new(nums)\r\n# param_1 = obj.sum_range(i,j)"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "type NumArray struct {\n    \n}\n\n\nfunc Constructor(nums []int) NumArray {\n    \n}\n\n\nfunc (this *NumArray) SumRange(i int, j int) int {\n    \n}\n\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * obj := Constructor(nums);\n * param_1 := obj.SumRange(i,j);\n */"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "class NumArray(var _nums: Array[Int]) {\n    \n    def sumRange(int i, int j) : Int = {\n\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums);\n * Int param_1 = obj.sumRange(i,j);\n */"
  }
 ],
 "testcase": "'[\"NumArray\",\"sumRange\",\"sumRange\",\"sumRange\"]\\n[[[-2,0,3,-5,2,-1]],[0,2],[2,5],[0,5]]'",
 "testable": true,
 "slug": "range-sum-query-immutable",
 "category": "algorithms",
 "fname": "303.range-sum-query-immutable.algorithms.py",
 "test_your": {
  "code_answer": [
   "[null,1,-1,-3]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502012288.35_784204_16"
 },
 "test_expected": {
  "code_answer": [
   "[null,1,-1,-3]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502012288.39_784204_16"
 },
 "submit_chart": [
  [
   "58",
   "0.1328"
  ],
  [
   "59",
   "0.9296"
  ],
  [
   "62",
   "4.6481"
  ],
  [
   "63",
   "0.5312"
  ],
  [
   "65",
   "5.9761"
  ],
  [
   "66",
   "3.8513"
  ],
  [
   "68",
   "3.1873"
  ],
  [
   "69",
   "8.2337"
  ],
  [
   "72",
   "7.9681"
  ],
  [
   "75",
   "4.5153"
  ],
  [
   "76",
   "2.1248"
  ],
  [
   "78",
   "1.5936"
  ],
  [
   "79",
   "3.1873"
  ],
  [
   "82",
   "3.9841"
  ],
  [
   "83",
   "0.1328"
  ],
  [
   "85",
   "2.3904"
  ],
  [
   "86",
   "0.7968"
  ],
  [
   "88",
   "1.0624"
  ],
  [
   "89",
   "1.7264"
  ],
  [
   "92",
   "3.1873"
  ],
  [
   "95",
   "1.8592"
  ],
  [
   "96",
   "0.5312"
  ],
  [
   "98",
   "0.5312"
  ],
  [
   "99",
   "1.3280"
  ],
  [
   "102",
   "1.1952"
  ],
  [
   "105",
   "0.3984"
  ],
  [
   "106",
   "0.5312"
  ],
  [
   "109",
   "0.7968"
  ],
  [
   "112",
   "1.4608"
  ],
  [
   "119",
   "0.3984"
  ],
  [
   "122",
   "0.6640"
  ],
  [
   "125",
   "0.2656"
  ],
  [
   "129",
   "0.2656"
  ],
  [
   "132",
   "0.1328"
  ],
  [
   "135",
   "0.2656"
  ],
  [
   "136",
   "0.1328"
  ],
  [
   "152",
   "0.3984"
  ],
  [
   "159",
   "0.1328"
  ],
  [
   "162",
   "0.1328"
  ],
  [
   "166",
   "0.1328"
  ],
  [
   "402",
   "0.2656"
  ],
  [
   "412",
   "0.1328"
  ],
  [
   "442",
   "0.1328"
  ],
  [
   "445",
   "0.1328"
  ],
  [
   "519",
   "0.1328"
  ],
  [
   "568",
   "0.2656"
  ],
  [
   "572",
   "0.1328"
  ],
  [
   "579",
   "0.1328"
  ],
  [
   "585",
   "0.2656"
  ],
  [
   "586",
   "0.1328"
  ],
  [
   "595",
   "0.1328"
  ],
  [
   "596",
   "0.1328"
  ],
  [
   "609",
   "0.1328"
  ],
  [
   "629",
   "0.1328"
  ],
  [
   "635",
   "0.1328"
  ],
  [
   "642",
   "0.1328"
  ],
  [
   "645",
   "0.1328"
  ],
  [
   "679",
   "0.1328"
  ],
  [
   "689",
   "0.1328"
  ],
  [
   "695",
   "0.1328"
  ],
  [
   "878",
   "0.1328"
  ],
  [
   "886",
   "0.3984"
  ],
  [
   "888",
   "0.1328"
  ],
  [
   "889",
   "0.1328"
  ],
  [
   "892",
   "0.1328"
  ],
  [
   "895",
   "0.3984"
  ],
  [
   "896",
   "0.6640"
  ],
  [
   "899",
   "0.3984"
  ],
  [
   "902",
   "1.0624"
  ],
  [
   "905",
   "1.1952"
  ],
  [
   "906",
   "0.1328"
  ],
  [
   "908",
   "0.1328"
  ],
  [
   "909",
   "0.2656"
  ],
  [
   "912",
   "0.6640"
  ],
  [
   "915",
   "1.4608"
  ],
  [
   "916",
   "0.1328"
  ],
  [
   "918",
   "0.1328"
  ],
  [
   "919",
   "0.2656"
  ],
  [
   "922",
   "0.6640"
  ],
  [
   "925",
   "0.5312"
  ],
  [
   "926",
   "0.1328"
  ],
  [
   "928",
   "0.1328"
  ],
  [
   "929",
   "0.5312"
  ],
  [
   "932",
   "1.0624"
  ],
  [
   "935",
   "0.2656"
  ],
  [
   "936",
   "0.1328"
  ],
  [
   "938",
   "0.9296"
  ],
  [
   "939",
   "0.5312"
  ],
  [
   "942",
   "0.3984"
  ],
  [
   "945",
   "0.6640"
  ],
  [
   "948",
   "0.1328"
  ],
  [
   "952",
   "0.3984"
  ],
  [
   "955",
   "0.1328"
  ],
  [
   "958",
   "0.1328"
  ],
  [
   "959",
   "0.2656"
  ],
  [
   "962",
   "0.5312"
  ],
  [
   "965",
   "0.3984"
  ],
  [
   "968",
   "0.1328"
  ],
  [
   "972",
   "0.1328"
  ],
  [
   "975",
   "0.2656"
  ],
  [
   "976",
   "0.1328"
  ],
  [
   "978",
   "0.1328"
  ],
  [
   "979",
   "0.2656"
  ],
  [
   "982",
   "0.9296"
  ],
  [
   "985",
   "0.1328"
  ],
  [
   "988",
   "0.2656"
  ],
  [
   "989",
   "0.1328"
  ],
  [
   "992",
   "0.3984"
  ],
  [
   "995",
   "0.2656"
  ],
  [
   "996",
   "0.1328"
  ],
  [
   "998",
   "0.2656"
  ],
  [
   "999",
   "0.3984"
  ],
  [
   "1002",
   "0.6640"
  ],
  [
   "1005",
   "0.1328"
  ],
  [
   "1009",
   "0.1328"
  ],
  [
   "1012",
   "0.5312"
  ],
  [
   "1013",
   "0.1328"
  ],
  [
   "1015",
   "0.1328"
  ],
  [
   "1018",
   "0.1328"
  ],
  [
   "1019",
   "0.1328"
  ],
  [
   "1022",
   "0.1328"
  ],
  [
   "1029",
   "0.1328"
  ],
  [
   "1032",
   "0.1328"
  ],
  [
   "1035",
   "0.1328"
  ],
  [
   "1042",
   "0.2656"
  ],
  [
   "1049",
   "0.1328"
  ],
  [
   "1055",
   "0.1328"
  ],
  [
   "1072",
   "0.1328"
  ],
  [
   "1075",
   "0.1328"
  ],
  [
   "1076",
   "0.1328"
  ],
  [
   "1079",
   "0.1328"
  ],
  [
   "1082",
   "0.2656"
  ],
  [
   "1089",
   "0.1328"
  ],
  [
   "1109",
   "0.1328"
  ],
  [
   "1126",
   "0.1328"
  ],
  [
   "1132",
   "0.1328"
  ],
  [
   "1135",
   "0.1328"
  ],
  [
   "1226",
   "0.1328"
  ],
  [
   "1249",
   "0.1328"
  ],
  [
   "1305",
   "0.1328"
  ],
  [
   "1322",
   "0.1328"
  ],
  [
   "1349",
   "0.1328"
  ],
  [
   "1648",
   "0.1328"
  ],
  [
   "1865",
   "0.1328"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 16,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "69 ms",
  "compare_result": "1111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 16,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 303,
  "name": "Your",
  "id": 112711631
 }
}