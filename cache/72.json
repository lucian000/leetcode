{"id": 72, "ids": "72", "state": "None", "name": "Edit Distance", "key": "edit-distance", "link": "https://leetcode.com/problems/edit-distance", "locked": false, "percent": 31.51312723318316, "level": "Hard", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "\r\nGiven two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)\r\n\r\n\r\n\r\nYou have the following 3 operations permitted on a word:\r\n\r\n\r\n\r\na) Insert a character\r\nb) Delete a character\r\nc) Replace a character\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    int minDistance(string word1, string word2) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int minDistance(String word1, String word2) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def minDistance(self, word1, word2):\r\n        \"\"\"\r\n        :type word1: str\r\n        :type word2: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "int minDistance(char* word1, char* word2) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int MinDistance(string word1, string word2) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {string} word1\r\n * @param {string} word2\r\n * @return {number}\r\n */\r\nvar minDistance = function(word1, word2) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {String} word1\r\n# @param {String} word2\r\n# @return {Integer}\r\ndef min_distance(word1, word2)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\n    func minDistance(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func minDistance(word1 string, word2 string) int {\n    \n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def minDistance(word1: String, word2: String): Int = {\n        \n    }\n}"}], "testcase": "\"\"\n\"\"", "testable": true}