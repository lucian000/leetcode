{
 "id": 63,
 "ids": "63",
 "state": "None",
 "name": "Unique Paths II",
 "key": "unique-paths-ii",
 "link": "https://leetcode.com/problems/unique-paths-ii",
 "locked": false,
 "percent": 31.589510663638627,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "105.3K",
 "totalSubmit": "333.5K",
 "desc": "Follow up for \"Unique Paths\":\r\n\r\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\r\n\r\nAn obstacle and empty space is marked as 1 and 0 respectively in the grid.\r\n\r\nFor example,\r\nThere is one obstacle in the middle of a 3x3 grid as illustrated below.\r\n\r\n[\r\n  [0,0,0],\r\n  [0,1,0],\r\n  [0,0,0]\r\n]\r\n\r\nThe total number of unique paths is 2.\r\n\r\nNote: m and n will be at most 100.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int uniquePathsWithObstacles(int[][] obstacleGrid) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def uniquePathsWithObstacles(self, obstacleGrid):\r\n        \"\"\"\r\n        :type obstacleGrid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int uniquePathsWithObstacles(int** obstacleGrid, int obstacleGridRowSize, int obstacleGridColSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int UniquePathsWithObstacles(int[,] obstacleGrid) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[][]} obstacleGrid\r\n * @return {number}\r\n */\r\nvar uniquePathsWithObstacles = function(obstacleGrid) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[][]} obstacle_grid\r\n# @return {Integer}\r\ndef unique_paths_with_obstacles(obstacle_grid)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func uniquePathsWithObstacles(_ obstacleGrid: [[Int]]) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func uniquePathsWithObstacles(obstacleGrid [][]int) int {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def uniquePathsWithObstacles(obstacleGrid: Array[Array[Int]]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[[0]]'",
 "testable": true,
 "slug": "unique-paths-ii",
 "category": "algorithms",
 "fname": "63.unique-paths-ii.algorithms.py",
 "test_your": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502682576.82_784204_43"
 },
 "test_expected": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502682576.85_784204_43"
 },
 "submit_chart": [
  [
   "29",
   "0.2618"
  ],
  [
   "32",
   "5.8901"
  ],
  [
   "33",
   "0.5236"
  ],
  [
   "35",
   "11.7801"
  ],
  [
   "36",
   "8.2461"
  ],
  [
   "38",
   "6.9372"
  ],
  [
   "39",
   "13.8743"
  ],
  [
   "42",
   "14.7906"
  ],
  [
   "43",
   "0.5236"
  ],
  [
   "45",
   "7.4607"
  ],
  [
   "46",
   "3.0105"
  ],
  [
   "48",
   "1.7016"
  ],
  [
   "49",
   "5.1047"
  ],
  [
   "52",
   "2.7487"
  ],
  [
   "55",
   "1.9634"
  ],
  [
   "56",
   "1.0471"
  ],
  [
   "58",
   "1.1780"
  ],
  [
   "59",
   "2.0942"
  ],
  [
   "62",
   "1.4398"
  ],
  [
   "65",
   "1.3089"
  ],
  [
   "66",
   "0.6545"
  ],
  [
   "68",
   "0.3927"
  ],
  [
   "69",
   "0.3927"
  ],
  [
   "72",
   "0.3927"
  ],
  [
   "75",
   "0.1309"
  ],
  [
   "76",
   "0.1309"
  ],
  [
   "79",
   "0.3927"
  ],
  [
   "82",
   "0.1309"
  ],
  [
   "85",
   "0.1309"
  ],
  [
   "86",
   "0.3927"
  ],
  [
   "88",
   "0.2618"
  ],
  [
   "89",
   "0.5236"
  ],
  [
   "92",
   "0.5236"
  ],
  [
   "95",
   "0.3927"
  ],
  [
   "96",
   "0.1309"
  ],
  [
   "99",
   "0.1309"
  ],
  [
   "102",
   "0.1309"
  ],
  [
   "105",
   "0.1309"
  ],
  [
   "106",
   "0.1309"
  ],
  [
   "112",
   "0.1309"
  ],
  [
   "115",
   "0.5236"
  ],
  [
   "116",
   "0.1309"
  ],
  [
   "135",
   "0.1309"
  ],
  [
   "145",
   "0.1309"
  ],
  [
   "152",
   "0.1309"
  ],
  [
   "169",
   "0.1309"
  ],
  [
   "182",
   "0.1309"
  ],
  [
   "186",
   "0.1309"
  ],
  [
   "242",
   "0.1309"
  ],
  [
   "269",
   "0.1309"
  ],
  [
   "418",
   "0.1309"
  ],
  [
   "598",
   "0.1309"
  ],
  [
   "609",
   "0.1309"
  ],
  [
   "645",
   "0.1309"
  ],
  [
   "705",
   "0.1309"
  ],
  [
   "735",
   "0.1309"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 43,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "39 ms",
  "compare_result": "1111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 43,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 63,
  "name": "Your",
  "id": 113786969
 }
}