{
 "id": 501,
 "ids": "501",
 "state": "notac",
 "name": "Find Mode in Binary Search Tree",
 "key": "find-mode-in-binary-search-tree",
 "link": "https://leetcode.com/problems/find-mode-in-binary-search-tree",
 "locked": false,
 "percent": 38.09133287292818,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "17.7K",
 "totalSubmit": "46.3K",
 "desc": "Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.\r\n\r\n\r\nAssume a BST is defined as follows:\r\n\r\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.\r\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\r\nBoth the left and right subtrees must also be binary search trees.\r\n\r\n\r\n\r\n\r\nFor example:\r\nGiven BST [1,null,2,2],\r\n\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   2\r\n\r\n\r\n\r\nreturn [2].\r\n\r\n\r\nNote:\r\nIf a tree has more than one mode, you can return them in any order.\r\n\r\n\r\nFollow up:\r\nCould you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> findMode(TreeNode* root) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int[] findMode(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def findMode(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findMode(struct TreeNode* root, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int[] FindMode(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar findMode = function(root) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer[]}\r\ndef find_mode(root)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func findMode(_ root: TreeNode?) -> [Int] {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc findMode(root *TreeNode) []int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def findMode(root: TreeNode): Array[Int] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,null,2,2]'",
 "testable": true,
 "slug": "find-mode-in-binary-search-tree",
 "category": "algorithms",
 "fname": "501.find-mode-in-binary-search-tree.algorithms.py",
 "test_your": {
  "code_answer": [
   "[2]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502251637.05_784204_19"
 },
 "test_expected": {
  "code_answer": [
   "[2]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "28 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502251637.07_784204_19"
 },
 "submit_chart": [
  [
   "76",
   "0.3636"
  ],
  [
   "78",
   "0.1818"
  ],
  [
   "79",
   "0.5455"
  ],
  [
   "82",
   "1.4545"
  ],
  [
   "85",
   "2.0000"
  ],
  [
   "86",
   "2.1818"
  ],
  [
   "88",
   "0.9091"
  ],
  [
   "89",
   "2.7273"
  ],
  [
   "92",
   "7.2727"
  ],
  [
   "95",
   "5.2727"
  ],
  [
   "96",
   "2.9091"
  ],
  [
   "98",
   "4.1818"
  ],
  [
   "99",
   "6.5455"
  ],
  [
   "102",
   "10.3636"
  ],
  [
   "105",
   "6.0000"
  ],
  [
   "106",
   "4.3636"
  ],
  [
   "108",
   "2.7273"
  ],
  [
   "109",
   "2.5455"
  ],
  [
   "112",
   "5.0909"
  ],
  [
   "115",
   "2.3636"
  ],
  [
   "116",
   "1.4545"
  ],
  [
   "118",
   "2.0000"
  ],
  [
   "119",
   "1.8182"
  ],
  [
   "122",
   "2.1818"
  ],
  [
   "125",
   "2.5455"
  ],
  [
   "126",
   "0.9091"
  ],
  [
   "128",
   "0.7273"
  ],
  [
   "129",
   "1.4545"
  ],
  [
   "132",
   "2.0000"
  ],
  [
   "135",
   "0.1818"
  ],
  [
   "136",
   "0.3636"
  ],
  [
   "139",
   "1.2727"
  ],
  [
   "142",
   "1.0909"
  ],
  [
   "145",
   "0.7273"
  ],
  [
   "146",
   "0.5455"
  ],
  [
   "148",
   "0.1818"
  ],
  [
   "149",
   "0.1818"
  ],
  [
   "152",
   "0.9091"
  ],
  [
   "155",
   "0.3636"
  ],
  [
   "158",
   "0.9091"
  ],
  [
   "159",
   "0.1818"
  ],
  [
   "162",
   "0.3636"
  ],
  [
   "165",
   "0.7273"
  ],
  [
   "168",
   "0.1818"
  ],
  [
   "172",
   "0.1818"
  ],
  [
   "175",
   "1.0909"
  ],
  [
   "176",
   "0.1818"
  ],
  [
   "178",
   "0.1818"
  ],
  [
   "179",
   "0.3636"
  ],
  [
   "182",
   "0.1818"
  ],
  [
   "185",
   "0.1818"
  ],
  [
   "186",
   "0.1818"
  ],
  [
   "192",
   "0.3636"
  ],
  [
   "196",
   "0.1818"
  ],
  [
   "198",
   "0.1818"
  ],
  [
   "199",
   "0.3636"
  ],
  [
   "216",
   "0.1818"
  ],
  [
   "222",
   "0.1818"
  ],
  [
   "232",
   "0.1818"
  ],
  [
   "239",
   "0.1818"
  ],
  [
   "246",
   "0.3636"
  ],
  [
   "252",
   "0.1818"
  ],
  [
   "258",
   "0.1818"
  ],
  [
   "282",
   "0.1818"
  ],
  [
   "309",
   "0.1818"
  ],
  [
   "316",
   "0.1818"
  ],
  [
   "359",
   "0.1818"
  ],
  [
   "458",
   "0.1818"
  ],
  [
   "552",
   "0.1818"
  ],
  [
   "582",
   "0.1818"
  ],
  [
   "772",
   "0.1818"
  ],
  [
   "1439",
   "0.1818"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 25,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "122 ms",
  "compare_result": "1111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 25,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 501,
  "name": "Your",
  "id": 113106937
 }
}