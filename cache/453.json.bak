{
 "id": 453,
 "ids": "453",
 "state": "None",
 "name": "Minimum Moves to Equal Array Elements",
 "key": "minimum-moves-to-equal-array-elements",
 "link": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements",
 "locked": false,
 "percent": 47.30628705363298,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "27.4K",
 "totalSubmit": "58K",
 "desc": "Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.\r\n\r\nExample:\r\n\r\nInput:\r\n[1,2,3]\r\n\r\nOutput:\r\n3\r\n\r\nExplanation:\r\nOnly three moves are needed (remember each move increments two elements):\r\n\r\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int minMoves(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int minMoves(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def minMoves(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int minMoves(int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int MinMoves(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar minMoves = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef min_moves(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func minMoves(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func minMoves(nums []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def minMoves(nums: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,2,3]'",
 "testable": true,
 "slug": "minimum-moves-to-equal-array-elements",
 "category": "algorithms",
 "fname": "453.minimum-moves-to-equal-array-elements.algorithms.py",
 "test_your": {
  "code_answer": [
   "3"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "36 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500782514.0_784204_4"
 },
 "test_expected": {
  "code_answer": [
   "3"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500782514.01_784204_4"
 },
 "submit_chart": [
  [
   "55",
   "0.7984"
  ],
  [
   "56",
   "0.7984"
  ],
  [
   "58",
   "1.1976"
  ],
  [
   "59",
   "4.9900"
  ],
  [
   "62",
   "10.1796"
  ],
  [
   "63",
   "0.1996"
  ],
  [
   "65",
   "6.1876"
  ],
  [
   "66",
   "3.7924"
  ],
  [
   "68",
   "2.5948"
  ],
  [
   "69",
   "7.5848"
  ],
  [
   "72",
   "7.9840"
  ],
  [
   "75",
   "4.5908"
  ],
  [
   "76",
   "3.9920"
  ],
  [
   "78",
   "2.7944"
  ],
  [
   "79",
   "4.7904"
  ],
  [
   "82",
   "4.5908"
  ],
  [
   "83",
   "0.1996"
  ],
  [
   "85",
   "2.3952"
  ],
  [
   "86",
   "1.5968"
  ],
  [
   "88",
   "0.5988"
  ],
  [
   "89",
   "2.5948"
  ],
  [
   "92",
   "1.9960"
  ],
  [
   "93",
   "0.1996"
  ],
  [
   "95",
   "0.5988"
  ],
  [
   "96",
   "0.3992"
  ],
  [
   "98",
   "0.3992"
  ],
  [
   "99",
   "0.3992"
  ],
  [
   "102",
   "2.1956"
  ],
  [
   "105",
   "0.5988"
  ],
  [
   "106",
   "0.5988"
  ],
  [
   "108",
   "0.3992"
  ],
  [
   "109",
   "0.5988"
  ],
  [
   "112",
   "1.3972"
  ],
  [
   "115",
   "0.7984"
  ],
  [
   "116",
   "0.3992"
  ],
  [
   "118",
   "0.1996"
  ],
  [
   "119",
   "0.3992"
  ],
  [
   "122",
   "0.5988"
  ],
  [
   "126",
   "0.1996"
  ],
  [
   "128",
   "0.3992"
  ],
  [
   "129",
   "0.1996"
  ],
  [
   "132",
   "0.9980"
  ],
  [
   "135",
   "0.7984"
  ],
  [
   "136",
   "0.1996"
  ],
  [
   "138",
   "0.7984"
  ],
  [
   "139",
   "0.7984"
  ],
  [
   "142",
   "0.9980"
  ],
  [
   "143",
   "0.1996"
  ],
  [
   "145",
   "0.5988"
  ],
  [
   "149",
   "0.9980"
  ],
  [
   "152",
   "0.1996"
  ],
  [
   "155",
   "0.5988"
  ],
  [
   "156",
   "0.3992"
  ],
  [
   "158",
   "0.3992"
  ],
  [
   "162",
   "0.3992"
  ],
  [
   "165",
   "0.1996"
  ],
  [
   "166",
   "0.1996"
  ],
  [
   "168",
   "0.3992"
  ],
  [
   "169",
   "0.5988"
  ],
  [
   "172",
   "0.3992"
  ],
  [
   "182",
   "0.1996"
  ],
  [
   "185",
   "0.1996"
  ],
  [
   "188",
   "0.1996"
  ],
  [
   "206",
   "0.1996"
  ],
  [
   "212",
   "0.1996"
  ],
  [
   "215",
   "0.1996"
  ],
  [
   "218",
   "0.1996"
  ],
  [
   "229",
   "0.1996"
  ],
  [
   "232",
   "0.1996"
  ],
  [
   "245",
   "0.1996"
  ],
  [
   "259",
   "0.1996"
  ],
  [
   "292",
   "0.1996"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 84,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "78 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 84,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 453,
  "name": "Your",
  "id": 110754947
 }
}