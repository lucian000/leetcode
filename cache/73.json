{
 "id": 73,
 "ids": "73",
 "state": "None",
 "name": "Set Matrix Zeroes",
 "key": "set-matrix-zeroes",
 "link": "https://leetcode.com/problems/set-matrix-zeroes",
 "locked": false,
 "percent": 35.81430683311432,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "",
 "totalSubmit": "",
 "desc": "\r\nGiven a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.\r\n\r\n\r\nclick to show follow up.\r\n\r\nFollow up:\r\n\r\n\r\nDid you use extra space?\r\nA straight forward solution using O(mn) space is probably a bad idea.\r\nA simple improvement uses O(m + n) space, but still not the best solution.\r\nCould you devise a constant space solution?\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    void setZeroes(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public void setZeroes(int[][] matrix) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def setZeroes(self, matrix):\r\n        \"\"\"\r\n        :type matrix: List[List[int]]\r\n        :rtype: void Do not return anything, modify matrix in-place instead.\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "void setZeroes(int** matrix, int matrixRowSize, int matrixColSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public void SetZeroes(int[,] matrix) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[][]} matrix\r\n * @return {void} Do not return anything, modify matrix in-place instead.\r\n */\r\nvar setZeroes = function(matrix) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[][]} matrix\r\n# @return {Void} Do not return anything, modify matrix in-place instead.\r\ndef set_zeroes(matrix)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func setZeroes(_ matrix: inout [[Int]]) {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func setZeroes(matrix [][]int)  {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def setZeroes(matrix: Array[Array[Int]]): Unit = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[[0]]'",
 "testable": true
}