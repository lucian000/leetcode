{"id": 600, "ids": "600", "state": "None", "name": "Non-negative Integers without Consecutive Ones", "key": "non-negative-integers-without-consecutive-ones", "link": "https://leetcode.com/problems/non-negative-integers-without-consecutive-ones", "locked": false, "percent": 27.875220718069453, "level": "Hard", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "Given a positive integer n, find the number of non-negative integers less than or equal to n, whose binary representations do NOT contain consecutive ones.\r\n\r\nExample 1:\r\n\r\nInput: 5\r\nOutput: 5\r\nExplanation: \r\nHere are the non-negative integers <= 5 with their corresponding binary representations:\r\n0 : 0\r\n1 : 1\r\n2 : 10\r\n3 : 11\r\n4 : 100\r\n5 : 101\r\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \r\n\r\n\r\n\r\nNote:\r\n1 <= n <= 109\r\n\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    int findIntegers(int num) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int findIntegers(int num) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def findIntegers(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "}, {"value": "python3", "text": "Python3", "defaultCode": "class Solution:\r\n    def findIntegers(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "int findIntegers(int num) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int FindIntegers(int num) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number} num\r\n * @return {number}\r\n */\r\nvar findIntegers = function(num) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer} num\r\n# @return {Integer}\r\ndef find_integers(num)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\r\n    func findIntegers(_ num: Int) -> Int {\r\n        \r\n    }\r\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func findIntegers(num int) int {\r\n    \r\n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def findIntegers(num: Int): Int = {\n        \n    }\n}"}], "testcase": "1", "testable": true}