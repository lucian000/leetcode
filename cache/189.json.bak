{
 "id": 189,
 "ids": "189",
 "state": "ac",
 "name": "Rotate Array",
 "key": "rotate-array",
 "link": "https://leetcode.com/problems/rotate-array",
 "locked": false,
 "percent": 24.442582915266634,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "131K",
 "totalSubmit": "536K",
 "desc": "Rotate an array of n elements to the right by k steps.\r\nFor example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4]. \r\n\r\nNote:\r\nTry to come up as many solutions as you can, there are at least 3 different ways to solve this problem.\r\n\r\n\r\n[show hint]\r\nHint:\r\nCould you do it in-place with O(1) extra space?\r\n\r\n\r\nRelated problem: Reverse Words in a String II\r\n\r\nCredits:Special thanks to @Freezen for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    void rotate(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public void rotate(int[] nums, int k) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def rotate(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: void Do not return anything, modify nums in-place instead.\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "void rotate(int* nums, int numsSize, int k) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public void Rotate(int[] nums, int k) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {void} Do not return anything, modify nums in-place instead.\r\n */\r\nvar rotate = function(nums, k) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Void} Do not return anything, modify nums in-place instead.\r\ndef rotate(nums, k)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func rotate(_ nums: inout [Int], _ k: Int) {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func rotate(nums []int, k int)  {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def rotate(nums: Array[Int], k: Int): Unit = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1]\\n0'",
 "testable": true,
 "slug": "rotate-array",
 "category": "algorithms",
 "fname": "189.rotate-array.algorithms.py",
 "test_your": {
  "code_answer": [
   "[1]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502624817.96_784204_9"
 },
 "test_expected": {
  "code_answer": [
   "[1]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502624817.98_784204_9"
 },
 "submit_chart": [
  [
   "59",
   "0.1594"
  ],
  [
   "62",
   "4.1434"
  ],
  [
   "63",
   "0.3984"
  ],
  [
   "65",
   "7.4104"
  ],
  [
   "66",
   "4.3825"
  ],
  [
   "68",
   "3.8247"
  ],
  [
   "69",
   "9.1633"
  ],
  [
   "72",
   "12.0319"
  ],
  [
   "73",
   "0.6375"
  ],
  [
   "75",
   "5.3386"
  ],
  [
   "76",
   "2.8685"
  ],
  [
   "78",
   "2.6295"
  ],
  [
   "79",
   "4.5418"
  ],
  [
   "82",
   "6.6932"
  ],
  [
   "83",
   "0.2390"
  ],
  [
   "85",
   "2.8685"
  ],
  [
   "86",
   "1.4343"
  ],
  [
   "88",
   "0.6375"
  ],
  [
   "89",
   "1.9124"
  ],
  [
   "92",
   "1.5936"
  ],
  [
   "95",
   "0.8765"
  ],
  [
   "96",
   "0.3187"
  ],
  [
   "98",
   "0.3984"
  ],
  [
   "99",
   "0.3984"
  ],
  [
   "102",
   "1.3546"
  ],
  [
   "105",
   "0.6375"
  ],
  [
   "106",
   "0.1594"
  ],
  [
   "108",
   "0.3984"
  ],
  [
   "109",
   "0.6375"
  ],
  [
   "112",
   "0.9562"
  ],
  [
   "115",
   "0.3984"
  ],
  [
   "116",
   "0.0797"
  ],
  [
   "118",
   "0.2390"
  ],
  [
   "119",
   "0.6375"
  ],
  [
   "122",
   "0.9562"
  ],
  [
   "125",
   "0.6375"
  ],
  [
   "126",
   "0.3984"
  ],
  [
   "128",
   "0.7171"
  ],
  [
   "129",
   "0.2390"
  ],
  [
   "132",
   "0.1594"
  ],
  [
   "135",
   "0.2390"
  ],
  [
   "136",
   "0.0797"
  ],
  [
   "138",
   "0.0797"
  ],
  [
   "139",
   "0.2390"
  ],
  [
   "142",
   "0.3187"
  ],
  [
   "145",
   "0.1594"
  ],
  [
   "149",
   "0.1594"
  ],
  [
   "152",
   "0.1594"
  ],
  [
   "158",
   "0.0797"
  ],
  [
   "162",
   "0.1594"
  ],
  [
   "165",
   "0.1594"
  ],
  [
   "169",
   "0.0797"
  ],
  [
   "176",
   "0.0797"
  ],
  [
   "179",
   "0.1594"
  ],
  [
   "182",
   "0.0797"
  ],
  [
   "185",
   "0.0797"
  ],
  [
   "188",
   "0.1594"
  ],
  [
   "189",
   "0.0797"
  ],
  [
   "192",
   "0.1594"
  ],
  [
   "193",
   "0.0797"
  ],
  [
   "195",
   "0.5578"
  ],
  [
   "196",
   "0.1594"
  ],
  [
   "198",
   "0.2390"
  ],
  [
   "199",
   "0.5578"
  ],
  [
   "202",
   "1.2749"
  ],
  [
   "205",
   "0.3984"
  ],
  [
   "206",
   "0.2390"
  ],
  [
   "208",
   "0.2390"
  ],
  [
   "209",
   "1.1155"
  ],
  [
   "212",
   "0.7171"
  ],
  [
   "215",
   "0.3984"
  ],
  [
   "216",
   "0.1594"
  ],
  [
   "218",
   "0.4781"
  ],
  [
   "219",
   "0.6375"
  ],
  [
   "222",
   "0.6375"
  ],
  [
   "223",
   "0.0797"
  ],
  [
   "225",
   "0.8765"
  ],
  [
   "226",
   "0.0797"
  ],
  [
   "228",
   "0.0797"
  ],
  [
   "229",
   "0.2390"
  ],
  [
   "232",
   "0.7968"
  ],
  [
   "235",
   "0.2390"
  ],
  [
   "236",
   "0.0797"
  ],
  [
   "238",
   "0.0797"
  ],
  [
   "239",
   "0.3187"
  ],
  [
   "242",
   "0.3984"
  ],
  [
   "245",
   "0.0797"
  ],
  [
   "248",
   "0.1594"
  ],
  [
   "249",
   "0.3187"
  ],
  [
   "252",
   "0.2390"
  ],
  [
   "255",
   "0.2390"
  ],
  [
   "258",
   "0.0797"
  ],
  [
   "259",
   "0.0797"
  ],
  [
   "262",
   "0.2390"
  ],
  [
   "269",
   "0.0797"
  ],
  [
   "275",
   "0.0797"
  ],
  [
   "276",
   "0.1594"
  ],
  [
   "289",
   "0.0797"
  ],
  [
   "292",
   "0.0797"
  ],
  [
   "295",
   "0.0797"
  ],
  [
   "296",
   "0.0797"
  ],
  [
   "302",
   "0.0797"
  ],
  [
   "308",
   "0.0797"
  ],
  [
   "309",
   "0.0797"
  ],
  [
   "325",
   "0.1594"
  ],
  [
   "332",
   "0.0797"
  ],
  [
   "362",
   "0.0797"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 33,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "62 ms",
  "compare_result": "111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 33,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 189,
  "name": "Your",
  "id": 113688624
 },
 "file": "189.rotate-array.algorithms.py"
}