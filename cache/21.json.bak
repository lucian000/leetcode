{
 "id": 21,
 "ids": "21",
 "state": "None",
 "name": "Merge Two Sorted Lists",
 "key": "merge-two-sorted-lists",
 "link": "https://leetcode.com/problems/merge-two-sorted-lists",
 "locked": false,
 "percent": 38.98157051548656,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "234.3K",
 "totalSubmit": "601.1K",
 "desc": "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def mergeTwoLists(self, l1, l2):\r\n        \"\"\"\r\n        :type l1: ListNode\r\n        :type l2: ListNode\r\n        :rtype: ListNode\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} l1\r\n * @param {ListNode} l2\r\n * @return {ListNode}\r\n */\r\nvar mergeTwoLists = function(l1, l2) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} l1\r\n# @param {ListNode} l2\r\n# @return {ListNode}\r\ndef merge_two_lists(l1, l2)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public var val: Int\r\n *     public var next: ListNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.next = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def mergeTwoLists(l1: ListNode, l2: ListNode): ListNode = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]\\n[]'",
 "testable": true,
 "slug": "merge-two-sorted-lists",
 "category": "algorithms",
 "fname": "21.merge-two-sorted-lists.algorithms.py",
 "test_your": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "45 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501600679.43_784204_9"
 },
 "test_expected": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501600679.45_784204_9"
 },
 "submit_chart": [
  [
   "38",
   "0.0794"
  ],
  [
   "39",
   "0.0397"
  ],
  [
   "42",
   "4.9603"
  ],
  [
   "43",
   "0.4365"
  ],
  [
   "45",
   "8.3333"
  ],
  [
   "46",
   "5.1190"
  ],
  [
   "48",
   "6.0317"
  ],
  [
   "49",
   "12.5000"
  ],
  [
   "52",
   "15.5159"
  ],
  [
   "53",
   "0.4762"
  ],
  [
   "55",
   "7.4603"
  ],
  [
   "56",
   "4.2857"
  ],
  [
   "58",
   "2.8571"
  ],
  [
   "59",
   "6.1111"
  ],
  [
   "62",
   "6.3095"
  ],
  [
   "65",
   "3.4524"
  ],
  [
   "66",
   "1.2698"
  ],
  [
   "68",
   "0.8333"
  ],
  [
   "69",
   "1.8254"
  ],
  [
   "72",
   "2.6984"
  ],
  [
   "75",
   "0.9921"
  ],
  [
   "76",
   "0.9524"
  ],
  [
   "78",
   "0.4762"
  ],
  [
   "79",
   "1.1905"
  ],
  [
   "82",
   "1.4683"
  ],
  [
   "85",
   "0.9524"
  ],
  [
   "86",
   "0.3175"
  ],
  [
   "88",
   "0.0794"
  ],
  [
   "89",
   "0.5159"
  ],
  [
   "92",
   "0.5159"
  ],
  [
   "95",
   "0.2381"
  ],
  [
   "96",
   "0.0397"
  ],
  [
   "98",
   "0.0794"
  ],
  [
   "99",
   "0.1984"
  ],
  [
   "102",
   "0.2778"
  ],
  [
   "105",
   "0.1190"
  ],
  [
   "106",
   "0.0397"
  ],
  [
   "108",
   "0.0397"
  ],
  [
   "109",
   "0.1587"
  ],
  [
   "112",
   "0.0397"
  ],
  [
   "115",
   "0.0397"
  ],
  [
   "119",
   "0.0397"
  ],
  [
   "122",
   "0.1190"
  ],
  [
   "128",
   "0.0397"
  ],
  [
   "135",
   "0.0794"
  ],
  [
   "139",
   "0.0397"
  ],
  [
   "142",
   "0.0397"
  ],
  [
   "148",
   "0.0397"
  ],
  [
   "149",
   "0.0397"
  ],
  [
   "159",
   "0.0397"
  ],
  [
   "162",
   "0.0794"
  ],
  [
   "212",
   "0.0397"
  ],
  [
   "245",
   "0.0397"
  ],
  [
   "279",
   "0.0397"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 208,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "49 ms",
  "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 208,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 21,
  "name": "Your",
  "id": 112048415
 }
}