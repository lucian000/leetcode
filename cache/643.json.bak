{"id": 643, "ids": "643", "state": "None", "name": "Maximum Average Subarray I", "key": "maximum-average-subarray-i", "link": "https://leetcode.com/problems/maximum-average-subarray-i", "locked": false, "percent": 40.298723897911835, "level": "Easy", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "\r\nGiven an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.\r\n\r\n\r\nExample 1:\r\n\r\nInput: [1,12,-5,-6,50,3], k = 4\r\nOutput: 12.75\r\nExplanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75\r\n\r\n\r\n\r\nNote:\r\n\r\n1 <= k <= n <= 30,000.\r\nElements of the given array will be in the range [-10,000, 10,000].\r\n\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    double findMaxAverage(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public double findMaxAverage(int[] nums, int k) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def findMaxAverage(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: float\r\n        \"\"\""}, {"value": "python3", "text": "Python3", "defaultCode": "class Solution:\r\n    def findMaxAverage(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: float\r\n        \"\"\""}, {"value": "c", "text": "C", "defaultCode": "double findMaxAverage(int* nums, int numsSize, int k) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public double FindMaxAverage(int[] nums, int k) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar findMaxAverage = function(nums, k) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Float}\r\ndef find_max_average(nums, k)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\r\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\r\n        \r\n    }\r\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func findMaxAverage(nums []int, k int) float64 {\r\n    \r\n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\r\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\r\n        \r\n    }\r\n}"}], "testcase": "'[1,12,-5,-6,50,3]\\n4'", "testable": true}