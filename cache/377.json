{
 "id": 377,
 "ids": "377",
 "state": "None",
 "name": "Combination Sum IV",
 "key": "combination-sum-iv",
 "link": "https://leetcode.com/problems/combination-sum-iv",
 "locked": false,
 "percent": 41.83059323346536,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "37.8K",
 "totalSubmit": "90.4K",
 "desc": " Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.\r\n\r\nExample:\r\n\r\nnums = [1, 2, 3]\r\ntarget = 4\r\n\r\nThe possible combination ways are:\r\n(1, 1, 1, 1)\r\n(1, 1, 2)\r\n(1, 2, 1)\r\n(1, 3)\r\n(2, 1, 1)\r\n(2, 2)\r\n(3, 1)\r\n\r\nNote that different sequences are counted as different combinations.\r\n\r\nTherefore the output is 7.\r\n\r\n\r\n\r\nFollow up:\r\nWhat if negative numbers are allowed in the given array?\r\nHow does it change the problem?\r\nWhat limitation we need to add to the question to allow negative numbers? \r\n\r\nCredits:Special thanks to @pbrother for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int combinationSum4(vector<int>& nums, int target) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int combinationSum4(int[] nums, int target) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def combinationSum4(self, nums, target):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int combinationSum4(int* nums, int numsSize, int target) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int CombinationSum4(int[] nums, int target) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number}\r\n */\r\nvar combinationSum4 = function(nums, target) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Integer}\r\ndef combination_sum4(nums, target)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func combinationSum4(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func combinationSum4(nums []int, target int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def combinationSum4(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,2,3]\\n4'",
 "testable": true,
 "slug": "combination-sum-iv",
 "category": "algorithms",
 "fname": "377.combination-sum-iv.algorithms.py"
}