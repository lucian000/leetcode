{
 "id": 414,
 "ids": "414",
 "state": "None",
 "name": "Third Maximum Number",
 "key": "third-maximum-number",
 "link": "https://leetcode.com/problems/third-maximum-number",
 "locked": false,
 "percent": 27.809667223282442,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "37.3K",
 "totalSubmit": "134.1K",
 "desc": "Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).\r\n\r\nExample 1:\r\n\r\nInput: [3, 2, 1]\r\n\r\nOutput: 1\r\n\r\nExplanation: The third maximum is 1.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [1, 2]\r\n\r\nOutput: 2\r\n\r\nExplanation: The third maximum does not exist, so the maximum (2) is returned instead.\r\n\r\n\r\n\r\nExample 3:\r\n\r\nInput: [2, 2, 3, 1]\r\n\r\nOutput: 1\r\n\r\nExplanation: Note that the third maximum here means the third maximum distinct number.\r\nBoth numbers with value 2 are both considered as second maximum.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int thirdMax(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int thirdMax(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def thirdMax(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\""
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int thirdMax(int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int ThirdMax(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar thirdMax = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef third_max(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func thirdMax(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func thirdMax(nums []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def thirdMax(nums: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[3,2,1]'",
 "testable": true,
 "slug": "third-maximum-number",
 "category": "algorithms",
 "fname": "414.third-maximum-number.algorithms.py",
 "test_your": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "36 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502028144.2_784204_30"
 },
 "test_expected": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "36 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502028144.22_784204_30"
 },
 "submit_chart": [
  [
   "32",
   "2.0277"
  ],
  [
   "35",
   "6.1900"
  ],
  [
   "36",
   "5.3362"
  ],
  [
   "38",
   "5.9765"
  ],
  [
   "39",
   "13.8741"
  ],
  [
   "42",
   "15.0480"
  ],
  [
   "43",
   "0.3202"
  ],
  [
   "45",
   "8.8581"
  ],
  [
   "46",
   "5.3362"
  ],
  [
   "48",
   "2.4546"
  ],
  [
   "49",
   "5.4429"
  ],
  [
   "52",
   "7.6841"
  ],
  [
   "53",
   "0.2134"
  ],
  [
   "55",
   "2.5614"
  ],
  [
   "56",
   "1.7076"
  ],
  [
   "58",
   "0.4269"
  ],
  [
   "59",
   "2.1345"
  ],
  [
   "62",
   "2.8815"
  ],
  [
   "63",
   "0.1067"
  ],
  [
   "65",
   "0.7471"
  ],
  [
   "66",
   "0.7471"
  ],
  [
   "68",
   "0.2134"
  ],
  [
   "69",
   "0.5336"
  ],
  [
   "72",
   "0.7471"
  ],
  [
   "75",
   "0.4269"
  ],
  [
   "76",
   "0.1067"
  ],
  [
   "78",
   "0.2134"
  ],
  [
   "79",
   "0.2134"
  ],
  [
   "82",
   "0.8538"
  ],
  [
   "85",
   "0.3202"
  ],
  [
   "88",
   "0.2134"
  ],
  [
   "89",
   "0.2134"
  ],
  [
   "92",
   "0.1067"
  ],
  [
   "95",
   "0.1067"
  ],
  [
   "102",
   "0.2134"
  ],
  [
   "105",
   "0.1067"
  ],
  [
   "112",
   "0.2134"
  ],
  [
   "118",
   "0.1067"
  ],
  [
   "122",
   "0.1067"
  ],
  [
   "126",
   "0.2134"
  ],
  [
   "139",
   "0.1067"
  ],
  [
   "142",
   "0.1067"
  ],
  [
   "152",
   "0.2134"
  ],
  [
   "165",
   "0.1067"
  ],
  [
   "166",
   "0.1067"
  ],
  [
   "175",
   "0.1067"
  ],
  [
   "176",
   "0.1067"
  ],
  [
   "182",
   "0.1067"
  ],
  [
   "198",
   "0.1067"
  ],
  [
   "205",
   "0.2134"
  ],
  [
   "212",
   "0.1067"
  ],
  [
   "216",
   "0.1067"
  ],
  [
   "228",
   "0.1067"
  ],
  [
   "229",
   "0.1067"
  ],
  [
   "238",
   "0.1067"
  ],
  [
   "239",
   "0.1067"
  ],
  [
   "242",
   "0.1067"
  ],
  [
   "252",
   "0.1067"
  ],
  [
   "272",
   "0.1067"
  ],
  [
   "296",
   "0.1067"
  ],
  [
   "299",
   "0.1067"
  ],
  [
   "312",
   "0.1067"
  ],
  [
   "389",
   "0.1067"
  ],
  [
   "392",
   "0.1067"
  ],
  [
   "405",
   "0.1067"
  ],
  [
   "459",
   "0.1067"
  ],
  [
   "506",
   "0.1067"
  ],
  [
   "702",
   "0.1067"
  ],
  [
   "855",
   "0.1067"
  ],
  [
   "886",
   "0.1067"
  ],
  [
   "888",
   "0.1067"
  ],
  [
   "932",
   "0.1067"
  ],
  [
   "966",
   "0.1067"
  ],
  [
   "1022",
   "0.1067"
  ],
  [
   "1092",
   "0.1067"
  ],
  [
   "1109",
   "0.1067"
  ],
  [
   "1235",
   "0.1067"
  ],
  [
   "1662",
   "0.1067"
  ],
  [
   "1678",
   "0.1067"
  ],
  [
   "1742",
   "0.1067"
  ],
  [
   "1808",
   "0.1067"
  ],
  [
   "1812",
   "0.1067"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 26,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "38 ms",
  "compare_result": "11111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 26,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 414,
  "name": "Your",
  "id": 112726681
 }
}