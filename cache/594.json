{
 "id": 594,
 "ids": "594",
 "state": "None",
 "name": "Longest Harmonious Subsequence",
 "key": "longest-harmonious-subsequence",
 "link": "https://leetcode.com/problems/longest-harmonious-subsequence",
 "locked": false,
 "percent": 40.4775828460039,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "8.3K",
 "totalSubmit": "20.5K",
 "desc": "We define a harmonious array is an array where the difference between its maximum value and its minimum value is exactly 1.\r\n\r\nNow, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible subsequences.\r\n\r\nExample 1:\r\n\r\nInput: [1,3,2,2,5,2,3,7]\r\nOutput: 5\r\nExplanation: The longest harmonious subsequence is [3,2,2,2,3].\r\n\r\n\r\n\r\nNote:\r\nThe length of the input array will not exceed 20,000.\r\n\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int findLHS(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int findLHS(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def findLHS(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def findLHS(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int findLHS(int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int FindLHS(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findLHS = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_lhs(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func findLHS(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func findLHS(nums []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def findLHS(nums: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,3,2,2,5,2,3,7]'",
 "testable": true,
 "slug": "longest-harmonious-subsequence",
 "category": "algorithms",
 "fname": "594.longest-harmonious-subsequence.algorithms.py",
 "test_your": {
  "code_answer": [
   "5"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "38 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502031127.75_784204_37"
 },
 "test_expected": {
  "code_answer": [
   "5"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502031127.77_784204_37"
 },
 "submit_chart": [
  [
   "102",
   "0.1511"
  ],
  [
   "105",
   "0.3021"
  ],
  [
   "106",
   "0.3021"
  ],
  [
   "108",
   "0.3021"
  ],
  [
   "109",
   "0.4532"
  ],
  [
   "112",
   "0.3021"
  ],
  [
   "115",
   "1.0574"
  ],
  [
   "116",
   "0.3021"
  ],
  [
   "118",
   "0.1511"
  ],
  [
   "119",
   "1.0574"
  ],
  [
   "122",
   "2.1148"
  ],
  [
   "125",
   "2.1148"
  ],
  [
   "126",
   "0.6042"
  ],
  [
   "128",
   "0.6042"
  ],
  [
   "129",
   "1.0574"
  ],
  [
   "132",
   "1.9637"
  ],
  [
   "135",
   "1.6616"
  ],
  [
   "136",
   "0.3021"
  ],
  [
   "138",
   "0.9063"
  ],
  [
   "139",
   "1.5106"
  ],
  [
   "142",
   "2.2659"
  ],
  [
   "145",
   "1.5106"
  ],
  [
   "146",
   "1.0574"
  ],
  [
   "148",
   "0.1511"
  ],
  [
   "149",
   "0.7553"
  ],
  [
   "152",
   "2.1148"
  ],
  [
   "155",
   "1.3595"
  ],
  [
   "156",
   "1.0574"
  ],
  [
   "158",
   "0.3021"
  ],
  [
   "159",
   "1.6616"
  ],
  [
   "162",
   "2.2659"
  ],
  [
   "165",
   "1.3595"
  ],
  [
   "166",
   "1.0574"
  ],
  [
   "168",
   "0.9063"
  ],
  [
   "169",
   "1.2085"
  ],
  [
   "172",
   "3.4743"
  ],
  [
   "173",
   "0.1511"
  ],
  [
   "175",
   "1.3595"
  ],
  [
   "176",
   "1.5106"
  ],
  [
   "178",
   "0.4532"
  ],
  [
   "179",
   "1.8127"
  ],
  [
   "182",
   "2.4169"
  ],
  [
   "183",
   "0.1511"
  ],
  [
   "185",
   "1.8127"
  ],
  [
   "186",
   "0.7553"
  ],
  [
   "188",
   "1.0574"
  ],
  [
   "189",
   "3.0211"
  ],
  [
   "192",
   "3.6254"
  ],
  [
   "195",
   "1.0574"
  ],
  [
   "196",
   "1.8127"
  ],
  [
   "198",
   "0.9063"
  ],
  [
   "199",
   "1.5106"
  ],
  [
   "202",
   "1.2085"
  ],
  [
   "205",
   "1.3595"
  ],
  [
   "206",
   "0.7553"
  ],
  [
   "208",
   "0.4532"
  ],
  [
   "209",
   "1.5106"
  ],
  [
   "212",
   "2.1148"
  ],
  [
   "215",
   "1.2085"
  ],
  [
   "216",
   "0.9063"
  ],
  [
   "218",
   "0.1511"
  ],
  [
   "219",
   "1.2085"
  ],
  [
   "222",
   "1.0574"
  ],
  [
   "225",
   "1.0574"
  ],
  [
   "226",
   "0.4532"
  ],
  [
   "228",
   "0.3021"
  ],
  [
   "229",
   "0.6042"
  ],
  [
   "232",
   "1.8127"
  ],
  [
   "235",
   "1.2085"
  ],
  [
   "236",
   "0.6042"
  ],
  [
   "238",
   "0.1511"
  ],
  [
   "239",
   "1.2085"
  ],
  [
   "242",
   "0.9063"
  ],
  [
   "245",
   "0.9063"
  ],
  [
   "248",
   "0.1511"
  ],
  [
   "249",
   "0.6042"
  ],
  [
   "252",
   "1.2085"
  ],
  [
   "255",
   "0.3021"
  ],
  [
   "258",
   "0.1511"
  ],
  [
   "259",
   "0.4532"
  ],
  [
   "262",
   "0.4532"
  ],
  [
   "265",
   "0.7553"
  ],
  [
   "272",
   "0.7553"
  ],
  [
   "275",
   "0.7553"
  ],
  [
   "276",
   "0.4532"
  ],
  [
   "278",
   "0.6042"
  ],
  [
   "279",
   "0.4532"
  ],
  [
   "282",
   "0.3021"
  ],
  [
   "286",
   "0.4532"
  ],
  [
   "288",
   "0.1511"
  ],
  [
   "292",
   "0.6042"
  ],
  [
   "295",
   "0.3021"
  ],
  [
   "296",
   "0.1511"
  ],
  [
   "299",
   "0.1511"
  ],
  [
   "302",
   "0.6042"
  ],
  [
   "305",
   "0.3021"
  ],
  [
   "306",
   "0.1511"
  ],
  [
   "309",
   "0.1511"
  ],
  [
   "312",
   "0.1511"
  ],
  [
   "316",
   "0.3021"
  ],
  [
   "319",
   "0.1511"
  ],
  [
   "325",
   "0.4532"
  ],
  [
   "329",
   "0.3021"
  ],
  [
   "332",
   "0.1511"
  ],
  [
   "335",
   "0.1511"
  ],
  [
   "345",
   "0.1511"
  ],
  [
   "349",
   "0.1511"
  ],
  [
   "352",
   "0.4532"
  ],
  [
   "372",
   "0.4532"
  ],
  [
   "378",
   "0.1511"
  ],
  [
   "395",
   "0.1511"
  ],
  [
   "402",
   "0.1511"
  ],
  [
   "408",
   "0.1511"
  ],
  [
   "415",
   "0.1511"
  ],
  [
   "462",
   "0.1511"
  ],
  [
   "466",
   "0.1511"
  ],
  [
   "472",
   "0.1511"
  ],
  [
   "479",
   "0.1511"
  ],
  [
   "492",
   "0.1511"
  ],
  [
   "502",
   "0.1511"
  ],
  [
   "605",
   "0.1511"
  ],
  [
   "629",
   "0.1511"
  ],
  [
   "659",
   "0.1511"
  ],
  [
   "809",
   "0.1511"
  ],
  [
   "1646",
   "0.1511"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 201,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "139 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 201,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 594,
  "name": "Your",
  "id": 112730363
 }
}