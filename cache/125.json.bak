{
 "id": 125,
 "ids": "125",
 "state": "None",
 "name": "Valid Palindrome",
 "key": "valid-palindrome",
 "link": "https://leetcode.com/problems/valid-palindrome",
 "locked": false,
 "percent": 26.112860668993108,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "165.7K",
 "totalSubmit": "634.6K",
 "desc": "\r\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\r\n\r\n\r\n\r\nFor example,\r\n\"A man, a plan, a canal: Panama\" is a palindrome.\r\n\"race a car\" is not a palindrome.\r\n\r\n\r\n\r\nNote:\r\nHave you consider that the string might be empty? This is a good question to ask during an interview.\r\n\r\nFor the purpose of this problem, we define empty string as valid palindrome.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool isPalindrome(string s) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean isPalindrome(String s) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def isPalindrome(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool isPalindrome(char* s) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool IsPalindrome(string s) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar isPalindrome = function(s) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\r\n# @return {Boolean}\r\ndef is_palindrome(s)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func isPalindrome(_ s: String) -> Bool {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func isPalindrome(s string) bool {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def isPalindrome(s: String): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"\"'",
 "testable": true,
 "slug": "valid-palindrome",
 "category": "algorithms",
 "fname": "125.valid-palindrome.algorithms.py",
 "test_your": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502033504.59_784204_47"
 },
 "test_expected": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502033504.61_784204_47"
 },
 "submit_chart": [
  [
   "48",
   "0.1503"
  ],
  [
   "49",
   "0.4508"
  ],
  [
   "52",
   "0.6011"
  ],
  [
   "53",
   "0.1503"
  ],
  [
   "55",
   "1.2021"
  ],
  [
   "56",
   "0.3005"
  ],
  [
   "58",
   "0.6011"
  ],
  [
   "59",
   "1.9534"
  ],
  [
   "62",
   "3.4560"
  ],
  [
   "65",
   "2.2539"
  ],
  [
   "66",
   "1.9534"
  ],
  [
   "68",
   "1.8783"
  ],
  [
   "69",
   "3.9820"
  ],
  [
   "72",
   "8.4147"
  ],
  [
   "73",
   "0.0751"
  ],
  [
   "75",
   "6.3862"
  ],
  [
   "76",
   "3.5312"
  ],
  [
   "78",
   "1.6529"
  ],
  [
   "79",
   "6.3110"
  ],
  [
   "82",
   "6.6116"
  ],
  [
   "83",
   "0.1503"
  ],
  [
   "85",
   "4.5079"
  ],
  [
   "86",
   "1.8783"
  ],
  [
   "88",
   "1.4275"
  ],
  [
   "89",
   "3.2307"
  ],
  [
   "92",
   "3.9820"
  ],
  [
   "93",
   "0.0751"
  ],
  [
   "95",
   "2.0285"
  ],
  [
   "96",
   "1.3524"
  ],
  [
   "98",
   "1.2772"
  ],
  [
   "99",
   "1.6529"
  ],
  [
   "102",
   "2.4793"
  ],
  [
   "105",
   "1.7280"
  ],
  [
   "106",
   "0.6762"
  ],
  [
   "108",
   "0.4508"
  ],
  [
   "109",
   "1.0518"
  ],
  [
   "112",
   "1.9534"
  ],
  [
   "113",
   "0.0751"
  ],
  [
   "115",
   "0.8264"
  ],
  [
   "116",
   "0.5259"
  ],
  [
   "118",
   "0.5259"
  ],
  [
   "119",
   "0.8264"
  ],
  [
   "122",
   "0.9767"
  ],
  [
   "123",
   "0.0751"
  ],
  [
   "125",
   "0.5259"
  ],
  [
   "126",
   "0.4508"
  ],
  [
   "128",
   "0.5259"
  ],
  [
   "129",
   "0.9016"
  ],
  [
   "132",
   "0.9767"
  ],
  [
   "135",
   "0.4508"
  ],
  [
   "136",
   "0.0751"
  ],
  [
   "139",
   "0.3757"
  ],
  [
   "142",
   "0.5259"
  ],
  [
   "145",
   "0.3005"
  ],
  [
   "146",
   "0.1503"
  ],
  [
   "148",
   "0.3005"
  ],
  [
   "149",
   "0.0751"
  ],
  [
   "152",
   "0.3005"
  ],
  [
   "155",
   "0.2254"
  ],
  [
   "156",
   "0.3005"
  ],
  [
   "158",
   "0.0751"
  ],
  [
   "159",
   "0.1503"
  ],
  [
   "162",
   "0.0751"
  ],
  [
   "165",
   "0.2254"
  ],
  [
   "166",
   "0.0751"
  ],
  [
   "168",
   "0.1503"
  ],
  [
   "169",
   "0.4508"
  ],
  [
   "172",
   "0.1503"
  ],
  [
   "175",
   "0.1503"
  ],
  [
   "176",
   "0.2254"
  ],
  [
   "178",
   "0.0751"
  ],
  [
   "179",
   "0.0751"
  ],
  [
   "185",
   "0.0751"
  ],
  [
   "189",
   "0.0751"
  ],
  [
   "192",
   "0.1503"
  ],
  [
   "195",
   "0.1503"
  ],
  [
   "196",
   "0.0751"
  ],
  [
   "199",
   "0.0751"
  ],
  [
   "202",
   "0.1503"
  ],
  [
   "205",
   "0.0751"
  ],
  [
   "209",
   "0.0751"
  ],
  [
   "212",
   "0.0751"
  ],
  [
   "215",
   "0.1503"
  ],
  [
   "216",
   "0.0751"
  ],
  [
   "219",
   "0.0751"
  ],
  [
   "225",
   "0.0751"
  ],
  [
   "226",
   "0.0751"
  ],
  [
   "228",
   "0.0751"
  ],
  [
   "229",
   "0.1503"
  ],
  [
   "238",
   "0.1503"
  ],
  [
   "239",
   "0.0751"
  ],
  [
   "249",
   "0.0751"
  ],
  [
   "258",
   "0.0751"
  ],
  [
   "259",
   "0.0751"
  ],
  [
   "265",
   "0.0751"
  ],
  [
   "266",
   "0.0751"
  ],
  [
   "268",
   "0.0751"
  ],
  [
   "275",
   "0.1503"
  ],
  [
   "279",
   "0.0751"
  ],
  [
   "282",
   "0.1503"
  ],
  [
   "285",
   "0.1503"
  ],
  [
   "295",
   "0.0751"
  ],
  [
   "299",
   "0.1503"
  ],
  [
   "302",
   "0.0751"
  ],
  [
   "312",
   "0.1503"
  ],
  [
   "326",
   "0.1503"
  ],
  [
   "335",
   "0.0751"
  ],
  [
   "339",
   "0.0751"
  ],
  [
   "342",
   "0.0751"
  ],
  [
   "345",
   "0.0751"
  ],
  [
   "348",
   "0.0751"
  ],
  [
   "352",
   "0.0751"
  ],
  [
   "359",
   "0.0751"
  ],
  [
   "366",
   "0.0751"
  ],
  [
   "369",
   "0.0751"
  ],
  [
   "375",
   "0.0751"
  ],
  [
   "382",
   "0.0751"
  ],
  [
   "403",
   "0.0751"
  ],
  [
   "409",
   "0.0751"
  ],
  [
   "415",
   "0.0751"
  ],
  [
   "422",
   "0.0751"
  ],
  [
   "426",
   "0.0751"
  ],
  [
   "446",
   "0.0751"
  ],
  [
   "452",
   "0.0751"
  ],
  [
   "488",
   "0.0751"
  ],
  [
   "489",
   "0.0751"
  ],
  [
   "529",
   "0.0751"
  ],
  [
   "535",
   "0.0751"
  ],
  [
   "552",
   "0.0751"
  ],
  [
   "682",
   "0.0751"
  ],
  [
   "709",
   "0.2254"
  ],
  [
   "715",
   "0.0751"
  ],
  [
   "719",
   "0.0751"
  ],
  [
   "732",
   "0.0751"
  ],
  [
   "742",
   "0.0751"
  ],
  [
   "749",
   "0.0751"
  ],
  [
   "772",
   "0.0751"
  ],
  [
   "822",
   "0.0751"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 476,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "78 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 476,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 125,
  "name": "Your",
  "id": 112733449
 }
}