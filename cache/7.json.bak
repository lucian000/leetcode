{"id": 7, "ids": "7", "state": "None", "name": "Reverse Integer", "key": "reverse-integer", "link": "https://leetcode.com/problems/reverse-integer", "locked": false, "percent": 24.296127498820926, "level": "Easy", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "Reverse digits of an integer.\r\n\r\n\r\nExample1: x =  123, return  321\r\nExample2: x = -123, return -321\r\n\r\n\r\nclick to show spoilers.\r\n\r\nHave you thought about this?\r\n\r\nHere are some good questions to ask before coding. Bonus points for you if you have already thought through this!\r\n\r\nIf the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.\r\n\r\nDid you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?\r\n\r\nFor the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\r\n\r\n\r\n\r\n\r\n\r\nNote:\r\nThe input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    int reverse(int x) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int reverse(int x) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def reverse(self, x):\r\n        \"\"\"\r\n        :type x: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "int reverse(int x) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int Reverse(int x) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number} x\r\n * @return {number}\r\n */\r\nvar reverse = function(x) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer} x\r\n# @return {Integer}\r\ndef reverse(x)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\r\n    func reverse(_ x: Int) -> Int {\r\n        \r\n    }\r\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func reverse(x int) int {\r\n    \r\n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def reverse(x: Int): Int = {\n        \n    }\n}"}], "testcase": "'0'", "testable": true}