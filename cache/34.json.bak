{
 "id": 34,
 "ids": "34",
 "state": "None",
 "name": "Search for a Range",
 "key": "search-for-a-range",
 "link": "https://leetcode.com/problems/search-for-a-range",
 "locked": false,
 "percent": 31.314846549306747,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "140.7K",
 "totalSubmit": "449.3K",
 "desc": "Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.\r\n\r\nYour algorithm's runtime complexity must be in the order of O(log n).\r\n\r\nIf the target is not found in the array, return [-1, -1].\r\n\r\n\r\nFor example,\r\nGiven [5, 7, 7, 8, 8, 10] and target value 8,\r\nreturn [3, 4].\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    vector<int> searchRange(vector<int>& nums, int target) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int[] searchRange(int[] nums, int target) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def searchRange(self, nums, target):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* searchRange(int* nums, int numsSize, int target, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int[] SearchRange(int[] nums, int target) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number[]}\r\n */\r\nvar searchRange = function(nums, target) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Integer[]}\r\ndef search_range(nums, target)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func searchRange(nums []int, target int) []int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[5,7,7,8,8,10]\\n8'",
 "testable": true,
 "slug": "search-for-a-range",
 "category": "algorithms",
 "fname": "34.search-for-a-range.algorithms.py"
}