{
 "id": 206,
 "ids": "206",
 "state": "None",
 "name": "Reverse Linked List",
 "key": "reverse-linked-list",
 "link": "https://leetcode.com/problems/reverse-linked-list",
 "locked": false,
 "percent": 45.20212682624869,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "236.6K",
 "totalSubmit": "523.4K",
 "desc": "Reverse a singly linked list.\r\n\r\nclick to show more hints.\r\n\r\nHint:\r\nA linked list can be reversed either iteratively or recursively. Could you implement both?\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* reverseList(ListNode* head) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode reverseList(ListNode head) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def reverseList(self, head):\r\n        \"\"\"\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* reverseList(struct ListNode* head) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode ReverseList(ListNode head) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar reverseList = function(head) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {ListNode}\r\ndef reverse_list(head)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func reverseList(_ head: ListNode?) -> ListNode? {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc reverseList(head *ListNode) *ListNode {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def reverseList(head: ListNode): ListNode = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]'",
 "testable": true,
 "slug": "reverse-linked-list",
 "category": "algorithms",
 "fname": "206.reverse-linked-list.algorithms.py",
 "test_your": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "92 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502625629.4_784204_15"
 },
 "test_expected": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "49 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502625629.41_784204_15"
 },
 "submit_chart": [
  [
   "35",
   "0.0404"
  ],
  [
   "36",
   "0.1211"
  ],
  [
   "38",
   "1.6546"
  ],
  [
   "39",
   "3.5916"
  ],
  [
   "42",
   "16.3035"
  ],
  [
   "43",
   "0.9282"
  ],
  [
   "45",
   "11.6626"
  ],
  [
   "46",
   "7.3850"
  ],
  [
   "48",
   "5.2865"
  ],
  [
   "49",
   "10.6538"
  ],
  [
   "52",
   "11.9855"
  ],
  [
   "53",
   "0.3632"
  ],
  [
   "55",
   "6.7797"
  ],
  [
   "56",
   "3.1477"
  ],
  [
   "58",
   "1.6949"
  ],
  [
   "59",
   "4.0759"
  ],
  [
   "62",
   "3.9548"
  ],
  [
   "63",
   "0.0404"
  ],
  [
   "65",
   "1.6142"
  ],
  [
   "66",
   "0.9282"
  ],
  [
   "68",
   "0.7667"
  ],
  [
   "69",
   "1.2107"
  ],
  [
   "72",
   "2.0178"
  ],
  [
   "75",
   "0.5650"
  ],
  [
   "76",
   "0.4036"
  ],
  [
   "78",
   "0.1614"
  ],
  [
   "79",
   "0.5246"
  ],
  [
   "82",
   "0.4843"
  ],
  [
   "85",
   "0.3228"
  ],
  [
   "86",
   "0.0807"
  ],
  [
   "88",
   "0.1211"
  ],
  [
   "89",
   "0.2018"
  ],
  [
   "92",
   "0.1614"
  ],
  [
   "95",
   "0.0807"
  ],
  [
   "96",
   "0.0404"
  ],
  [
   "98",
   "0.1614"
  ],
  [
   "102",
   "0.0807"
  ],
  [
   "105",
   "0.1211"
  ],
  [
   "108",
   "0.0404"
  ],
  [
   "109",
   "0.0404"
  ],
  [
   "112",
   "0.0404"
  ],
  [
   "135",
   "0.0404"
  ],
  [
   "149",
   "0.0404"
  ],
  [
   "196",
   "0.0404"
  ],
  [
   "328",
   "0.0404"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 27,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "46 ms",
  "compare_result": "111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 27,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 206,
  "name": "Your",
  "id": 113689457
 }
}