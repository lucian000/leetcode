{
 "id": 492,
 "ids": "492",
 "state": "None",
 "name": "Construct the Rectangle",
 "key": "construct-the-rectangle",
 "link": "https://leetcode.com/problems/construct-the-rectangle",
 "locked": false,
 "percent": 48.59167809785094,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "21.3K",
 "totalSubmit": "43.7K",
 "desc": "\r\nFor a web developer, it is very important to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\r\n1. The area of the rectangular web page you designed must equal to the given target area.\r\n2. The width W should not be larger than the length L, which means L >= W.\r\n3. The difference between length L and width W should be as small as possible.\r\n\r\nYou need to output the length L and the width W of the web page you designed in sequence.\r\n\r\n\r\n\r\nExample:\r\n\r\nInput: 4\r\nOutput: [2, 2]\r\nExplanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \r\nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe given area won't exceed 10,000,000 and is a positive integer\r\nThe web page's width and length you designed must be positive integers.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    vector<int> constructRectangle(int area) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int[] constructRectangle(int area) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def constructRectangle(self, area):\r\n        \"\"\"\r\n        :type area: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* constructRectangle(int area, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int[] ConstructRectangle(int area) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number} area\r\n * @return {number[]}\r\n */\r\nvar constructRectangle = function(area) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} area\r\n# @return {Integer[]}\r\ndef construct_rectangle(area)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func constructRectangle(_ area: Int) -> [Int] {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func constructRectangle(area int) []int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def constructRectangle(area: Int): Array[Int] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'1'",
 "testable": true,
 "slug": "construct-the-rectangle",
 "category": "algorithms",
 "fname": "492.construct-the-rectangle.algorithms.py",
 "test_your": {
  "code_answer": [
   "[1,1]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "55 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502504402.97_784204_17"
 },
 "test_expected": {
  "code_answer": [
   "[1,1]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502504402.99_784204_17"
 },
 "submit_chart": [
  [
   "29",
   "0.1608"
  ],
  [
   "32",
   "4.8232"
  ],
  [
   "33",
   "1.2862"
  ],
  [
   "35",
   "12.5402"
  ],
  [
   "36",
   "5.6270"
  ],
  [
   "38",
   "3.8585"
  ],
  [
   "39",
   "11.4148"
  ],
  [
   "42",
   "12.2186"
  ],
  [
   "43",
   "0.9646"
  ],
  [
   "45",
   "6.4309"
  ],
  [
   "46",
   "2.4116"
  ],
  [
   "48",
   "2.4116"
  ],
  [
   "49",
   "5.1447"
  ],
  [
   "52",
   "4.5016"
  ],
  [
   "55",
   "1.4469"
  ],
  [
   "56",
   "0.9646"
  ],
  [
   "58",
   "0.6431"
  ],
  [
   "59",
   "1.7685"
  ],
  [
   "62",
   "2.0900"
  ],
  [
   "63",
   "0.1608"
  ],
  [
   "65",
   "0.9646"
  ],
  [
   "66",
   "0.1608"
  ],
  [
   "68",
   "0.1608"
  ],
  [
   "69",
   "0.3215"
  ],
  [
   "72",
   "0.1608"
  ],
  [
   "75",
   "0.1608"
  ],
  [
   "76",
   "0.1608"
  ],
  [
   "95",
   "0.1608"
  ],
  [
   "105",
   "0.1608"
  ],
  [
   "106",
   "0.3215"
  ],
  [
   "112",
   "0.1608"
  ],
  [
   "119",
   "0.1608"
  ],
  [
   "135",
   "0.1608"
  ],
  [
   "166",
   "0.1608"
  ],
  [
   "168",
   "0.1608"
  ],
  [
   "1045",
   "0.1608"
  ],
  [
   "1169",
   "0.1608"
  ],
  [
   "1259",
   "0.1608"
  ],
  [
   "1275",
   "0.1608"
  ],
  [
   "1326",
   "0.1608"
  ],
  [
   "1335",
   "0.1608"
  ],
  [
   "1339",
   "0.1608"
  ],
  [
   "1352",
   "0.1608"
  ],
  [
   "1353",
   "0.1608"
  ],
  [
   "1355",
   "0.1608"
  ],
  [
   "1382",
   "0.1608"
  ],
  [
   "1385",
   "0.1608"
  ],
  [
   "1386",
   "0.1608"
  ],
  [
   "1396",
   "0.1608"
  ],
  [
   "1405",
   "0.1608"
  ],
  [
   "1409",
   "0.1608"
  ],
  [
   "1413",
   "0.1608"
  ],
  [
   "1428",
   "0.1608"
  ],
  [
   "1435",
   "0.1608"
  ],
  [
   "1442",
   "0.1608"
  ],
  [
   "1462",
   "0.1608"
  ],
  [
   "1505",
   "0.1608"
  ],
  [
   "1536",
   "0.1608"
  ],
  [
   "1546",
   "0.1608"
  ],
  [
   "1548",
   "0.1608"
  ],
  [
   "1549",
   "0.1608"
  ],
  [
   "1562",
   "0.1608"
  ],
  [
   "1578",
   "0.1608"
  ],
  [
   "1586",
   "0.1608"
  ],
  [
   "1592",
   "0.1608"
  ],
  [
   "1605",
   "0.1608"
  ],
  [
   "1612",
   "0.1608"
  ],
  [
   "1622",
   "0.1608"
  ],
  [
   "1629",
   "0.1608"
  ],
  [
   "1638",
   "0.1608"
  ],
  [
   "1639",
   "0.1608"
  ],
  [
   "1662",
   "0.1608"
  ],
  [
   "1669",
   "0.1608"
  ],
  [
   "1678",
   "0.1608"
  ],
  [
   "1695",
   "0.1608"
  ],
  [
   "1718",
   "0.1608"
  ],
  [
   "1732",
   "0.1608"
  ],
  [
   "1739",
   "0.3215"
  ],
  [
   "1785",
   "0.1608"
  ],
  [
   "1795",
   "0.1608"
  ],
  [
   "1796",
   "0.1608"
  ],
  [
   "1855",
   "0.1608"
  ],
  [
   "1882",
   "0.1608"
  ],
  [
   "1889",
   "0.1608"
  ],
  [
   "1899",
   "0.1608"
  ],
  [
   "1912",
   "0.1608"
  ],
  [
   "1965",
   "0.1608"
  ],
  [
   "1979",
   "0.1608"
  ],
  [
   "1982",
   "0.1608"
  ],
  [
   "1995",
   "0.1608"
  ],
  [
   "1999",
   "0.1608"
  ],
  [
   "2005",
   "0.1608"
  ],
  [
   "2009",
   "0.1608"
  ],
  [
   "2012",
   "0.1608"
  ],
  [
   "2019",
   "0.1608"
  ],
  [
   "2022",
   "0.1608"
  ],
  [
   "2029",
   "0.1608"
  ],
  [
   "2035",
   "0.1608"
  ],
  [
   "2046",
   "0.1608"
  ],
  [
   "2058",
   "0.1608"
  ],
  [
   "2065",
   "0.1608"
  ],
  [
   "2072",
   "0.1608"
  ],
  [
   "2075",
   "0.1608"
  ],
  [
   "2078",
   "0.1608"
  ],
  [
   "2095",
   "0.1608"
  ],
  [
   "2096",
   "0.1608"
  ],
  [
   "2102",
   "0.3215"
  ],
  [
   "2118",
   "0.1608"
  ],
  [
   "2119",
   "0.1608"
  ],
  [
   "2122",
   "0.3215"
  ],
  [
   "2132",
   "0.3215"
  ],
  [
   "2142",
   "0.1608"
  ],
  [
   "2149",
   "0.1608"
  ],
  [
   "2162",
   "0.1608"
  ],
  [
   "2199",
   "0.1608"
  ],
  [
   "2212",
   "0.1608"
  ],
  [
   "2242",
   "0.1608"
  ],
  [
   "2245",
   "0.1608"
  ],
  [
   "2278",
   "0.1608"
  ],
  [
   "2325",
   "0.1608"
  ],
  [
   "2335",
   "0.1608"
  ],
  [
   "2342",
   "0.1608"
  ],
  [
   "2386",
   "0.1608"
  ],
  [
   "2449",
   "0.1608"
  ],
  [
   "2455",
   "0.1608"
  ],
  [
   "2522",
   "0.1608"
  ],
  [
   "2529",
   "0.1608"
  ],
  [
   "2535",
   "0.1608"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 50,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "92 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 50,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 492,
  "name": "Your",
  "id": 113514124
 }
}