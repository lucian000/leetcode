{
 "id": 494,
 "ids": "494",
 "state": "None",
 "name": "Target Sum",
 "key": "target-sum",
 "link": "https://leetcode.com/problems/target-sum",
 "locked": false,
 "percent": 43.8995238370636,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "",
 "totalSubmit": "",
 "desc": "\r\nYou are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.\r\n \r\n\r\nFind out how many ways to assign symbols to make sum of integers equal to target S.  \r\n\r\n\r\nExample 1:\r\n\r\nInput: nums is [1, 1, 1, 1, 1], S is 3. \r\nOutput: 5\r\nExplanation: \r\n\r\n-1+1+1+1+1 = 3\r\n+1-1+1+1+1 = 3\r\n+1+1-1+1+1 = 3\r\n+1+1+1-1+1 = 3\r\n+1+1+1+1-1 = 3\r\n\r\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe length of the given array is positive and will not exceed 20. \r\nThe sum of elements in the given array will not exceed 1000.\r\nYour output answer is guaranteed to be fitted in a 32-bit integer.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int findTargetSumWays(vector<int>& nums, int S) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int findTargetSumWays(int[] nums, int S) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def findTargetSumWays(self, nums, S):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type S: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int findTargetSumWays(int* nums, int numsSize, int S) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int FindTargetSumWays(int[] nums, int S) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} S\r\n * @return {number}\r\n */\r\nvar findTargetSumWays = function(nums, S) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @param {Integer} s\r\n# @return {Integer}\r\ndef find_target_sum_ways(nums, s)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func findTargetSumWays(_ nums: [Int], _ S: Int) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func findTargetSumWays(nums []int, S int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def findTargetSumWays(nums: Array[Int], S: Int): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,1,1,1,1]\\n3'",
 "testable": true
}