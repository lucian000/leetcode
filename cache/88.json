{
 "id": 88,
 "ids": "88",
 "state": "None",
 "name": "Merge Sorted Array",
 "key": "merge-sorted-array",
 "link": "https://leetcode.com/problems/merge-sorted-array",
 "locked": false,
 "percent": 31.932830355774307,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "",
 "totalSubmit": "",
 "desc": "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\r\n\r\n\r\nNote:\r\nYou may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def merge(self, nums1, m, nums2, n):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type m: int\r\n        :type nums2: List[int]\r\n        :type n: int\r\n        :rtype: void Do not return anything, modify nums1 in-place instead.\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "void merge(int* nums1, int m, int* nums2, int n) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums1\r\n * @param {number} m\r\n * @param {number[]} nums2\r\n * @param {number} n\r\n * @return {void} Do not return anything, modify nums1 in-place instead.\r\n */\r\nvar merge = function(nums1, m, nums2, n) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums1\r\n# @param {Integer} m\r\n# @param {Integer[]} nums2\r\n# @param {Integer} n\r\n# @return {Void} Do not return anything, modify nums1 in-place instead.\r\ndef merge(nums1, m, nums2, n)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func merge(nums1 []int, m int, nums2 []int, n int)  {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1]\\n1\\n[]\\n0'",
 "testable": true
}