{
 "id": 441,
 "ids": "441",
 "state": "None",
 "name": "Arranging Coins",
 "key": "arranging-coins",
 "link": "https://leetcode.com/problems/arranging-coins",
 "locked": false,
 "percent": 36.27267975808258,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "29.1K",
 "totalSubmit": "80.4K",
 "desc": "You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.\r\n \r\nGiven n, find the total number of full staircase rows that can be formed.\r\n\r\nn is a non-negative integer and fits within the range of a 32-bit signed integer.\r\n\r\nExample 1:\r\n\r\nn = 5\r\n\r\nThe coins can form the following rows:\r\n\u00a4\r\n\u00a4 \u00a4\r\n\u00a4 \u00a4\r\n\r\nBecause the 3rd row is incomplete, we return 2.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nn = 8\r\n\r\nThe coins can form the following rows:\r\n\u00a4\r\n\u00a4 \u00a4\r\n\u00a4 \u00a4 \u00a4\r\n\u00a4 \u00a4\r\n\r\nBecause the 4th row is incomplete, we return 3.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int arrangeCoins(int n) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int arrangeCoins(int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def arrangeCoins(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int arrangeCoins(int n) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int ArrangeCoins(int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar arrangeCoins = function(n) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} n\r\n# @return {Integer}\r\ndef arrange_coins(n)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func arrangeCoins(_ n: Int) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func arrangeCoins(n int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def arrangeCoins(n: Int): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'5'",
 "testable": true,
 "slug": "arranging-coins",
 "category": "algorithms",
 "fname": "441.arranging-coins.algorithms.py",
 "test_your": {
  "code_answer": [
   "2"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "38 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501653225.04_784204_29"
 },
 "test_expected": {
  "code_answer": [
   "2"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501653225.06_784204_29"
 },
 "submit_chart": [
  [
   "45",
   "0.9646"
  ],
  [
   "46",
   "0.3215"
  ],
  [
   "48",
   "1.4469"
  ],
  [
   "49",
   "3.3762"
  ],
  [
   "52",
   "7.5563"
  ],
  [
   "55",
   "7.7170"
  ],
  [
   "56",
   "3.3762"
  ],
  [
   "58",
   "3.3762"
  ],
  [
   "59",
   "4.3408"
  ],
  [
   "62",
   "5.6270"
  ],
  [
   "63",
   "0.1608"
  ],
  [
   "65",
   "3.6977"
  ],
  [
   "66",
   "1.4469"
  ],
  [
   "68",
   "0.6431"
  ],
  [
   "69",
   "1.9293"
  ],
  [
   "72",
   "3.8585"
  ],
  [
   "75",
   "0.8039"
  ],
  [
   "76",
   "0.3215"
  ],
  [
   "78",
   "0.4823"
  ],
  [
   "79",
   "0.9646"
  ],
  [
   "82",
   "2.0900"
  ],
  [
   "85",
   "0.6431"
  ],
  [
   "89",
   "0.6431"
  ],
  [
   "92",
   "0.9646"
  ],
  [
   "95",
   "0.1608"
  ],
  [
   "96",
   "0.3215"
  ],
  [
   "98",
   "0.1608"
  ],
  [
   "99",
   "0.1608"
  ],
  [
   "102",
   "0.3215"
  ],
  [
   "105",
   "0.3215"
  ],
  [
   "108",
   "0.1608"
  ],
  [
   "109",
   "0.1608"
  ],
  [
   "112",
   "0.1608"
  ],
  [
   "115",
   "0.1608"
  ],
  [
   "149",
   "0.1608"
  ],
  [
   "165",
   "0.1608"
  ],
  [
   "192",
   "0.1608"
  ],
  [
   "198",
   "0.1608"
  ],
  [
   "229",
   "0.1608"
  ],
  [
   "362",
   "0.1608"
  ],
  [
   "465",
   "0.1608"
  ],
  [
   "486",
   "0.1608"
  ],
  [
   "502",
   "0.1608"
  ],
  [
   "648",
   "0.1608"
  ],
  [
   "686",
   "0.1608"
  ],
  [
   "695",
   "0.1608"
  ],
  [
   "732",
   "0.1608"
  ],
  [
   "735",
   "0.3215"
  ],
  [
   "739",
   "0.1608"
  ],
  [
   "749",
   "0.1608"
  ],
  [
   "752",
   "0.8039"
  ],
  [
   "755",
   "0.4823"
  ],
  [
   "756",
   "0.1608"
  ],
  [
   "758",
   "0.3215"
  ],
  [
   "759",
   "0.4823"
  ],
  [
   "762",
   "0.3215"
  ],
  [
   "765",
   "0.1608"
  ],
  [
   "769",
   "0.1608"
  ],
  [
   "772",
   "0.1608"
  ],
  [
   "775",
   "0.4823"
  ],
  [
   "776",
   "0.3215"
  ],
  [
   "779",
   "0.8039"
  ],
  [
   "782",
   "0.3215"
  ],
  [
   "785",
   "0.4823"
  ],
  [
   "786",
   "0.1608"
  ],
  [
   "788",
   "0.3215"
  ],
  [
   "789",
   "0.1608"
  ],
  [
   "792",
   "0.1608"
  ],
  [
   "795",
   "0.6431"
  ],
  [
   "798",
   "0.1608"
  ],
  [
   "799",
   "0.1608"
  ],
  [
   "802",
   "0.3215"
  ],
  [
   "805",
   "0.1608"
  ],
  [
   "808",
   "0.1608"
  ],
  [
   "809",
   "0.6431"
  ],
  [
   "812",
   "0.3215"
  ],
  [
   "818",
   "0.4823"
  ],
  [
   "819",
   "0.1608"
  ],
  [
   "822",
   "0.3215"
  ],
  [
   "825",
   "0.1608"
  ],
  [
   "832",
   "0.3215"
  ],
  [
   "835",
   "0.1608"
  ],
  [
   "842",
   "0.8039"
  ],
  [
   "846",
   "0.1608"
  ],
  [
   "849",
   "0.3215"
  ],
  [
   "855",
   "0.1608"
  ],
  [
   "859",
   "0.1608"
  ],
  [
   "862",
   "0.1608"
  ],
  [
   "872",
   "0.1608"
  ],
  [
   "879",
   "0.1608"
  ],
  [
   "882",
   "0.3215"
  ],
  [
   "886",
   "0.1608"
  ],
  [
   "892",
   "0.1608"
  ],
  [
   "895",
   "0.1608"
  ],
  [
   "899",
   "0.1608"
  ],
  [
   "902",
   "0.1608"
  ],
  [
   "908",
   "0.1608"
  ],
  [
   "912",
   "0.1608"
  ],
  [
   "922",
   "0.3215"
  ],
  [
   "926",
   "0.4823"
  ],
  [
   "932",
   "0.3215"
  ],
  [
   "935",
   "0.1608"
  ],
  [
   "942",
   "0.1608"
  ],
  [
   "952",
   "0.1608"
  ],
  [
   "962",
   "0.1608"
  ],
  [
   "965",
   "0.3215"
  ],
  [
   "972",
   "0.1608"
  ],
  [
   "976",
   "0.1608"
  ],
  [
   "982",
   "0.3215"
  ],
  [
   "989",
   "0.1608"
  ],
  [
   "996",
   "0.1608"
  ],
  [
   "999",
   "0.3215"
  ],
  [
   "1002",
   "0.3215"
  ],
  [
   "1012",
   "0.1608"
  ],
  [
   "1018",
   "0.1608"
  ],
  [
   "1019",
   "0.4823"
  ],
  [
   "1022",
   "0.1608"
  ],
  [
   "1025",
   "0.4823"
  ],
  [
   "1026",
   "0.1608"
  ],
  [
   "1029",
   "0.3215"
  ],
  [
   "1032",
   "0.3215"
  ],
  [
   "1039",
   "0.1608"
  ],
  [
   "1042",
   "0.1608"
  ],
  [
   "1045",
   "0.1608"
  ],
  [
   "1046",
   "0.1608"
  ],
  [
   "1055",
   "0.3215"
  ],
  [
   "1069",
   "0.1608"
  ],
  [
   "1075",
   "0.1608"
  ],
  [
   "1076",
   "0.3215"
  ],
  [
   "1079",
   "0.1608"
  ],
  [
   "1082",
   "0.1608"
  ],
  [
   "1089",
   "0.1608"
  ],
  [
   "1092",
   "0.1608"
  ],
  [
   "1098",
   "0.1608"
  ],
  [
   "1099",
   "0.3215"
  ],
  [
   "1102",
   "0.1608"
  ],
  [
   "1106",
   "0.1608"
  ],
  [
   "1112",
   "0.3215"
  ],
  [
   "1129",
   "0.1608"
  ],
  [
   "1139",
   "0.1608"
  ],
  [
   "1142",
   "0.3215"
  ],
  [
   "1148",
   "0.1608"
  ],
  [
   "1149",
   "0.3215"
  ],
  [
   "1152",
   "0.1608"
  ],
  [
   "1159",
   "0.1608"
  ],
  [
   "1165",
   "0.1608"
  ],
  [
   "1172",
   "0.1608"
  ],
  [
   "1182",
   "0.1608"
  ],
  [
   "1185",
   "0.1608"
  ],
  [
   "1189",
   "0.1608"
  ],
  [
   "1206",
   "0.1608"
  ],
  [
   "1209",
   "0.1608"
  ],
  [
   "1215",
   "0.1608"
  ],
  [
   "1218",
   "0.1608"
  ],
  [
   "1222",
   "0.1608"
  ],
  [
   "1229",
   "0.1608"
  ],
  [
   "1242",
   "0.1608"
  ],
  [
   "1252",
   "0.1608"
  ],
  [
   "1256",
   "0.1608"
  ],
  [
   "1259",
   "0.1608"
  ],
  [
   "1262",
   "0.1608"
  ],
  [
   "1265",
   "0.1608"
  ],
  [
   "1268",
   "0.1608"
  ],
  [
   "1278",
   "0.1608"
  ],
  [
   "1289",
   "0.1608"
  ],
  [
   "1292",
   "0.3215"
  ],
  [
   "1305",
   "0.1608"
  ],
  [
   "1308",
   "0.1608"
  ],
  [
   "1312",
   "0.1608"
  ],
  [
   "1315",
   "0.1608"
  ],
  [
   "1322",
   "0.1608"
  ],
  [
   "1325",
   "0.1608"
  ],
  [
   "1326",
   "0.1608"
  ],
  [
   "1329",
   "0.1608"
  ],
  [
   "1335",
   "0.1608"
  ],
  [
   "1345",
   "0.1608"
  ],
  [
   "1355",
   "0.3215"
  ],
  [
   "1376",
   "0.1608"
  ],
  [
   "1378",
   "0.1608"
  ],
  [
   "1379",
   "0.1608"
  ],
  [
   "1382",
   "0.4823"
  ],
  [
   "1389",
   "0.1608"
  ],
  [
   "1395",
   "0.1608"
  ],
  [
   "1399",
   "0.1608"
  ],
  [
   "1408",
   "0.1608"
  ],
  [
   "1412",
   "0.1608"
  ],
  [
   "1422",
   "0.4823"
  ],
  [
   "1426",
   "0.1608"
  ],
  [
   "1442",
   "0.1608"
  ],
  [
   "1445",
   "0.3215"
  ],
  [
   "1446",
   "0.1608"
  ],
  [
   "1462",
   "0.3215"
  ],
  [
   "1472",
   "0.1608"
  ],
  [
   "1482",
   "0.1608"
  ],
  [
   "1485",
   "0.3215"
  ],
  [
   "1489",
   "0.1608"
  ],
  [
   "1512",
   "0.1608"
  ],
  [
   "1548",
   "0.3215"
  ],
  [
   "1549",
   "0.1608"
  ],
  [
   "1599",
   "0.1608"
  ],
  [
   "1602",
   "0.1608"
  ],
  [
   "1606",
   "0.1608"
  ],
  [
   "1612",
   "0.1608"
  ],
  [
   "1632",
   "0.1608"
  ],
  [
   "1635",
   "0.1608"
  ],
  [
   "1638",
   "0.1608"
  ],
  [
   "1642",
   "0.3215"
  ],
  [
   "1656",
   "0.1608"
  ],
  [
   "1682",
   "0.1608"
  ],
  [
   "1685",
   "0.1608"
  ],
  [
   "1699",
   "0.1608"
  ],
  [
   "1722",
   "0.1608"
  ],
  [
   "1728",
   "0.1608"
  ],
  [
   "1735",
   "0.3215"
  ],
  [
   "1792",
   "0.1608"
  ],
  [
   "1802",
   "0.1608"
  ],
  [
   "1852",
   "0.1608"
  ],
  [
   "1898",
   "0.1608"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 1336,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "72 ms",
  "compare_result
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 1336,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 441,
  "name": "Your",
  "id": 112146896
 }
}