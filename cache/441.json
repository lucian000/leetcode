{"id": 441, "ids": "441", "state": "None", "name": "Arranging Coins", "key": "arranging-coins", "link": "https://leetcode.com/problems/arranging-coins", "locked": false, "percent": 36.2679739385767, "level": "Easy", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.\r\n \r\nGiven n, find the total number of full staircase rows that can be formed.\r\n\r\nn is a non-negative integer and fits within the range of a 32-bit signed integer.\r\n\r\nExample 1:\r\n\r\nn = 5\r\n\r\nThe coins can form the following rows:\r\n\u00a4\r\n\u00a4 \u00a4\r\n\u00a4 \u00a4\r\n\r\nBecause the 3rd row is incomplete, we return 2.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nn = 8\r\n\r\nThe coins can form the following rows:\r\n\u00a4\r\n\u00a4 \u00a4\r\n\u00a4 \u00a4 \u00a4\r\n\u00a4 \u00a4\r\n\r\nBecause the 4th row is incomplete, we return 3.\r\n\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    int arrangeCoins(int n) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int arrangeCoins(int n) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def arrangeCoins(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "int arrangeCoins(int n) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int ArrangeCoins(int n) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar arrangeCoins = function(n) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer} n\r\n# @return {Integer}\r\ndef arrange_coins(n)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\r\n    func arrangeCoins(_ n: Int) -> Int {\r\n        \r\n    }\r\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func arrangeCoins(n int) int {\r\n    \r\n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def arrangeCoins(n: Int): Int = {\n        \n    }\n}"}], "testcase": "5", "testable": true}