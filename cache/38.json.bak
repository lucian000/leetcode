{
 "id": 38,
 "ids": "38",
 "state": "None",
 "name": "Count and Say",
 "key": "count-and-say",
 "link": "https://leetcode.com/problems/count-and-say",
 "locked": false,
 "percent": 34.36333349664397,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "140.3K",
 "totalSubmit": "408.3K",
 "desc": "The count-and-say sequence is the sequence of integers with the first five terms as following:\r\n\r\n1.     1\r\n2.     11\r\n3.     21\r\n4.     1211\r\n5.     111221\r\n\r\n\r\n\r\n1 is read off as \"one 1\" or 11.\r\n11 is read off as \"two 1s\" or 21.\r\n21 is read off as \"one 2, then one 1\" or 1211.\r\n\r\n\r\n\r\nGiven an integer n, generate the nth term of the count-and-say sequence.\r\n\r\n\r\n\r\nNote: Each term of the sequence of integers will be represented as a string.\r\n\r\n\r\nExample 1:\r\n\r\nInput: 1\r\nOutput: \"1\"\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: 4\r\nOutput: \"1211\"\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    string countAndSay(int n) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public String countAndSay(int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def countAndSay(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: str\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "char* countAndSay(int n) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public string CountAndSay(int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number} n\r\n * @return {string}\r\n */\r\nvar countAndSay = function(n) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} n\r\n# @return {String}\r\ndef count_and_say(n)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func countAndSay(_ n: Int) -> String {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func countAndSay(n int) string {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def countAndSay(n: Int): String = {\n        \n    }\n}"
  }
 ],
 "testcase": "'1'",
 "testable": true,
 "slug": "count-and-say",
 "category": "algorithms",
 "fname": "38.count-and-say.algorithms.py",
 "test_your": {
  "code_answer": [
   "\"1\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501509537.39_784204_3"
 },
 "test_expected": {
  "code_answer": [
   "\"1\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "28 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501509537.41_784204_3"
 },
 "submit_chart": [
  [
   "32",
   "0.4415"
  ],
  [
   "33",
   "0.0736"
  ],
  [
   "35",
   "2.7226"
  ],
  [
   "36",
   "2.0603"
  ],
  [
   "38",
   "3.8999"
  ],
  [
   "39",
   "11.5526"
  ],
  [
   "42",
   "17.5129"
  ],
  [
   "43",
   "1.1038"
  ],
  [
   "45",
   "8.5357"
  ],
  [
   "46",
   "6.6225"
  ],
  [
   "48",
   "3.3848"
  ],
  [
   "49",
   "7.9470"
  ],
  [
   "52",
   "7.3584"
  ],
  [
   "53",
   "0.4415"
  ],
  [
   "55",
   "3.9735"
  ],
  [
   "56",
   "2.4283"
  ],
  [
   "58",
   "0.9566"
  ],
  [
   "59",
   "3.8263"
  ],
  [
   "62",
   "2.8698"
  ],
  [
   "65",
   "1.8396"
  ],
  [
   "66",
   "0.8830"
  ],
  [
   "68",
   "0.5151"
  ],
  [
   "69",
   "1.1773"
  ],
  [
   "72",
   "1.5453"
  ],
  [
   "73",
   "0.0736"
  ],
  [
   "75",
   "0.8830"
  ],
  [
   "76",
   "0.0736"
  ],
  [
   "78",
   "0.3679"
  ],
  [
   "79",
   "0.2943"
  ],
  [
   "82",
   "0.8094"
  ],
  [
   "85",
   "0.3679"
  ],
  [
   "86",
   "0.2208"
  ],
  [
   "88",
   "0.1472"
  ],
  [
   "89",
   "0.1472"
  ],
  [
   "92",
   "0.2208"
  ],
  [
   "95",
   "0.1472"
  ],
  [
   "96",
   "0.0736"
  ],
  [
   "98",
   "0.0736"
  ],
  [
   "99",
   "0.1472"
  ],
  [
   "102",
   "0.1472"
  ],
  [
   "105",
   "0.0736"
  ],
  [
   "113",
   "0.0736"
  ],
  [
   "119",
   "0.0736"
  ],
  [
   "122",
   "0.2943"
  ],
  [
   "125",
   "0.0736"
  ],
  [
   "129",
   "0.0736"
  ],
  [
   "132",
   "0.0736"
  ],
  [
   "136",
   "0.0736"
  ],
  [
   "139",
   "0.0736"
  ],
  [
   "142",
   "0.0736"
  ],
  [
   "148",
   "0.0736"
  ],
  [
   "149",
   "0.0736"
  ],
  [
   "158",
   "0.0736"
  ],
  [
   "162",
   "0.0736"
  ],
  [
   "166",
   "0.0736"
  ],
  [
   "169",
   "0.0736"
  ],
  [
   "172",
   "0.1472"
  ],
  [
   "182",
   "0.0736"
  ],
  [
   "189",
   "0.0736"
  ],
  [
   "192",
   "0.0736"
  ],
  [
   "209",
   "0.0736"
  ],
  [
   "229",
   "0.0736"
  ],
  [
   "306",
   "0.0736"
  ],
  [
   "505",
   "0.0736"
  ],
  [
   "525",
   "0.0736"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 18,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "56 ms",
  "compare_result": "111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 18,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 38,
  "name": "Your",
  "id": 111893967
 }
}