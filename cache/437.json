{
 "id": 437,
 "ids": "437",
 "state": "None",
 "name": "Path Sum III",
 "key": "path-sum-iii",
 "link": "https://leetcode.com/problems/path-sum-iii",
 "locked": false,
 "percent": 39.75274224225528,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "30.5K",
 "totalSubmit": "76.8K",
 "desc": "You are given a binary tree in which each node contains an integer value.\r\n\r\nFind the number of paths that sum to a given value.\r\n\r\nThe path does not need to start or end at the root or a leaf, but it must go downwards\r\n(traveling only from parent nodes to child nodes).\r\n\r\nThe tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\r\n\r\nExample:\r\n\r\nroot = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\r\n\r\n      10\r\n     /  \\\r\n    5   -3\r\n   / \\    \\\r\n  3   2   11\r\n / \\   \\\r\n3  -2   1\r\n\r\nReturn 3. The paths that sum to 8 are:\r\n\r\n1.  5 -> 3\r\n2.  5 -> 2 -> 1\r\n3. -3 -> 11\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int pathSum(TreeNode* root, int sum) {\n        \n    }\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int pathSum(TreeNode root, int sum) {\n        \n    }\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def pathSum(self, root, sum):\n        \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: int\n        \"\"\"\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint pathSum(struct TreeNode* root, int sum) {\n    \n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int PathSum(TreeNode root, int sum) {\n        \n    }\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {number}\n */\nvar pathSum = function(root, sum) {\n    \n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {Integer} sum\n# @return {Integer}\ndef path_sum(root, sum)\n    \nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func pathSum(_ root: TreeNode?, _ sum: Int) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc pathSum(root *TreeNode, sum int) int {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def pathSum(root: TreeNode, sum: Int): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[10,5,-3,3,2,null,11,3,-2,null,1]\\n8'",
 "testable": true,
 "slug": "path-sum-iii",
 "category": "algorithms",
 "fname": "437.path-sum-iii.algorithms.py",
 "test_your": {
  "code_answer": [
   "3"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502551719.04_784204_21"
 },
 "test_expected": {
  "code_answer": [
   "3"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "33 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502551719.06_784204_21"
 },
 "submit_chart": [
  [
   "59",
   "0.1321"
  ],
  [
   "62",
   "1.7173"
  ],
  [
   "63",
   "0.1321"
  ],
  [
   "65",
   "2.7741"
  ],
  [
   "66",
   "1.0568"
  ],
  [
   "68",
   "0.7926"
  ],
  [
   "69",
   "2.5099"
  ],
  [
   "72",
   "2.3778"
  ],
  [
   "75",
   "1.5852"
  ],
  [
   "76",
   "1.4531"
  ],
  [
   "78",
   "0.2642"
  ],
  [
   "79",
   "1.4531"
  ],
  [
   "82",
   "1.4531"
  ],
  [
   "85",
   "0.6605"
  ],
  [
   "86",
   "0.3963"
  ],
  [
   "88",
   "0.2642"
  ],
  [
   "89",
   "0.7926"
  ],
  [
   "92",
   "0.3963"
  ],
  [
   "95",
   "0.2642"
  ],
  [
   "96",
   "0.2642"
  ],
  [
   "98",
   "0.1321"
  ],
  [
   "106",
   "0.1321"
  ],
  [
   "116",
   "0.1321"
  ],
  [
   "129",
   "0.1321"
  ],
  [
   "132",
   "0.1321"
  ],
  [
   "198",
   "0.1321"
  ],
  [
   "203",
   "0.1321"
  ],
  [
   "209",
   "0.1321"
  ],
  [
   "216",
   "0.1321"
  ],
  [
   "218",
   "0.1321"
  ],
  [
   "222",
   "0.2642"
  ],
  [
   "226",
   "0.1321"
  ],
  [
   "229",
   "0.1321"
  ],
  [
   "235",
   "0.1321"
  ],
  [
   "242",
   "0.1321"
  ],
  [
   "249",
   "0.2642"
  ],
  [
   "262",
   "0.2642"
  ],
  [
   "266",
   "0.2642"
  ],
  [
   "272",
   "0.2642"
  ],
  [
   "282",
   "0.1321"
  ],
  [
   "286",
   "0.1321"
  ],
  [
   "292",
   "0.3963"
  ],
  [
   "295",
   "0.1321"
  ],
  [
   "296",
   "0.1321"
  ],
  [
   "299",
   "0.1321"
  ],
  [
   "308",
   "0.1321"
  ],
  [
   "312",
   "0.2642"
  ],
  [
   "315",
   "0.1321"
  ],
  [
   "325",
   "0.3963"
  ],
  [
   "332",
   "0.2642"
  ],
  [
   "335",
   "0.2642"
  ],
  [
   "336",
   "0.1321"
  ],
  [
   "338",
   "0.1321"
  ],
  [
   "339",
   "0.1321"
  ],
  [
   "342",
   "0.1321"
  ],
  [
   "349",
   "0.1321"
  ],
  [
   "352",
   "0.2642"
  ],
  [
   "353",
   "0.1321"
  ],
  [
   "355",
   "0.1321"
  ],
  [
   "358",
   "0.1321"
  ],
  [
   "372",
   "0.2642"
  ],
  [
   "376",
   "0.1321"
  ],
  [
   "382",
   "0.1321"
  ],
  [
   "389",
   "0.2642"
  ],
  [
   "392",
   "0.1321"
  ],
  [
   "395",
   "0.2642"
  ],
  [
   "399",
   "0.2642"
  ],
  [
   "402",
   "0.1321"
  ],
  [
   "409",
   "0.1321"
  ],
  [
   "412",
   "0.2642"
  ],
  [
   "415",
   "0.1321"
  ],
  [
   "416",
   "0.1321"
  ],
  [
   "419",
   "0.1321"
  ],
  [
   "425",
   "0.2642"
  ],
  [
   "428",
   "0.2642"
  ],
  [
   "429",
   "0.1321"
  ],
  [
   "435",
   "0.1321"
  ],
  [
   "438",
   "0.1321"
  ],
  [
   "442",
   "0.1321"
  ],
  [
   "449",
   "0.2642"
  ],
  [
   "452",
   "0.1321"
  ],
  [
   "459",
   "0.1321"
  ],
  [
   "468",
   "0.1321"
  ],
  [
   "475",
   "0.1321"
  ],
  [
   "482",
   "0.1321"
  ],
  [
   "485",
   "0.1321"
  ],
  [
   "486",
   "0.1321"
  ],
  [
   "489",
   "0.2642"
  ],
  [
   "492",
   "0.1321"
  ],
  [
   "495",
   "0.1321"
  ],
  [
   "499",
   "0.2642"
  ],
  [
   "505",
   "0.1321"
  ],
  [
   "509",
   "0.1321"
  ],
  [
   "512",
   "0.1321"
  ],
  [
   "522",
   "0.2642"
  ],
  [
   "532",
   "0.2642"
  ],
  [
   "535",
   "0.1321"
  ],
  [
   "538",
   "0.1321"
  ],
  [
   "539",
   "0.1321"
  ],
  [
   "542",
   "0.2642"
  ],
  [
   "546",
   "0.1321"
  ],
  [
   "548",
   "0.1321"
  ],
  [
   "555",
   "0.1321"
  ],
  [
   "566",
   "0.2642"
  ],
  [
   "585",
   "0.1321"
  ],
  [
   "586",
   "0.1321"
  ],
  [
   "595",
   "0.1321"
  ],
  [
   "598",
   "0.1321"
  ],
  [
   "602",
   "0.1321"
  ],
  [
   "605",
   "0.1321"
  ],
  [
   "606",
   "0.1321"
  ],
  [
   "612",
   "0.1321"
  ],
  [
   "626",
   "0.1321"
  ],
  [
   "646",
   "0.1321"
  ],
  [
   "652",
   "0.3963"
  ],
  [
   "659",
   "0.2642"
  ],
  [
   "665",
   "0.1321"
  ],
  [
   "676",
   "0.1321"
  ],
  [
   "682",
   "0.2642"
  ],
  [
   "685",
   "0.1321"
  ],
  [
   "692",
   "0.1321"
  ],
  [
   "712",
   "0.1321"
  ],
  [
   "715",
   "0.1321"
  ],
  [
   "722",
   "0.1321"
  ],
  [
   "726",
   "0.1321"
  ],
  [
   "729",
   "0.1321"
  ],
  [
   "732",
   "0.1321"
  ],
  [
   "742",
   "0.2642"
  ],
  [
   "782",
   "0.2642"
  ],
  [
   "786",
   "0.1321"
  ],
  [
   "788",
   "0.1321"
  ],
  [
   "795",
   "0.1321"
  ],
  [
   "796",
   "0.1321"
  ],
  [
   "799",
   "0.1321"
  ],
  [
   "819",
   "0.1321"
  ],
  [
   "843",
   "0.1321"
  ],
  [
   "845",
   "0.1321"
  ],
  [
   "846",
   "0.1321"
  ],
  [
   "852",
   "0.1321"
  ],
  [
   "862",
   "0.1321"
  ],
  [
   "885",
   "0.1321"
  ],
  [
   "915",
   "0.1321"
  ],
  [
   "985",
   "0.1321"
  ],
  [
   "1025",
   "0.1321"
  ],
  [
   "1028",
   "0.1321"
  ],
  [
   "1042",
   "0.1321"
  ],
  [
   "1052",
   "0.2642"
  ],
  [
   "1062",
   "0.1321"
  ],
  [
   "1065",
   "0.1321"
  ],
  [
   "1075",
   "0.2642"
  ],
  [
   "1076",
   "0.1321"
  ],
  [
   "1092",
   "0.1321"
  ],
  [
   "1102",
   "0.1321"
  ],
  [
   "1112",
   "0.1321"
  ],
  [
   "1118",
   "0.1321"
  ],
  [
   "1135",
   "0.2642"
  ],
  [
   "1152",
   "0.1321"
  ],
  [
   "1155",
   "0.1321"
  ],
  [
   "1158",
   "0.1321"
  ],
  [
   "1159",
   "0.1321"
  ],
  [
   "1162",
   "0.2642"
  ],
  [
   "1165",
   "0.1321"
  ],
  [
   "1166",
   "0.2642"
  ],
  [
   "1168",
   "0.1321"
  ],
  [
   "1172",
   "0.2642"
  ],
  [
   "1178",
   "0.1321"
  ],
  [
   "1179",
   "0.1321"
  ],
  [
   "1182",
   "0.2642"
  ],
  [
   "1185",
   "0.1321"
  ],
  [
   "1189",
   "0.1321"
  ],
  [
   "1195",
   "0.1321"
  ],
  [
   "1202",
   "0.2642"
  ],
  [
   "1205",
   "0.2642"
  ],
  [
   "1209",
   "0.1321"
  ],
  [
   "1212",
   "0.1321"
  ],
  [
   "1222",
   "0.2642"
  ],
  [
   "1225",
   "0.1321"
  ],
  [
   "1226",
   "0.2642"
  ],
  [
   "1228",
   "0.1321"
  ],
  [
   "1229",
   "0.1321"
  ],
  [
   "1242",
   "0.5284"
  ],
  [
   "1245",
   "0.2642"
  ],
  [
   "1246",
   "0.1321"
  ],
  [
   "1248",
   "0.1321"
  ],
  [
   "1252",
   "0.2642"
  ],
  [
   "1256",
   "0.1321"
  ],
  [
   "1258",
   "0.2642"
  ],
  [
   "1262",
   "0.2642"
  ],
  [
   "1266",
   "0.1321"
  ],
  [
   "1269",
   "0.2642"
  ],
  [
   "1272",
   "0.1321"
  ],
  [
   "1276",
   "0.2642"
  ],
  [
   "1279",
   "0.1321"
  ],
  [
   "1285",
   "0.1321"
  ],
  [
   "1289",
   "0.2642"
  ],
  [
   "1292",
   "0.5284"
  ],
  [
   "1295",
   "0.2642"
  ],
  [
   "1296",
   "0.2642"
  ],
  [
   "1299",
   "0.1321"
  ],
  [
   "1302",
   "0.6605"
  ],
  [
   "1305",
   "0.2642"
  ],
  [
   "1306",
   "0.3963"
  ],
  [
   "1308",
   "0.1321"
  ],
  [
   "1309",
   "0.5284"
  ],
  [
   "1312",
   "0.6605"
  ],
  [
   "1315",
   "0.3963"
  ],
  [
   "1318",
   "0.2642"
  ],
  [
   "1319",
   "0.1321"
  ],
  [
   "1322",
   "0.5284"
  ],
  [
   "1325",
   "0.2642"
  ],
  [
   "1328",
   "0.1321"
  ],
  [
   "1329",
   "0.2642"
  ],
  [
   "1332",
   "0.6605"
  ],
  [
   "1335",
   "0.5284"
  ],
  [
   "1339",
   "0.1321"
  ],
  [
   "1342",
   "0.6605"
  ],
  [
   "1345",
   "0.1321"
  ],
  [
   "1346",
   "0.1321"
  ],
  [
   "1349",
   "0.1321"
  ],
  [
   "1352",
   "0.5284"
  ],
  [
   "1355",
   "0.9247"
  ],
  [
   "1356",
   "0.1321"
  ],
  [
   "1359",
   "0.1321"
  ],
  [
   "1362",
   "0.6605"
  ],
  [
   "1365",
   "0.2642"
  ],
  [
   "1368",
   "0.1321"
  ],
  [
   "1372",
   "0.3963"
  ],
  [
   "1375",
   "0.3963"
  ],
  [
   "1376",
   "0.1321"
  ],
  [
   "1378",
   "0.1321"
  ],
  [
   "1379",
   "0.1321"
  ],
  [
   "1382",
   "0.6605"
  ],
  [
   "1385",
   "0.6605"
  ],
  [
   "1386",
   "0.1321"
  ],
  [
   "1389",
   "0.1321"
  ],
  [
   "1392",
   "0.1321"
  ],
  [
   "1395",
   "0.1321"
  ],
  [
   "1396",
   "0.1321"
  ],
  [
   "1399",
   "0.2642"
  ],
  [
   "1402",
   "0.2642"
  ],
  [
   "1405",
   "0.2642"
  ],
  [
   "1412",
   "0.1321"
  ],
  [
   "1416",
   "0.1321"
  ],
  [
   "1419",
   "0.2642"
  ],
  [
   "1426",
   "0.2642"
  ],
  [
   "1428",
   "0.2642"
  ],
  [
   "1429",
   "0.1321"
  ],
  [
   "1432",
   "0.2642"
  ],
  [
   "1435",
   "0.3963"
  ],
  [
   "1439",
   "0.1321"
  ],
  [
   "1442",
   "0.1321"
  ],
  [
   "1445",
   "0.2642"
  ],
  [
   "1446",
   "0.1321"
  ],
  [
   "1449",
   "0.3963"
  ],
  [
   "1452",
   "0.5284"
  ],
  [
   "1455",
   "0.1321"
  ],
  [
   "1456",
   "0.2642"
  ],
  [
   "1459",
   "0.1321"
  ],
  [
   "1462",
   "0.1321"
  ],
  [
   "1466",
   "0.2642"
  ],
  [
   "1468",
   "0.2642"
  ],
  [
   "1469",
   "0.1321"
  ],
  [
   "1472",
   "0.5284"
  ],
  [
   "1475",
   "0.2642"
  ],
  [
   "1476",
   "0.1321"
  ],
  [
   "1479",
   "0.2642"
  ],
  [
   "1482",
   "0.2642"
  ],
  [
   "1489",
   "0.1321"
  ],
  [
   "1492",
   "0.3963"
  ],
  [
   "1495",
   "0.1321"
  ],
  [
   "1498",
   "0.2642"
  ],
  [
   "1499",
   "0.2642"
  ],
  [
   "1502",
   "0.3963"
  ],
  [
   "1505",
   "0.3963"
  ],
  [
   "1509",
   "0.1321"
  ],
  [
   "1512",
   "0.1321"
  ],
  [
   "1515",
   "0.3963"
  ],
  [
   "1518",
   "0.2642"
  ],
  [
   "1525",
   "0.3963"
  ],
  [
   "1526",
   "0.2642"
  ],
  [
   "1528",
   "0.1321"
  ],
  [
   "1529",
   "0.2642"
  ],
  [
   "1532",
   "0.3963"
  ],
  [
   "1536",
   "0.1321"
  ],
  [
   "1538",
   "0.1321"
  ],
  [
   "1539",
   "0.9247"
  ],
  [
   "1542",
   "0.2642"
  ],
  [
   "1545",
   "0.6605"
  ],
  [
   "1546",
   "0.1321"
  ],
  [
   "1548",
   "0.1321"
  ],
  [
   "1552",
   "0.2642"
  ],
  [
   "1555",
   "0.2642"
  ],
  [
   "1559",
   "0.2642"
  ],
  [
   "1562",
   "0.3963"
  ],
  [
   "1565",
   "0.2642"
  ],
  [
   "1566",
   "0.2642"
  ],
  [
   "1568",
   "0.2642"
  ],
  [
   "1569",
   "0.1321"
  ],
  [
   "1572",
   "0.1321"
  ],
  [
   "1575",
   "0.1321"
  ],
  [
   "1579",
   "0.6605"
  ],
  [
   "1582",
   "0.2642"
  ],
  [
   "1585",
   "0.3963"
  ],
  [
   "1589",
   "0.6605"
  ],
  [
   "1592",
   "0.6605"
  ],
  [
   "1598",
   "0.2642"
  ],
  [
   "1599",
   "0.3963"
  ],
  [
   "1602",
   "0.7926"
  ],
  [
   "1605",
   "0.5284"
  ],
  [
   "1606",
   "0.2642"
  ],
  [
   "1608",
   "0.1321"
  ],
  [
   "1609",
   "0.2642"
  ],
  [
   "1612",
   "0.1321"
  ],
  [
   "1615",
   "0.1321"
  ],
  [
   "1616",
   "0.2642"
  ],
  [
   "1619",
   "0.3963"
  ],
  [
   "1622",
   "0.6605"
  ],
  [
   "1625",
   "0.5284"
  ],
  [
   "1629",
   "0.1321"
  ],
  [
   "1632",
   "0.1321"
  ],
  [
   "1636",
   "0.3963"
  ],
  [
   "1638",
   "0.1321"
  ],
  [
   "1639",
   "0.2642"
  ],
  [
   "1642",
   "0.1321"
  ],
  [
   "1645",
   "0.1321"
  ],
  [
   "1648",
   "0.1321"
  ],
  [
   "1649",
   "0.1321"
  ],
  [
   "1652",
   "0.1321"
  ],
  [
   "1656",
   "0.1321"
  ],
  [
   "1659",
   "0.2642"
  ],
  [
   "1662",
   "0.2642"
  ],
  [
   "1666",
   "0.1321"
  ],
  [
   "1668",
   "0.2642"
  ],
  [
   "1675",
   "0.2642"
  ],
  [
   "1676",
   "0.1321"
  ],
  [
   "1679",
   "0.6605"
  ],
  [
   "1682",
   "0.2642"
  ],
  [
   "1685",
   "0.3963"
  ],
  [
   "1688",
   "0.1321"
  ],
  [
   "1689",
   "0.1321"
  ],
  [
   "1692",
   "0.1321"
  ],
  [
   "1695",
   "0.1321"
  ],
  [
   "1709",
   "0.1321"
  ],
  [
   "1712",
   "0.2642"
  ],
  [
   "1715",
   "0.3963"
  ],
  [
   "1718",
   "0.2642"
  ],
  [
   "1722",
   "0.2642"
  ],
  [
   "1728",
   "0.1321"
  ],
  [
   "1732",
   "0.5284"
  ],
  [
   "1748",
   "0.2642"
  ],
  [
   "1749",
   "0.1321"
  ],
  [
   "1759",
   "0.3963"
  ],
  [
   "1762",
   "0.2642"
  ],
  [
   "1765",
   "0.1321"
  ],
  [
   "1766",
   "0.1321"
  ],
  [
   "1772",
   "0.2642"
  ],
  [
   "1776",
   "0.1321"
  ],
  [
   "1778",
   "0.1321"
  ],
  [
   "1786",
   "0.3963"
  ],
  [
   "1802",
   "0.1321"
  ],
  [
   "1805",
   "0.2642"
  ],
  [
   "1809",
   "0.2642"
  ],
  [
   "1812",
   "0.1321"
  ],
  [
   "1816",
   "0.1321"
  ],
  [
   "1819",
   "0.1321"
  ],
  [
   "1822",
   "0.2642"
  ],
  [
   "1858",
   "0.1321"
  ],
  [
   "1859",
   "0.1321"
  ],
  [
   "1866",
   "0.1321"
  ],
  [
   "1875",
   "0.1321"
  ],
  [
   "1895",
   "0.1321"
  ],
  [
   "1899",
   "0.1321"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 126,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "265 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 126,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 437,
  "name": "Your",
  "id": 113570209
 }
}