{
 "id": 523,
 "ids": "523",
 "state": "None",
 "name": "Continuous Subarray Sum",
 "key": "continuous-subarray-sum",
 "link": "https://leetcode.com/problems/continuous-subarray-sum",
 "locked": false,
 "percent": 22.452377141027693,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "14K",
 "totalSubmit": "62.5K",
 "desc": "\r\nGiven a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput: [23, 2, 4, 6, 7],  k=6\r\nOutput: True\r\nExplanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\r\n\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [23, 2, 6, 4, 7],  k=6\r\nOutput: True\r\nExplanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe length of the array won't exceed 10,000.\r\nYou may assume the sum of all the numbers is in the range of a signed 32-bit integer.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool checkSubarraySum(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean checkSubarraySum(int[] nums, int k) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def checkSubarraySum(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool checkSubarraySum(int* nums, int numsSize, int k) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool CheckSubarraySum(int[] nums, int k) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {boolean}\r\n */\r\nvar checkSubarraySum = function(nums, k) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Boolean}\r\ndef check_subarray_sum(nums, k)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func checkSubarraySum(_ nums: [Int], _ k: Int) -> Bool {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func checkSubarraySum(nums []int, k int) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def checkSubarraySum(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[23,2,4,6,7]\\n6'",
 "testable": true,
 "slug": "continuous-subarray-sum",
 "category": "algorithms",
 "fname": "523.continuous-subarray-sum.algorithms.py"
}