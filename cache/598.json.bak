{
 "id": 598,
 "ids": "598",
 "state": "notac",
 "name": "Range Addition II",
 "key": "range-addition-ii",
 "link": "https://leetcode.com/problems/range-addition-ii",
 "locked": false,
 "percent": 48.597707105382476,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "7.5K",
 "totalSubmit": "15.4K",
 "desc": "Given an m * n matrix M initialized with all 0's and several update operations.\r\nOperations are represented by a 2D array, and each operation is represented by an array with two positive integers a and b, which means M[i][j] should be added by one for all 0 <= i < a and 0 <= j < b. \r\nYou need to count and return the number of maximum integers in the matrix after performing all the operations.\r\n\r\nExample 1:\r\n\r\nInput: \r\nm = 3, n = 3\r\noperations = [[2,2],[3,3]]\r\nOutput: 4\r\nExplanation: \r\nInitially, M = \r\n[[0, 0, 0],\r\n [0, 0, 0],\r\n [0, 0, 0]]\r\n\r\nAfter performing [2,2], M = \r\n[[1, 1, 0],\r\n [1, 1, 0],\r\n [0, 0, 0]]\r\n\r\nAfter performing [3,3], M = \r\n[[2, 2, 1],\r\n [2, 2, 1],\r\n [1, 1, 1]]\r\n\r\nSo the maximum integer in M is 2, and there are four of it in M. So return 4.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe range of m and n is [1,40000].\r\nThe range of a is [1,m], and the range of b is [1,n].\r\nThe range of operations size won't exceed 10,000.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\npublic:\n    int maxCount(int m, int n, vector<vector<int>>& ops) {\n        \n    }\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\n    public int maxCount(int m, int n, int[][] ops) {\n        \n    }\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\n    def maxCount(self, m, n, ops):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type ops: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\n    def maxCount(self, m, n, ops):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type ops: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int maxCount(int m, int n, int** ops, int opsRowSize, int opsColSize) {\n    \n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\n    public int MaxCount(int m, int n, int[,] ops) {\n        \n    }\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[][]} ops\n * @return {number}\n */\nvar maxCount = function(m, n, ops) {\n    \n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[][]} ops\n# @return {Integer}\ndef max_count(m, n, ops)\n    \nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func maxCount(_ m: Int, _ n: Int, _ ops: [[Int]]) -> Int {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func maxCount(m int, n int, ops [][]int) int {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def maxCount(m: Int, n: Int, ops: Array[Array[Int]]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'3\\n3\\n[[2,2],[3,3]]'",
 "testable": true,
 "slug": "range-addition-ii",
 "category": "algorithms",
 "fname": "598.range-addition-ii.algorithms.py",
 "test_your": {
  "code_answer": [
   "4"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "48 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500908024.2_784204_16"
 },
 "test_expected": {
  "code_answer": [
   "4"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "33 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500908024.22_784204_16"
 },
 "file": "598.range-addition-ii.algorithms.py",
 "submit_chart": [
  [
   "35",
   "1.8470"
  ],
  [
   "36",
   "2.1108"
  ],
  [
   "38",
   "2.5066"
  ],
  [
   "39",
   "5.9367"
  ],
  [
   "42",
   "18.2058"
  ],
  [
   "43",
   "1.0554"
  ],
  [
   "45",
   "10.2902"
  ],
  [
   "46",
   "5.4090"
  ],
  [
   "48",
   "3.9578"
  ],
  [
   "49",
   "8.8391"
  ],
  [
   "52",
   "11.4776"
  ],
  [
   "53",
   "0.3958"
  ],
  [
   "55",
   "3.9578"
  ],
  [
   "56",
   "2.3747"
  ],
  [
   "58",
   "0.9235"
  ],
  [
   "59",
   "3.6939"
  ],
  [
   "62",
   "3.5620"
  ],
  [
   "63",
   "0.3958"
  ],
  [
   "65",
   "1.9789"
  ],
  [
   "66",
   "1.0554"
  ],
  [
   "68",
   "0.3958"
  ],
  [
   "69",
   "1.4512"
  ],
  [
   "72",
   "1.9789"
  ],
  [
   "75",
   "0.9235"
  ],
  [
   "76",
   "0.2639"
  ],
  [
   "78",
   "0.3958"
  ],
  [
   "79",
   "1.0554"
  ],
  [
   "82",
   "0.7916"
  ],
  [
   "85",
   "0.3958"
  ],
  [
   "86",
   "0.1319"
  ],
  [
   "89",
   "0.2639"
  ],
  [
   "92",
   "0.2639"
  ],
  [
   "95",
   "0.1319"
  ],
  [
   "96",
   "0.1319"
  ],
  [
   "98",
   "0.1319"
  ],
  [
   "106",
   "0.1319"
  ],
  [
   "112",
   "0.1319"
  ],
  [
   "115",
   "0.1319"
  ],
  [
   "116",
   "0.1319"
  ],
  [
   "125",
   "0.3958"
  ],
  [
   "129",
   "0.1319"
  ],
  [
   "138",
   "0.1319"
  ],
  [
   "166",
   "0.1319"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 69,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "49 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 69,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 598,
  "name": "Your",
  "id": 110948338
 }
}