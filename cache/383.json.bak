{
 "id": 383,
 "ids": "383",
 "state": "None",
 "name": "Ransom Note",
 "key": "ransom-note",
 "link": "https://leetcode.com/problems/ransom-note",
 "locked": false,
 "percent": 47.06188990810261,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "56K",
 "totalSubmit": "118.9K",
 "desc": "\r\nGiven an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom \r\nnote can be constructed from the magazines ; otherwise, it will return false. \r\n\r\n\r\nEach letter in the magazine string can only be used once in your ransom note.\r\n\r\n\r\nNote:\r\nYou may assume that both strings contain only lowercase letters.\r\n\r\n\r\n\r\ncanConstruct(\"a\", \"b\") -> false\r\ncanConstruct(\"aa\", \"ab\") -> false\r\ncanConstruct(\"aa\", \"aab\") -> true\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool canConstruct(string ransomNote, string magazine) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean canConstruct(String ransomNote, String magazine) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def canConstruct(self, ransomNote, magazine):\r\n        \"\"\"\r\n        :type ransomNote: str\r\n        :type magazine: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool canConstruct(char* ransomNote, char* magazine) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool CanConstruct(string ransomNote, string magazine) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} ransomNote\r\n * @param {string} magazine\r\n * @return {boolean}\r\n */\r\nvar canConstruct = function(ransomNote, magazine) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} ransom_note\r\n# @param {String} magazine\r\n# @return {Boolean}\r\ndef can_construct(ransom_note, magazine)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func canConstruct(ransomNote string, magazine string) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def canConstruct(ransomNote: String, magazine: String): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"a\"\\n\"b\"'",
 "testable": true,
 "slug": "ransom-note",
 "category": "algorithms",
 "fname": "383.ransom-note.algorithms.py",
 "test_your": {
  "code_answer": [
   "false"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500791168.35_784204_11"
 },
 "test_expected": {
  "code_answer": [
   "false"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500791168.38_784204_11"
 },
 "submit_chart": [
  [
   "45",
   "0.2571"
  ],
  [
   "46",
   "0.2571"
  ],
  [
   "48",
   "0.6427"
  ],
  [
   "49",
   "0.7712"
  ],
  [
   "52",
   "1.5424"
  ],
  [
   "55",
   "2.0566"
  ],
  [
   "56",
   "0.5141"
  ],
  [
   "58",
   "0.2571"
  ],
  [
   "59",
   "1.0283"
  ],
  [
   "62",
   "1.1568"
  ],
  [
   "63",
   "0.1285"
  ],
  [
   "65",
   "0.5141"
  ],
  [
   "66",
   "0.3856"
  ],
  [
   "68",
   "0.2571"
  ],
  [
   "69",
   "0.8997"
  ],
  [
   "72",
   "1.0283"
  ],
  [
   "73",
   "0.1285"
  ],
  [
   "75",
   "0.3856"
  ],
  [
   "76",
   "0.2571"
  ],
  [
   "78",
   "0.7712"
  ],
  [
   "79",
   "0.1285"
  ],
  [
   "82",
   "0.8997"
  ],
  [
   "85",
   "1.2853"
  ],
  [
   "86",
   "0.3856"
  ],
  [
   "88",
   "0.2571"
  ],
  [
   "89",
   "1.7995"
  ],
  [
   "92",
   "2.1851"
  ],
  [
   "93",
   "0.1285"
  ],
  [
   "95",
   "2.6992"
  ],
  [
   "96",
   "1.2853"
  ],
  [
   "98",
   "0.7712"
  ],
  [
   "99",
   "3.2134"
  ],
  [
   "102",
   "3.4704"
  ],
  [
   "105",
   "1.6710"
  ],
  [
   "106",
   "1.9280"
  ],
  [
   "108",
   "1.0283"
  ],
  [
   "109",
   "1.7995"
  ],
  [
   "112",
   "3.2134"
  ],
  [
   "113",
   "0.2571"
  ],
  [
   "115",
   "0.8997"
  ],
  [
   "116",
   "1.0283"
  ],
  [
   "118",
   "0.6427"
  ],
  [
   "119",
   "1.0283"
  ],
  [
   "122",
   "1.6710"
  ],
  [
   "123",
   "0.1285"
  ],
  [
   "125",
   "0.8997"
  ],
  [
   "126",
   "0.7712"
  ],
  [
   "128",
   "0.2571"
  ],
  [
   "129",
   "1.1568"
  ],
  [
   "132",
   "2.0566"
  ],
  [
   "133",
   "0.1285"
  ],
  [
   "135",
   "0.8997"
  ],
  [
   "136",
   "0.1285"
  ],
  [
   "138",
   "0.1285"
  ],
  [
   "139",
   "0.8997"
  ],
  [
   "142",
   "1.2853"
  ],
  [
   "145",
   "0.5141"
  ],
  [
   "146",
   "0.2571"
  ],
  [
   "149",
   "0.5141"
  ],
  [
   "152",
   "0.3856"
  ],
  [
   "155",
   "0.2571"
  ],
  [
   "159",
   "0.2571"
  ],
  [
   "162",
   "0.3856"
  ],
  [
   "165",
   "0.6427"
  ],
  [
   "166",
   "0.2571"
  ],
  [
   "168",
   "0.2571"
  ],
  [
   "169",
   "0.8997"
  ],
  [
   "172",
   "2.3136"
  ],
  [
   "175",
   "1.7995"
  ],
  [
   "176",
   "0.5141"
  ],
  [
   "178",
   "0.1285"
  ],
  [
   "179",
   "1.5424"
  ],
  [
   "182",
   "1.9280"
  ],
  [
   "185",
   "2.3136"
  ],
  [
   "186",
   "1.2853"
  ],
  [
   "188",
   "0.7712"
  ],
  [
   "189",
   "1.2853"
  ],
  [
   "192",
   "1.7995"
  ],
  [
   "195",
   "0.7712"
  ],
  [
   "196",
   "0.5141"
  ],
  [
   "198",
   "0.3856"
  ],
  [
   "199",
   "1.1568"
  ],
  [
   "202",
   "0.7712"
  ],
  [
   "205",
   "0.6427"
  ],
  [
   "206",
   "0.3856"
  ],
  [
   "209",
   "0.7712"
  ],
  [
   "212",
   "0.8997"
  ],
  [
   "215",
   "0.2571"
  ],
  [
   "216",
   "0.3856"
  ],
  [
   "218",
   "0.1285"
  ],
  [
   "219",
   "0.5141"
  ],
  [
   "222",
   "0.6427"
  ],
  [
   "225",
   "0.5141"
  ],
  [
   "226",
   "0.3856"
  ],
  [
   "228",
   "0.2571"
  ],
  [
   "229",
   "0.1285"
  ],
  [
   "232",
   "0.5141"
  ],
  [
   "235",
   "0.1285"
  ],
  [
   "236",
   "0.2571"
  ],
  [
   "239",
   "0.7712"
  ],
  [
   "242",
   "0.1285"
  ],
  [
   "245",
   "0.6427"
  ],
  [
   "246",
   "0.1285"
  ],
  [
   "248",
   "0.6427"
  ],
  [
   "249",
   "0.2571"
  ],
  [
   "252",
   "0.7712"
  ],
  [
   "255",
   "0.5141"
  ],
  [
   "256",
   "0.3856"
  ],
  [
   "258",
   "0.1285"
  ],
  [
   "259",
   "0.2571"
  ],
  [
   "262",
   "0.3856"
  ],
  [
   "265",
   "0.3856"
  ],
  [
   "266",
   "0.1285"
  ],
  [
   "272",
   "0.7712"
  ],
  [
   "275",
   "0.3856"
  ],
  [
   "276",
   "0.1285"
  ],
  [
   "279",
   "0.1285"
  ],
  [
   "282",
   "0.3856"
  ],
  [
   "283",
   "0.1285"
  ],
  [
   "285",
   "0.1285"
  ],
  [
   "288",
   "0.1285"
  ],
  [
   "289",
   "0.3856"
  ],
  [
   "292",
   "0.1285"
  ],
  [
   "298",
   "0.1285"
  ],
  [
   "299",
   "0.3856"
  ],
  [
   "302",
   "0.3856"
  ],
  [
   "305",
   "0.1285"
  ],
  [
   "306",
   "0.1285"
  ],
  [
   "309",
   "0.1285"
  ],
  [
   "312",
   "0.5141"
  ],
  [
   "322",
   "0.1285"
  ],
  [
   "326",
   "0.1285"
  ],
  [
   "332",
   "0.1285"
  ],
  [
   "339",
   "0.1285"
  ],
  [
   "358",
   "0.2571"
  ],
  [
   "362",
   "0.1285"
  ],
  [
   "365",
   "0.2571"
  ],
  [
   "378",
   "0.1285"
  ],
  [
   "382",
   "0.1285"
  ],
  [
   "385",
   "0.1285"
  ],
  [
   "398",
   "0.1285"
  ],
  [
   "405",
   "0.1285"
  ],
  [
   "468",
   "0.1285"
  ],
  [
   "479",
   "0.1285"
  ],
  [
   "495",
   "0.1285"
  ],
  [
   "562",
   "0.1285"
  ],
  [
   "575",
   "0.1285"
  ],
  [
   "629",
   "0.1285"
  ],
  [
   "662",
   "0.1285"
  ],
  [
   "692",
   "0.1285"
  ],
  [
   "908",
   "0.1285"
  ],
  [
   "1078",
   "0.1285"
  ],
  [
   "1246",
   "0.1285"
  ],
  [
   "1362",
   "0.1285"
  ],
  [
   "1549",
   "0.1285"
  ],
  [
   "1859",
   "0.1285"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 126,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "125 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 126,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 383,
  "name": "Your",
  "id": 110770812
 }
}