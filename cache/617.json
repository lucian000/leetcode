{
 "id": 617,
 "ids": "617",
 "state": "None",
 "name": "Merge Two Binary Trees",
 "key": "merge-two-binary-trees",
 "link": "https://leetcode.com/problems/merge-two-binary-trees",
 "locked": false,
 "percent": 69.17854962106246,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "19.3K",
 "totalSubmit": "27.8K",
 "desc": "\r\nGiven two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. \r\n\r\n\r\nYou need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput: \r\n\tTree 1                     Tree 2                  \r\n          1                         2                             \r\n         / \\                       / \\                            \r\n        3   2                     1   3                        \r\n       /                           \\   \\                      \r\n      5                             4   7                  \r\nOutput: \r\nMerged tree:\r\n\t     3\r\n\t    / \\\r\n\t   4   5\r\n\t  / \\   \\ \r\n\t 5   4   7\r\n\r\n\r\n\r\n\r\nNote:\r\nThe merging process must start from the root nodes of both trees.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def mergeTrees(self, t1, t2):\r\n        \"\"\"\r\n        :type t1: TreeNode\r\n        :type t2: TreeNode\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def mergeTrees(self, t1, t2):\r\n        \"\"\"\r\n        :type t1: TreeNode\r\n        :type t2: TreeNode\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* mergeTrees(struct TreeNode* t1, struct TreeNode* t2) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode MergeTrees(TreeNode t1, TreeNode t2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} t1\r\n * @param {TreeNode} t2\r\n * @return {TreeNode}\r\n */\r\nvar mergeTrees = function(t1, t2) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} t1\r\n# @param {TreeNode} t2\r\n# @return {TreeNode}\r\ndef merge_trees(t1, t2)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func mergeTrees(_ t1: TreeNode?, _ t2: TreeNode?) -> TreeNode? {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def mergeTrees(t1: TreeNode, t2: TreeNode): TreeNode = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,3,2,5]\\n[2,1,3,null,4,null,7]'",
 "testable": true,
 "slug": "merge-two-binary-trees",
 "category": "algorithms",
 "fname": "617.merge-two-binary-trees.algorithms.py",
 "test_your": {
  "code_answer": [
   "[3,4,5,5,4,null,7]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502467013.7_784204_10"
 },
 "test_expected": {
  "code_answer": [
   "[3,4,5,5,4,null,7]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "3 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502467013.73_784204_10"
 },
 "submit_chart": [
  [
   "99",
   "0.1955"
  ],
  [
   "102",
   "1.1337"
  ],
  [
   "103",
   "0.0391"
  ],
  [
   "105",
   "2.7365"
  ],
  [
   "106",
   "1.2119"
  ],
  [
   "108",
   "1.8765"
  ],
  [
   "109",
   "3.9875"
  ],
  [
   "112",
   "6.2940"
  ],
  [
   "113",
   "0.1173"
  ],
  [
   "115",
   "3.5966"
  ],
  [
   "116",
   "2.2674"
  ],
  [
   "118",
   "2.0719"
  ],
  [
   "119",
   "4.5348"
  ],
  [
   "122",
   "4.8084"
  ],
  [
   "123",
   "0.1173"
  ],
  [
   "125",
   "2.9711"
  ],
  [
   "126",
   "1.7201"
  ],
  [
   "128",
   "1.7201"
  ],
  [
   "129",
   "2.8929"
  ],
  [
   "132",
   "5.3948"
  ],
  [
   "133",
   "0.1955"
  ],
  [
   "135",
   "4.1048"
  ],
  [
   "136",
   "2.1110"
  ],
  [
   "138",
   "1.6419"
  ],
  [
   "139",
   "3.7138"
  ],
  [
   "142",
   "5.5903"
  ],
  [
   "143",
   "0.1564"
  ],
  [
   "145",
   "3.8702"
  ],
  [
   "146",
   "1.8374"
  ],
  [
   "148",
   "1.2119"
  ],
  [
   "149",
   "2.7365"
  ],
  [
   "152",
   "3.4793"
  ],
  [
   "155",
   "1.6028"
  ],
  [
   "156",
   "1.0946"
  ],
  [
   "158",
   "0.9382"
  ],
  [
   "159",
   "1.3683"
  ],
  [
   "162",
   "1.8374"
  ],
  [
   "165",
   "1.4855"
  ],
  [
   "166",
   "0.5864"
  ],
  [
   "168",
   "0.3909"
  ],
  [
   "169",
   "0.8210"
  ],
  [
   "172",
   "1.4464"
  ],
  [
   "175",
   "0.8600"
  ],
  [
   "176",
   "0.3518"
  ],
  [
   "178",
   "0.2346"
  ],
  [
   "179",
   "0.3518"
  ],
  [
   "182",
   "0.6255"
  ],
  [
   "185",
   "0.3909"
  ],
  [
   "186",
   "0.1955"
  ],
  [
   "188",
   "0.2346"
  ],
  [
   "189",
   "0.2346"
  ],
  [
   "192",
   "0.5864"
  ],
  [
   "195",
   "0.3127"
  ],
  [
   "196",
   "0.1173"
  ],
  [
   "198",
   "0.1564"
  ],
  [
   "199",
   "0.3909"
  ],
  [
   "202",
   "0.2737"
  ],
  [
   "205",
   "0.0782"
  ],
  [
   "206",
   "0.1564"
  ],
  [
   "208",
   "0.1564"
  ],
  [
   "209",
   "0.2346"
  ],
  [
   "212",
   "0.2737"
  ],
  [
   "215",
   "0.0391"
  ],
  [
   "216",
   "0.0391"
  ],
  [
   "218",
   "0.0391"
  ],
  [
   "219",
   "0.1173"
  ],
  [
   "222",
   "0.0782"
  ],
  [
   "225",
   "0.0782"
  ],
  [
   "226",
   "0.0782"
  ],
  [
   "229",
   "0.0391"
  ],
  [
   "236",
   "0.0391"
  ],
  [
   "239",
   "0.1564"
  ],
  [
   "245",
   "0.0391"
  ],
  [
   "246",
   "0.0782"
  ],
  [
   "248",
   "0.0782"
  ],
  [
   "249",
   "0.0391"
  ],
  [
   "255",
   "0.0391"
  ],
  [
   "259",
   "0.1173"
  ],
  [
   "262",
   "0.1173"
  ],
  [
   "265",
   "0.0391"
  ],
  [
   "268",
   "0.0391"
  ],
  [
   "272",
   "0.0391"
  ],
  [
   "282",
   "0.0391"
  ],
  [
   "292",
   "0.0391"
  ],
  [
   "298",
   "0.0391"
  ],
  [
   "302",
   "0.0391"
  ],
  [
   "325",
   "0.0391"
  ],
  [
   "389",
   "0.0391"
  ],
  [
   "392",
   "0.0391"
  ],
  [
   "482",
   "0.0391"
  ],
  [
   "486",
   "0.0391"
  ],
  [
   "519",
   "0.0391"
  ],
  [
   "562",
   "0.0391"
  ],
  [
   "579",
   "0.0391"
  ],
  [
   "609",
   "0.0391"
  ],
  [
   "922",
   "0.0391"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 183,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "132 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 183,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 617,
  "name": "Your",
  "id": 113459534
 }
}