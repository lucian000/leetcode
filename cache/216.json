{
 "id": 216,
 "ids": "216",
 "state": "None",
 "name": "Combination Sum III",
 "key": "combination-sum-iii",
 "link": "https://leetcode.com/problems/combination-sum-iii",
 "locked": false,
 "percent": 44.69264697310216,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "69K",
 "totalSubmit": "154.4K",
 "desc": "\r\nFind all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\r\n\r\n\r\n\r\n Example 1:\r\nInput:  k = 3,  n = 7\r\nOutput: \r\n\r\n[[1,2,4]]\r\n\r\n\r\n Example 2:\r\nInput:  k = 3,  n = 9\r\nOutput: \r\n\r\n[[1,2,6], [1,3,5], [2,3,4]]\r\n\r\n\r\n\r\nCredits:Special thanks to @mithmatt for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    vector<vector<int>> combinationSum3(int k, int n) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public List<List<Integer>> combinationSum3(int k, int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def combinationSum3(self, k, n):\r\n        \"\"\"\r\n        :type k: int\r\n        :type n: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** combinationSum3(int k, int n, int** columnSizes, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public IList<IList<int>> CombinationSum3(int k, int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number} k\r\n * @param {number} n\r\n * @return {number[][]}\r\n */\r\nvar combinationSum3 = function(k, n) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} k\r\n# @param {Integer} n\r\n# @return {Integer[][]}\r\ndef combination_sum3(k, n)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func combinationSum3(_ k: Int, _ n: Int) -> [[Int]] {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func combinationSum3(k int, n int) [][]int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def combinationSum3(k: Int, n: Int): List[List[Int]] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'3\\n7'",
 "testable": true,
 "slug": "combination-sum-iii",
 "category": "algorithms",
 "fname": "216.combination-sum-iii.algorithms.py",
 "test_your": {
  "code_answer": [
   "[[1,2,4]]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502786693.23_784204_2"
 },
 "test_expected": {
  "code_answer": [
   "[[1,2,4]]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "1 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "1",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502786693.26_784204_2"
 },
 "submit_chart": [
  [
   "29",
   "1.3051"
  ],
  [
   "32",
   "11.5824"
  ],
  [
   "33",
   "1.4682"
  ],
  [
   "35",
   "11.7455"
  ],
  [
   "36",
   "10.2773"
  ],
  [
   "38",
   "5.2202"
  ],
  [
   "39",
   "14.8450"
  ],
  [
   "42",
   "13.5400"
  ],
  [
   "43",
   "0.4894"
  ],
  [
   "45",
   "6.0359"
  ],
  [
   "46",
   "4.7308"
  ],
  [
   "48",
   "2.1207"
  ],
  [
   "49",
   "4.0783"
  ],
  [
   "52",
   "3.4258"
  ],
  [
   "55",
   "1.6313"
  ],
  [
   "56",
   "0.8157"
  ],
  [
   "58",
   "0.4894"
  ],
  [
   "59",
   "0.8157"
  ],
  [
   "62",
   "0.9788"
  ],
  [
   "65",
   "0.1631"
  ],
  [
   "68",
   "0.1631"
  ],
  [
   "69",
   "0.1631"
  ],
  [
   "72",
   "0.4894"
  ],
  [
   "75",
   "0.4894"
  ],
  [
   "76",
   "0.1631"
  ],
  [
   "85",
   "0.3263"
  ],
  [
   "89",
   "0.3263"
  ],
  [
   "92",
   "0.1631"
  ],
  [
   "102",
   "0.1631"
  ],
  [
   "119",
   "0.1631"
  ],
  [
   "169",
   "0.1631"
  ],
  [
   "199",
   "0.1631"
  ],
  [
   "222",
   "0.1631"
  ],
  [
   "339",
   "0.3263"
  ],
  [
   "359",
   "0.1631"
  ],
  [
   "1068",
   "0.1631"
  ],
  [
   "1295",
   "0.1631"
  ],
  [
   "1375",
   "0.1631"
  ],
  [
   "1852",
   "0.1631"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 18,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "29 ms",
  "compare_result": "111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 18,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 216,
  "name": "Your",
  "id": 113974926
 }
}