{
 "id": 28,
 "ids": "28",
 "state": "None",
 "name": "Implement strStr()",
 "key": "implement-strstr",
 "link": "https://leetcode.com/problems/implement-strstr",
 "locked": false,
 "percent": 27.949402361223143,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "190.6K",
 "totalSubmit": "681.9K",
 "desc": "\r\nImplement strStr().\r\n\r\n\r\nReturns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int strStr(string haystack, string needle) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int strStr(String haystack, String needle) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def strStr(self, haystack, needle):\r\n        \"\"\"\r\n        :type haystack: str\r\n        :type needle: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int strStr(char* haystack, char* needle) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int StrStr(string haystack, string needle) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} haystack\r\n * @param {string} needle\r\n * @return {number}\r\n */\r\nvar strStr = function(haystack, needle) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} haystack\r\n# @param {String} needle\r\n# @return {Integer}\r\ndef str_str(haystack, needle)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func strStr(_ haystack: String, _ needle: String) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func strStr(haystack string, needle string) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"\"\\n\"\"'",
 "testable": true,
 "slug": "implement-strstr",
 "category": "algorithms",
 "fname": "28.implement-strstr.algorithms.py",
 "test_your": {
  "code_answer": [
   "0"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "36 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502597741.38_784204_33"
 },
 "test_expected": {
  "code_answer": [
   "0"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502597741.4_784204_33"
 },
 "submit_chart": [
  [
   "28",
   "0.3377"
  ],
  [
   "29",
   "0.8683"
  ],
  [
   "32",
   "9.3584"
  ],
  [
   "33",
   "0.6753"
  ],
  [
   "35",
   "9.4549"
  ],
  [
   "36",
   "5.9817"
  ],
  [
   "38",
   "3.3767"
  ],
  [
   "39",
   "8.9725"
  ],
  [
   "42",
   "10.6609"
  ],
  [
   "43",
   "0.6271"
  ],
  [
   "45",
   "5.2581"
  ],
  [
   "46",
   "3.5215"
  ],
  [
   "48",
   "2.1225"
  ],
  [
   "49",
   "4.3415"
  ],
  [
   "52",
   "4.6310"
  ],
  [
   "53",
   "0.1930"
  ],
  [
   "55",
   "3.4250"
  ],
  [
   "56",
   "1.6884"
  ],
  [
   "58",
   "1.0130"
  ],
  [
   "59",
   "3.0873"
  ],
  [
   "62",
   "2.9908"
  ],
  [
   "63",
   "0.1447"
  ],
  [
   "65",
   "1.3507"
  ],
  [
   "66",
   "0.9648"
  ],
  [
   "68",
   "0.3859"
  ],
  [
   "69",
   "1.0613"
  ],
  [
   "72",
   "1.8331"
  ],
  [
   "75",
   "0.3377"
  ],
  [
   "76",
   "0.4342"
  ],
  [
   "78",
   "0.0965"
  ],
  [
   "79",
   "0.5789"
  ],
  [
   "82",
   "0.3859"
  ],
  [
   "85",
   "0.0965"
  ],
  [
   "86",
   "0.0482"
  ],
  [
   "88",
   "0.1930"
  ],
  [
   "89",
   "0.1930"
  ],
  [
   "92",
   "0.1930"
  ],
  [
   "98",
   "0.0965"
  ],
  [
   "102",
   "0.1447"
  ],
  [
   "108",
   "0.0482"
  ],
  [
   "109",
   "0.0965"
  ],
  [
   "112",
   "0.0965"
  ],
  [
   "122",
   "0.0482"
  ],
  [
   "125",
   "0.0482"
  ],
  [
   "128",
   "0.1930"
  ],
  [
   "129",
   "0.0482"
  ],
  [
   "132",
   "0.0965"
  ],
  [
   "138",
   "0.0482"
  ],
  [
   "142",
   "0.0482"
  ],
  [
   "145",
   "0.0482"
  ],
  [
   "149",
   "0.0482"
  ],
  [
   "155",
   "0.0482"
  ],
  [
   "158",
   "0.0482"
  ],
  [
   "159",
   "0.0965"
  ],
  [
   "162",
   "0.0965"
  ],
  [
   "166",
   "0.0482"
  ],
  [
   "168",
   "0.0482"
  ],
  [
   "172",
   "0.0965"
  ],
  [
   "178",
   "0.0482"
  ],
  [
   "179",
   "0.0965"
  ],
  [
   "182",
   "0.0482"
  ],
  [
   "192",
   "0.0482"
  ],
  [
   "195",
   "0.0482"
  ],
  [
   "202",
   "0.0482"
  ],
  [
   "205",
   "0.0482"
  ],
  [
   "209",
   "0.0482"
  ],
  [
   "212",
   "0.0965"
  ],
  [
   "219",
   "0.0965"
  ],
  [
   "232",
   "0.0482"
  ],
  [
   "235",
   "0.0482"
  ],
  [
   "256",
   "0.0482"
  ],
  [
   "268",
   "0.0482"
  ],
  [
   "342",
   "0.0482"
  ],
  [
   "348",
   "0.0482"
  ],
  [
   "386",
   "0.0482"
  ],
  [
   "402",
   "0.0482"
  ],
  [
   "422",
   "0.0482"
  ],
  [
   "449",
   "0.0482"
  ],
  [
   "462",
   "0.0482"
  ],
  [
   "475",
   "0.0482"
  ],
  [
   "576",
   "0.0482"
  ],
  [
   "585",
   "0.0482"
  ],
  [
   "588",
   "0.0482"
  ],
  [
   "589",
   "0.0965"
  ],
  [
   "592",
   "0.0482"
  ],
  [
   "595",
   "0.1447"
  ],
  [
   "598",
   "0.0482"
  ],
  [
   "599",
   "0.2412"
  ],
  [
   "602",
   "0.1447"
  ],
  [
   "605",
   "0.1447"
  ],
  [
   "606",
   "0.0965"
  ],
  [
   "608",
   "0.0482"
  ],
  [
   "609",
   "0.0965"
  ],
  [
   "612",
   "0.1447"
  ],
  [
   "615",
   "0.1930"
  ],
  [
   "616",
   "0.0482"
  ],
  [
   "618",
   "0.0482"
  ],
  [
   "619",
   "0.2412"
  ],
  [
   "622",
   "0.1447"
  ],
  [
   "625",
   "0.1930"
  ],
  [
   "626",
   "0.1930"
  ],
  [
   "628",
   "0.0482"
  ],
  [
   "629",
   "0.0482"
  ],
  [
   "632",
   "0.2412"
  ],
  [
   "635",
   "0.0965"
  ],
  [
   "636",
   "0.0482"
  ],
  [
   "639",
   "0.1447"
  ],
  [
   "642",
   "0.0482"
  ],
  [
   "649",
   "0.1930"
  ],
  [
   "652",
   "0.1447"
  ],
  [
   "655",
   "0.0965"
  ],
  [
   "659",
   "0.1930"
  ],
  [
   "662",
   "0.3859"
  ],
  [
   "663",
   "0.0482"
  ],
  [
   "666",
   "0.0965"
  ],
  [
   "669",
   "0.0482"
  ],
  [
   "672",
   "0.0965"
  ],
  [
   "675",
   "0.0965"
  ],
  [
   "678",
   "0.0482"
  ],
  [
   "679",
   "0.1447"
  ],
  [
   "682",
   "0.1447"
  ],
  [
   "685",
   "0.0482"
  ],
  [
   "692",
   "0.0965"
  ],
  [
   "699",
   "0.0482"
  ],
  [
   "702",
   "0.0965"
  ],
  [
   "705",
   "0.0482"
  ],
  [
   "712",
   "0.0482"
  ],
  [
   "713",
   "0.0482"
  ],
  [
   "718",
   "0.0482"
  ],
  [
   "729",
   "0.0482"
  ],
  [
   "732",
   "0.0965"
  ],
  [
   "745",
   "0.0965"
  ],
  [
   "748",
   "0.0482"
  ],
  [
   "752",
   "0.0482"
  ],
  [
   "755",
   "0.0482"
  ],
  [
   "756",
   "0.0482"
  ],
  [
   "759",
   "0.0482"
  ],
  [
   "768",
   "0.0482"
  ],
  [
   "778",
   "0.0965"
  ],
  [
   "788",
   "0.0482"
  ],
  [
   "798",
   "0.0482"
  ],
  [
   "799",
   "0.0482"
  ],
  [
   "812",
   "0.0482"
  ],
  [
   "818",
   "0.0482"
  ],
  [
   "822",
   "0.0482"
  ],
  [
   "858",
   "0.0482"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 74,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "39 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 74,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 28,
  "name": "Your",
  "id": 113651309
 }
}