{
 "id": 350,
 "ids": "350",
 "state": "None",
 "name": "Intersection of Two Arrays II",
 "key": "intersection-of-two-arrays-ii",
 "link": "https://leetcode.com/problems/intersection-of-two-arrays-ii",
 "locked": false,
 "percent": 44.56686905523979,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "68.9K",
 "totalSubmit": "154.7K",
 "desc": "\r\nGiven two arrays, write a function to compute their intersection.\r\n\r\n\r\nExample:\r\nGiven nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].\r\n\r\n\r\nNote:\r\n\r\nEach element in the result should appear as many times as it shows in both arrays.\r\nThe result can be in any order.\r\n\r\n\r\n\r\nFollow up:\r\n\r\nWhat if the given array is already sorted? How would you optimize your algorithm?\r\nWhat if nums1's size is small compared to nums2's size? Which algorithm is better?\r\nWhat if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int[] intersect(int[] nums1, int[] nums2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def intersect(self, nums1, nums2):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int[] Intersect(int[] nums1, int[] nums2) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @return {number[]}\r\n */\r\nvar intersect = function(nums1, nums2) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @return {Integer[]}\r\ndef intersect(nums1, nums2)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func intersect(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func intersect(nums1 []int, nums2 []int) []int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def intersect(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]\\n[]'",
 "testable": true,
 "slug": "intersection-of-two-arrays-ii",
 "category": "algorithms",
 "fname": "350.intersection-of-two-arrays-ii.algorithms.py",
 "test_your": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "39 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502032049.75_784204_41"
 },
 "test_expected": {
  "code_answer": [
   "[]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502032049.78_784204_41"
 },
 "submit_chart": [
  [
   "35",
   "0.3168"
  ],
  [
   "36",
   "0.3168"
  ],
  [
   "38",
   "1.5839"
  ],
  [
   "39",
   "5.7022"
  ],
  [
   "42",
   "11.9324"
  ],
  [
   "43",
   "1.2672"
  ],
  [
   "45",
   "7.8141"
  ],
  [
   "46",
   "5.5966"
  ],
  [
   "48",
   "3.0623"
  ],
  [
   "49",
   "8.2365"
  ],
  [
   "52",
   "9.2925"
  ],
  [
   "53",
   "0.3168"
  ],
  [
   "55",
   "4.6463"
  ],
  [
   "56",
   "2.0063"
  ],
  [
   "58",
   "1.0560"
  ],
  [
   "59",
   "2.2175"
  ],
  [
   "62",
   "3.4847"
  ],
  [
   "65",
   "2.1119"
  ],
  [
   "66",
   "1.2672"
  ],
  [
   "68",
   "0.5280"
  ],
  [
   "69",
   "1.3728"
  ],
  [
   "72",
   "2.4287"
  ],
  [
   "73",
   "0.1056"
  ],
  [
   "75",
   "1.7951"
  ],
  [
   "76",
   "0.9504"
  ],
  [
   "78",
   "0.9504"
  ],
  [
   "79",
   "2.2175"
  ],
  [
   "82",
   "1.7951"
  ],
  [
   "83",
   "0.2112"
  ],
  [
   "85",
   "1.5839"
  ],
  [
   "86",
   "1.0560"
  ],
  [
   "88",
   "0.1056"
  ],
  [
   "89",
   "1.1616"
  ],
  [
   "92",
   "1.2672"
  ],
  [
   "95",
   "0.9504"
  ],
  [
   "96",
   "0.3168"
  ],
  [
   "98",
   "0.2112"
  ],
  [
   "99",
   "0.7392"
  ],
  [
   "102",
   "1.0560"
  ],
  [
   "103",
   "0.1056"
  ],
  [
   "105",
   "0.3168"
  ],
  [
   "106",
   "0.3168"
  ],
  [
   "108",
   "0.2112"
  ],
  [
   "109",
   "0.1056"
  ],
  [
   "112",
   "0.4224"
  ],
  [
   "113",
   "0.1056"
  ],
  [
   "115",
   "0.1056"
  ],
  [
   "119",
   "0.1056"
  ],
  [
   "122",
   "0.3168"
  ],
  [
   "125",
   "0.3168"
  ],
  [
   "126",
   "0.2112"
  ],
  [
   "129",
   "0.2112"
  ],
  [
   "132",
   "0.2112"
  ],
  [
   "133",
   "0.1056"
  ],
  [
   "138",
   "0.1056"
  ],
  [
   "142",
   "0.3168"
  ],
  [
   "146",
   "0.1056"
  ],
  [
   "149",
   "0.1056"
  ],
  [
   "152",
   "0.1056"
  ],
  [
   "165",
   "0.2112"
  ],
  [
   "166",
   "0.1056"
  ],
  [
   "169",
   "0.2112"
  ],
  [
   "175",
   "0.1056"
  ],
  [
   "185",
   "0.1056"
  ],
  [
   "188",
   "0.1056"
  ],
  [
   "192",
   "0.2112"
  ],
  [
   "198",
   "0.1056"
  ],
  [
   "199",
   "0.1056"
  ],
  [
   "202",
   "0.1056"
  ],
  [
   "219",
   "0.1056"
  ],
  [
   "242",
   "0.1056"
  ],
  [
   "253",
   "0.1056"
  ],
  [
   "322",
   "0.2112"
  ],
  [
   "339",
   "0.1056"
  ],
  [
   "369",
   "0.1056"
  ],
  [
   "385",
   "0.1056"
  ],
  [
   "406",
   "0.1056"
  ],
  [
   "409",
   "0.2112"
  ],
  [
   "419",
   "0.1056"
  ],
  [
   "438",
   "0.1056"
  ],
  [
   "449",
   "0.1056"
  ],
  [
   "588",
   "0.1056"
  ],
  [
   "619",
   "0.1056"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 61,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "76 ms",
  "compare_result": "1111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 61,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 350,
  "name": "Your",
  "id": 112731454
 }
}