{
 "id": 209,
 "ids": "209",
 "state": "None",
 "name": "Minimum Size Subarray Sum",
 "key": "minimum-size-subarray-sum",
 "link": "https://leetcode.com/problems/minimum-size-subarray-sum",
 "locked": false,
 "percent": 30.316045322428256,
 "level": "Medium",
 "starred": false,
 "loaded": true,
 "totalAC": "",
 "totalSubmit": "",
 "desc": "\r\nGiven an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ? s. If there isn't one, return 0 instead.\r\n\r\n\r\nFor example, given the array [2,3,1,2,4,3] and s = 7,\r\nthe subarray [4,3] has the minimal length under the problem constraint.\r\n\r\n\r\nclick to show more practice.\r\n\r\nMore practice:\r\n\r\nIf you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).\r\n\r\n\r\nCredits:Special thanks to @Freezen for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int minSubArrayLen(int s, vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int minSubArrayLen(int s, int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def minSubArrayLen(self, s, nums):\r\n        \"\"\"\r\n        :type s: int\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int minSubArrayLen(int s, int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int MinSubArrayLen(int s, int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number} s\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar minSubArrayLen = function(s, nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} s\r\n# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef min_sub_array_len(s, nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func minSubArrayLen(_ s: Int, _ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func minSubArrayLen(s int, nums []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def minSubArrayLen(s: Int, nums: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'7\\n[2,3,1,2,4,3]'",
 "testable": true
}