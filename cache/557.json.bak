{
 "id": 557,
 "ids": "557",
 "state": "None",
 "name": "Reverse Words in a String III",
 "key": "reverse-words-in-a-string-iii",
 "link": "https://leetcode.com/problems/reverse-words-in-a-string-iii",
 "locked": false,
 "percent": 59.827976648037726,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "28.8K",
 "totalSubmit": "48.1K",
 "desc": "Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\r\n\r\nExample 1:\r\n\r\nInput: \"Let's take LeetCode contest\"\r\nOutput: \"s'teL ekat edoCteeL tsetnoc\"\r\n\r\n\r\n\r\nNote:\r\nIn the string, each word is separated by single space and there will not be any extra space in the string.\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\npublic:\n    string reverseWords(string s) {\n        \n    }\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\n    public String reverseWords(String s) {\n        \n    }\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "char* reverseWords(char* s) {\n    \n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\n    public string ReverseWords(string s) {\n        \n    }\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    \n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\n# @return {String}\ndef reverse_words(s)\n    \nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func reverseWords(_ s: String) -> String {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func reverseWords(s string) string {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def reverseWords(s: String): String = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"Let's take LeetCode contest\"'",
 "testable": true,
 "slug": "reverse-words-in-a-string-iii",
 "category": "algorithms",
 "fname": "557.reverse-words-in-a-string-iii.algorithms.py",
 "submit_chart": [
  [
   "35",
   "0.3090"
  ],
  [
   "36",
   "0.5149"
  ],
  [
   "38",
   "1.3388"
  ],
  [
   "39",
   "4.6859"
  ],
  [
   "42",
   "10.7621"
  ],
  [
   "43",
   "0.3090"
  ],
  [
   "45",
   "6.7456"
  ],
  [
   "46",
   "3.6560"
  ],
  [
   "48",
   "1.8023"
  ],
  [
   "49",
   "5.3553"
  ],
  [
   "52",
   "7.2606"
  ],
  [
   "53",
   "0.1545"
  ],
  [
   "55",
   "2.5232"
  ],
  [
   "56",
   "1.6993"
  ],
  [
   "58",
   "1.1843"
  ],
  [
   "59",
   "2.3172"
  ],
  [
   "62",
   "2.2142"
  ],
  [
   "65",
   "1.5448"
  ],
  [
   "66",
   "0.7724"
  ],
  [
   "68",
   "0.6694"
  ],
  [
   "69",
   "1.1843"
  ],
  [
   "72",
   "1.4933"
  ],
  [
   "73",
   "0.0515"
  ],
  [
   "75",
   "0.8239"
  ],
  [
   "76",
   "0.4119"
  ],
  [
   "78",
   "0.2060"
  ],
  [
   "79",
   "0.8239"
  ],
  [
   "82",
   "1.2873"
  ],
  [
   "83",
   "0.0515"
  ],
  [
   "85",
   "0.7724"
  ],
  [
   "86",
   "0.6694"
  ],
  [
   "88",
   "0.3090"
  ],
  [
   "89",
   "0.9269"
  ],
  [
   "92",
   "1.2358"
  ],
  [
   "93",
   "0.0515"
  ],
  [
   "95",
   "0.9269"
  ],
  [
   "96",
   "0.3090"
  ],
  [
   "98",
   "0.3605"
  ],
  [
   "99",
   "0.5149"
  ],
  [
   "102",
   "1.1843"
  ],
  [
   "105",
   "0.5664"
  ],
  [
   "106",
   "0.2575"
  ],
  [
   "108",
   "0.0515"
  ],
  [
   "109",
   "0.4119"
  ],
  [
   "112",
   "0.3605"
  ],
  [
   "113",
   "0.0515"
  ],
  [
   "115",
   "0.2575"
  ],
  [
   "116",
   "0.3090"
  ],
  [
   "118",
   "0.4634"
  ],
  [
   "119",
   "0.6179"
  ],
  [
   "122",
   "1.0299"
  ],
  [
   "125",
   "0.6179"
  ],
  [
   "126",
   "0.4119"
  ],
  [
   "128",
   "0.5149"
  ],
  [
   "129",
   "0.7209"
  ],
  [
   "132",
   "1.1843"
  ],
  [
   "135",
   "0.5149"
  ],
  [
   "136",
   "0.3090"
  ],
  [
   "138",
   "0.2060"
  ],
  [
   "139",
   "0.6179"
  ],
  [
   "142",
   "1.1843"
  ],
  [
   "145",
   "0.4634"
  ],
  [
   "146",
   "0.4119"
  ],
  [
   "148",
   "0.3605"
  ],
  [
   "149",
   "0.5149"
  ],
  [
   "152",
   "0.7724"
  ],
  [
   "153",
   "0.0515"
  ],
  [
   "155",
   "0.7209"
  ],
  [
   "156",
   "0.3605"
  ],
  [
   "158",
   "0.3090"
  ],
  [
   "159",
   "0.3605"
  ],
  [
   "162",
   "0.7724"
  ],
  [
   "165",
   "0.0515"
  ],
  [
   "166",
   "0.3090"
  ],
  [
   "168",
   "0.1545"
  ],
  [
   "169",
   "0.2060"
  ],
  [
   "172",
   "0.3605"
  ],
  [
   "175",
   "0.4634"
  ],
  [
   "176",
   "0.1545"
  ],
  [
   "178",
   "0.1030"
  ],
  [
   "179",
   "0.5149"
  ],
  [
   "182",
   "0.6179"
  ],
  [
   "185",
   "0.5664"
  ],
  [
   "186",
   "0.2060"
  ],
  [
   "188",
   "0.2060"
  ],
  [
   "189",
   "0.2575"
  ],
  [
   "192",
   "0.4634"
  ],
  [
   "195",
   "0.2575"
  ],
  [
   "196",
   "0.3605"
  ],
  [
   "198",
   "0.5149"
  ],
  [
   "199",
   "0.2575"
  ],
  [
   "202",
   "0.5664"
  ],
  [
   "205",
   "0.2575"
  ],
  [
   "208",
   "0.1545"
  ],
  [
   "209",
   "0.2060"
  ],
  [
   "212",
   "0.3090"
  ],
  [
   "215",
   "0.1545"
  ],
  [
   "216",
   "0.1030"
  ],
  [
   "218",
   "0.1030"
  ],
  [
   "219",
   "0.2060"
  ],
  [
   "222",
   "0.2060"
  ],
  [
   "225",
   "0.1030"
  ],
  [
   "226",
   "0.1545"
  ],
  [
   "229",
   "0.2060"
  ],
  [
   "232",
   "0.2060"
  ],
  [
   "235",
   "0.1545"
  ],
  [
   "236",
   "0.0515"
  ],
  [
   "238",
   "0.1545"
  ],
  [
   "239",
   "0.1545"
  ],
  [
   "242",
   "0.1545"
  ],
  [
   "245",
   "0.2060"
  ],
  [
   "246",
   "0.1545"
  ],
  [
   "248",
   "0.1030"
  ],
  [
   "249",
   "0.1545"
  ],
  [
   "252",
   "0.3605"
  ],
  [
   "255",
   "0.2060"
  ],
  [
   "258",
   "0.0515"
  ],
  [
   "259",
   "0.1030"
  ],
  [
   "262",
   "0.1545"
  ],
  [
   "269",
   "0.0515"
  ],
  [
   "272",
   "0.1545"
  ],
  [
   "278",
   "0.0515"
  ],
  [
   "282",
   "0.2060"
  ],
  [
   "285",
   "0.0515"
  ],
  [
   "286",
   "0.0515"
  ],
  [
   "288",
   "0.1030"
  ],
  [
   "289",
   "0.1030"
  ],
  [
   "292",
   "0.0515"
  ],
  [
   "295",
   "0.1030"
  ],
  [
   "296",
   "0.0515"
  ],
  [
   "299",
   "0.0515"
  ],
  [
   "302",
   "0.2575"
  ],
  [
   "305",
   "0.1030"
  ],
  [
   "306",
   "0.0515"
  ],
  [
   "308",
   "0.0515"
  ],
  [
   "312",
   "0.1545"
  ],
  [
   "319",
   "0.0515"
  ],
  [
   "322",
   "0.0515"
  ],
  [
   "328",
   "0.0515"
  ],
  [
   "329",
   "0.1545"
  ],
  [
   "339",
   "0.1030"
  ],
  [
   "342",
   "0.0515"
  ],
  [
   "345",
   "0.0515"
  ],
  [
   "346",
   "0.0515"
  ],
  [
   "352",
   "0.1545"
  ],
  [
   "359",
   "0.0515"
  ],
  [
   "362",
   "0.0515"
  ],
  [
   "366",
   "0.0515"
  ],
  [
   "376",
   "0.0515"
  ],
  [
   "389",
   "0.0515"
  ],
  [
   "422",
   "0.0515"
  ],
  [
   "432",
   "0.0515"
  ],
  [
   "435",
   "0.0515"
  ],
  [
   "458",
   "0.0515"
  ],
  [
   "495",
   "0.0515"
  ],
  [
   "522",
   "0.0515"
  ],
  [
   "562",
   "0.0515"
  ],
  [
   "595",
   "0.0515"
  ],
  [
   "889",
   "0.0515"
  ],
  [
   "1442",
   "0.0515"
  ],
  [
   "1769",
   "0.0515"
  ],
  [
   "1775",
   "0.0515"
  ],
  [
   "1779",
   "0.0515"
  ],
  [
   "1842",
   "0.1030"
  ],
  [
   "1846",
   "0.0515"
  ],
  [
   "1852",
   "0.0515"
  ],
  [
   "1855",
   "0.0515"
  ],
  [
   "1856",
   "0.0515"
  ],
  [
   "1886",
   "0.0515"
  ],
  [
   "1889",
   "0.0515"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 30,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "48 ms",
  "compare_result": "111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 30,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 557,
  "name": "Your",
  "id": 112042144
 }
}