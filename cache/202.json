{
 "id": 202,
 "ids": "202",
 "state": "None",
 "name": "Happy Number",
 "key": "happy-number",
 "link": "https://leetcode.com/problems/happy-number",
 "locked": false,
 "percent": 40.47601384368761,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "125.5K",
 "totalSubmit": "310.1K",
 "desc": "Write an algorithm to determine if a number is \"happy\".\r\n\r\nA happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.\r\n\r\nExample:\u00a019 is a happy number\r\n\r\n\r\n12 + 92 = 82\r\n82 + 22 = 68\r\n62 + 82 = 100\r\n12 + 02 + 02 = 1\r\n\r\n\r\nCredits:Special thanks to @mithmatt and @ts for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool isHappy(int n) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean isHappy(int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def isHappy(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool isHappy(int n) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool IsHappy(int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number} n\r\n * @return {boolean}\r\n */\r\nvar isHappy = function(n) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer} n\r\n# @return {Boolean}\r\ndef is_happy(n)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func isHappy(_ n: Int) -> Bool {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func isHappy(n int) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def isHappy(n: Int): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'1'",
 "testable": true,
 "slug": "happy-number",
 "category": "algorithms",
 "fname": "202.happy-number.algorithms.py",
 "test_your": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500959088.12_784204_11"
 },
 "test_expected": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500959088.14_784204_11"
 },
 "submit_chart": [
  [
   "32",
   "0.4353"
  ],
  [
   "35",
   "1.0881"
  ],
  [
   "36",
   "1.7410"
  ],
  [
   "38",
   "2.3939"
  ],
  [
   "39",
   "6.2024"
  ],
  [
   "42",
   "8.5963"
  ],
  [
   "43",
   "0.6529"
  ],
  [
   "45",
   "8.4875"
  ],
  [
   "46",
   "5.1143"
  ],
  [
   "48",
   "3.2644"
  ],
  [
   "49",
   "10.5550"
  ],
  [
   "52",
   "9.2492"
  ],
  [
   "53",
   "0.3264"
  ],
  [
   "55",
   "4.2437"
  ],
  [
   "56",
   "3.4820"
  ],
  [
   "58",
   "2.3939"
  ],
  [
   "59",
   "5.9848"
  ],
  [
   "62",
   "4.2437"
  ],
  [
   "65",
   "2.3939"
  ],
  [
   "66",
   "1.9587"
  ],
  [
   "68",
   "0.8705"
  ],
  [
   "69",
   "2.0675"
  ],
  [
   "72",
   "2.9380"
  ],
  [
   "75",
   "0.8705"
  ],
  [
   "76",
   "0.6529"
  ],
  [
   "78",
   "0.4353"
  ],
  [
   "79",
   "0.5441"
  ],
  [
   "82",
   "1.1970"
  ],
  [
   "85",
   "0.4353"
  ],
  [
   "86",
   "0.5441"
  ],
  [
   "88",
   "0.4353"
  ],
  [
   "89",
   "1.0881"
  ],
  [
   "92",
   "0.1088"
  ],
  [
   "95",
   "0.2176"
  ],
  [
   "98",
   "0.1088"
  ],
  [
   "99",
   "0.2176"
  ],
  [
   "102",
   "0.2176"
  ],
  [
   "105",
   "0.1088"
  ],
  [
   "109",
   "0.2176"
  ],
  [
   "112",
   "0.1088"
  ],
  [
   "115",
   "0.1088"
  ],
  [
   "119",
   "0.1088"
  ],
  [
   "122",
   "0.2176"
  ],
  [
   "125",
   "0.3264"
  ],
  [
   "126",
   "0.1088"
  ],
  [
   "129",
   "0.2176"
  ],
  [
   "132",
   "0.1088"
  ],
  [
   "139",
   "0.2176"
  ],
  [
   "142",
   "0.1088"
  ],
  [
   "145",
   "0.1088"
  ],
  [
   "146",
   "0.2176"
  ],
  [
   "149",
   "0.1088"
  ],
  [
   "152",
   "0.1088"
  ],
  [
   "158",
   "0.1088"
  ],
  [
   "162",
   "0.1088"
  ],
  [
   "182",
   "0.1088"
  ],
  [
   "215",
   "0.1088"
  ],
  [
   "222",
   "0.1088"
  ],
  [
   "225",
   "0.1088"
  ],
  [
   "226",
   "0.1088"
  ],
  [
   "235",
   "0.1088"
  ],
  [
   "252",
   "0.1088"
  ],
  [
   "282",
   "0.1088"
  ],
  [
   "292",
   "0.1088"
  ],
  [
   "302",
   "0.1088"
  ],
  [
   "356",
   "0.1088"
  ],
  [
   "365",
   "0.1088"
  ],
  [
   "792",
   "0.1088"
  ],
  [
   "809",
   "0.1088"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 401,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "49 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 401,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 202,
  "name": "Your",
  "id": 111040038
 }
}