{
 "id": 561,
 "ids": "561",
 "state": "None",
 "name": "Array Partition I",
 "key": "array-partition-i",
 "link": "https://leetcode.com/problems/array-partition-i",
 "locked": false,
 "percent": 68.0263830408645,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "28K",
 "totalSubmit": "41.1K",
 "desc": "\r\nGiven an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.\r\n\r\n\r\nExample 1:\r\n\r\nInput: [1,4,3,2]\r\n\r\nOutput: 4\r\nExplanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).\r\n\r\n\r\n\r\nNote:\r\n\r\nn is a positive integer, which is in the range of [1, 10000].\r\nAll the integers in the array will be in the range of [-10000, 10000].\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    int arrayPairSum(vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int arrayPairSum(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def arrayPairSum(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "int arrayPairSum(int* nums, int numsSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int ArrayPairSum(int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar arrayPairSum = function(nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef array_pair_sum(nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func arrayPairSum(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func arrayPairSum(nums []int) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def arrayPairSum(nums: Array[Int]): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,4,3,2]'",
 "testable": true,
 "slug": "array-partition-i",
 "category": "algorithms",
 "fname": "561.array-partition-i.algorithms.py",
 "test_your": {
  "code_answer": [
   "4"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "36 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500783092.6_784204_5"
 },
 "test_expected": {
  "code_answer": [
   "4"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500783092.63_784204_5"
 },
 "submit_chart": [
  [
   "105",
   "0.0786"
  ],
  [
   "106",
   "0.1179"
  ],
  [
   "108",
   "0.2750"
  ],
  [
   "109",
   "0.4322"
  ],
  [
   "112",
   "1.8075"
  ],
  [
   "113",
   "0.0786"
  ],
  [
   "115",
   "1.9646"
  ],
  [
   "116",
   "1.2181"
  ],
  [
   "118",
   "1.2181"
  ],
  [
   "119",
   "2.5147"
  ],
  [
   "122",
   "4.9116"
  ],
  [
   "123",
   "0.1572"
  ],
  [
   "125",
   "3.6149"
  ],
  [
   "126",
   "2.4754"
  ],
  [
   "128",
   "1.3752"
  ],
  [
   "129",
   "5.2652"
  ],
  [
   "132",
   "5.9725"
  ],
  [
   "133",
   "0.1572"
  ],
  [
   "135",
   "4.3222"
  ],
  [
   "136",
   "2.5933"
  ],
  [
   "138",
   "1.6503"
  ],
  [
   "139",
   "3.9293"
  ],
  [
   "142",
   "5.5796"
  ],
  [
   "143",
   "0.1179"
  ],
  [
   "145",
   "3.3006"
  ],
  [
   "146",
   "1.6110"
  ],
  [
   "148",
   "1.1002"
  ],
  [
   "149",
   "3.4578"
  ],
  [
   "152",
   "3.8900"
  ],
  [
   "155",
   "2.5933"
  ],
  [
   "156",
   "1.0609"
  ],
  [
   "158",
   "1.1788"
  ],
  [
   "159",
   "1.8468"
  ],
  [
   "162",
   "3.0648"
  ],
  [
   "163",
   "0.1179"
  ],
  [
   "165",
   "1.0216"
  ],
  [
   "166",
   "0.7073"
  ],
  [
   "168",
   "0.6287"
  ],
  [
   "169",
   "1.7289"
  ],
  [
   "172",
   "1.6503"
  ],
  [
   "175",
   "1.0216"
  ],
  [
   "176",
   "0.7859"
  ],
  [
   "178",
   "0.4715"
  ],
  [
   "179",
   "1.1395"
  ],
  [
   "182",
   "1.5717"
  ],
  [
   "185",
   "1.0609"
  ],
  [
   "186",
   "0.6680"
  ],
  [
   "188",
   "0.2750"
  ],
  [
   "189",
   "0.9037"
  ],
  [
   "192",
   "0.6287"
  ],
  [
   "193",
   "0.0786"
  ],
  [
   "195",
   "0.6287"
  ],
  [
   "196",
   "0.2358"
  ],
  [
   "198",
   "0.1965"
  ],
  [
   "199",
   "0.7073"
  ],
  [
   "202",
   "0.5894"
  ],
  [
   "205",
   "0.4715"
  ],
  [
   "206",
   "0.2358"
  ],
  [
   "208",
   "0.1179"
  ],
  [
   "209",
   "0.3536"
  ],
  [
   "212",
   "0.4322"
  ],
  [
   "215",
   "0.1965"
  ],
  [
   "216",
   "0.1965"
  ],
  [
   "219",
   "0.2750"
  ],
  [
   "222",
   "0.2750"
  ],
  [
   "225",
   "0.1965"
  ],
  [
   "229",
   "0.1572"
  ],
  [
   "232",
   "0.1965"
  ],
  [
   "235",
   "0.1179"
  ],
  [
   "236",
   "0.0786"
  ],
  [
   "238",
   "0.0393"
  ],
  [
   "239",
   "0.1179"
  ],
  [
   "242",
   "0.0786"
  ],
  [
   "245",
   "0.1179"
  ],
  [
   "248",
   "0.0393"
  ],
  [
   "249",
   "0.1965"
  ],
  [
   "252",
   "0.0786"
  ],
  [
   "255",
   "0.1572"
  ],
  [
   "256",
   "0.0786"
  ],
  [
   "262",
   "0.1572"
  ],
  [
   "265",
   "0.0786"
  ],
  [
   "268",
   "0.0393"
  ],
  [
   "272",
   "0.0786"
  ],
  [
   "275",
   "0.0786"
  ],
  [
   "278",
   "0.0393"
  ],
  [
   "279",
   "0.0393"
  ],
  [
   "285",
   "0.0786"
  ],
  [
   "288",
   "0.0393"
  ],
  [
   "289",
   "0.0393"
  ],
  [
   "295",
   "0.0393"
  ],
  [
   "298",
   "0.0786"
  ],
  [
   "299",
   "0.0393"
  ],
  [
   "302",
   "0.0393"
  ],
  [
   "305",
   "0.0786"
  ],
  [
   "309",
   "0.0393"
  ],
  [
   "322",
   "0.0786"
  ],
  [
   "329",
   "0.0393"
  ],
  [
   "338",
   "0.0393"
  ],
  [
   "339",
   "0.0393"
  ],
  [
   "345",
   "0.0393"
  ],
  [
   "346",
   "0.0393"
  ],
  [
   "352",
   "0.0393"
  ],
  [
   "355",
   "0.0393"
  ],
  [
   "356",
   "0.0393"
  ],
  [
   "359",
   "0.0393"
  ],
  [
   "362",
   "0.0393"
  ],
  [
   "365",
   "0.0393"
  ],
  [
   "372",
   "0.0393"
  ],
  [
   "388",
   "0.0393"
  ],
  [
   "395",
   "0.0393"
  ],
  [
   "408",
   "0.0786"
  ],
  [
   "419",
   "0.0393"
  ],
  [
   "422",
   "0.0393"
  ],
  [
   "432",
   "0.1179"
  ],
  [
   "445",
   "0.0393"
  ],
  [
   "446",
   "0.0786"
  ],
  [
   "449",
   "0.0393"
  ],
  [
   "452",
   "0.0393"
  ],
  [
   "455",
   "0.0393"
  ],
  [
   "462",
   "0.0393"
  ],
  [
   "465",
   "0.0393"
  ],
  [
   "492",
   "0.0393"
  ],
  [
   "496",
   "0.0393"
  ],
  [
   "499",
   "0.0393"
  ],
  [
   "516",
   "0.0393"
  ],
  [
   "518",
   "0.0393"
  ],
  [
   "522",
   "0.0786"
  ],
  [
   "532",
   "0.0393"
  ],
  [
   "542",
   "0.0393"
  ],
  [
   "572",
   "0.0393"
  ],
  [
   "579",
   "0.0393"
  ],
  [
   "582",
   "0.0393"
  ],
  [
   "585",
   "0.0393"
  ],
  [
   "592",
   "0.0393"
  ],
  [
   "618",
   "0.0393"
  ],
  [
   "638",
   "0.0393"
  ],
  [
   "649",
   "0.0393"
  ],
  [
   "662",
   "0.0393"
  ],
  [
   "666",
   "0.0393"
  ],
  [
   "675",
   "0.0786"
  ],
  [
   "689",
   "0.0393"
  ],
  [
   "692",
   "0.0786"
  ],
  [
   "699",
   "0.0393"
  ],
  [
   "732",
   "0.0393"
  ],
  [
   "742",
   "0.0393"
  ],
  [
   "745",
   "0.0393"
  ],
  [
   "762",
   "0.0393"
  ],
  [
   "798",
   "0.0393"
  ],
  [
   "806",
   "0.0393"
  ],
  [
   "849",
   "0.0393"
  ],
  [
   "929",
   "0.0393"
  ],
  [
   "983",
   "0.0393"
  ],
  [
   "1062",
   "0.0786"
  ],
  [
   "1099",
   "0.0393"
  ],
  [
   "1129",
   "0.0393"
  ],
  [
   "1162",
   "0.0393"
  ],
  [
   "1185",
   "0.0393"
  ],
  [
   "1195",
   "0.0393"
  ],
  [
   "1312",
   "0.0393"
  ],
  [
   "1385",
   "0.0393"
  ],
  [
   "1485",
   "0.0393"
  ],
  [
   "1512",
   "0.0393"
  ],
  [
   "1679",
   "0.0393"
  ],
  [
   "1685",
   "0.0393"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 81,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "115 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 81,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 561,
  "name": "Your",
  "id": 110755954
 }
}