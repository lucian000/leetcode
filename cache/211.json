{"id": 211, "ids": "211", "state": "None", "name": "Add and Search Word - Data structure design", "key": "add-and-search-word-data-structure-design", "link": "https://leetcode.com/problems/add-and-search-word-data-structure-design", "locked": false, "percent": 22.371906766608483, "level": "Medium", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "\r\nDesign a data structure that supports the following two operations:\r\n\r\n\r\nvoid addWord(word)\r\nbool search(word)\r\n\r\n\r\n\r\nsearch(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.\r\n\r\n\r\nFor example:\r\n\r\naddWord(\"bad\")\r\naddWord(\"dad\")\r\naddWord(\"mad\")\r\nsearch(\"pad\") -> false\r\nsearch(\"bad\") -> true\r\nsearch(\".ad\") -> true\r\nsearch(\"b..\") -> true\r\n\r\n\r\n\r\nNote:\r\nYou may assume that all words are consist of lowercase letters a-z.\r\n\r\n\r\nclick to show hint.\r\n\r\nYou should be familiar with how a Trie works. If not, please work on this problem: Implement Trie (Prefix Tree) first.\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class WordDictionary {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    WordDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Adds a word into the data structure. */\r\n    void addWord(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\n    bool search(string word) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * WordDictionary obj = new WordDictionary();\r\n * obj.addWord(word);\r\n * bool param_2 = obj.search(word);\r\n */"}, {"value": "java", "text": "Java", "defaultCode": "public class WordDictionary {\r\n\r\n    /** Initialize your data structure here. */\r\n    public WordDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Adds a word into the data structure. */\r\n    public void addWord(String word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\n    public boolean search(String word) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * WordDictionary obj = new WordDictionary();\r\n * obj.addWord(word);\r\n * boolean param_2 = obj.search(word);\r\n */"}, {"value": "python", "text": "Python", "defaultCode": "class WordDictionary(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def addWord(self, word):\r\n        \"\"\"\r\n        Adds a word into the data structure.\r\n        :type word: str\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def search(self, word):\r\n        \"\"\"\r\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your WordDictionary object will be instantiated and called as such:\r\n# obj = WordDictionary()\r\n# obj.addWord(word)\r\n# param_2 = obj.search(word)"}, {"value": "c", "text": "C", "defaultCode": "typedef struct {\n    \n} WordDictionary;\n\n/** Initialize your data structure here. */\nWordDictionary* wordDictionaryCreate() {\n    \n}\n\n/** Adds a word into the data structure. */\nvoid wordDictionaryAddWord(WordDictionary* obj, char* word) {\n    \n}\n\n/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\nbool wordDictionarySearch(WordDictionary* obj, char* word) {\n    \n}\n\nvoid wordDictionaryFree(WordDictionary* obj) {\n    \n}\n\n/**\n * Your WordDictionary struct will be instantiated and called as such:\n * struct WordDictionary* obj = wordDictionaryCreate();\n * wordDictionaryAddWord(obj, word);\n * bool param_2 = wordDictionarySearch(obj, word);\n * wordDictionaryFree(obj);\n */"}, {"value": "csharp", "text": "C#", "defaultCode": "public class WordDictionary {\r\n\r\n    /** Initialize your data structure here. */\r\n    public WordDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Adds a word into the data structure. */\r\n    public void AddWord(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\n    public bool Search(string word) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * WordDictionary obj = new WordDictionary();\r\n * obj.AddWord(word);\r\n * bool param_2 = obj.Search(word);\r\n */"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * Initialize your data structure here.\r\n */\r\nvar WordDictionary = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Adds a word into the data structure. \r\n * @param {string} word\r\n * @return {void}\r\n */\r\nWordDictionary.prototype.addWord = function(word) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. \r\n * @param {string} word\r\n * @return {boolean}\r\n */\r\nWordDictionary.prototype.search = function(word) {\r\n    \r\n};\r\n\r\n/** \r\n * Your WordDictionary object will be instantiated and called as such:\r\n * var obj = Object.create(WordDictionary).createNew()\r\n * obj.addWord(word)\r\n * var param_2 = obj.search(word)\r\n */"}, {"value": "ruby", "text": "Ruby", "defaultCode": "class WordDictionary\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Adds a word into the data structure.\r\n    :type word: String\r\n    :rtype: Void\r\n=end\r\n    def add_word(word)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\r\n    :type word: String\r\n    :rtype: Boolean\r\n=end\r\n    def search(word)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your WordDictionary object will be instantiated and called as such:\r\n# obj = WordDictionary.new()\r\n# obj.add_word(word)\r\n# param_2 = obj.search(word)"}, {"value": "golang", "text": "Go", "defaultCode": "type WordDictionary struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() WordDictionary {\r\n    \r\n}\r\n\r\n\r\n/** Adds a word into the data structure. */\r\nfunc (this *WordDictionary) AddWord(word string)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\nfunc (this *WordDictionary) Search(word string) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.AddWord(word);\r\n * param_2 := obj.Search(word);\r\n */"}, {"value": "scala", "text": "Scala", "defaultCode": "\n    /** Initialize your data structure here. */class WordDictionary() {\n    \n    /** Adds a word into the data structure. */\n    def addWord(String word) {\n\n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    def search(String word) : Boolean = {\n\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * var obj = new WordDictionary();\n * obj.addWord(word);\n * Boolean param_2 = obj.search(word);\n */"}], "testcase": "[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]", "testable": true}