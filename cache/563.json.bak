{
 "id": 563,
 "ids": "563",
 "state": "None",
 "name": "Binary Tree Tilt",
 "key": "binary-tree-tilt",
 "link": "https://leetcode.com/problems/binary-tree-tilt",
 "locked": false,
 "percent": 46.90320458946907,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "12.8K",
 "totalSubmit": "27.4K",
 "desc": "Given a binary tree, return the tilt of the whole tree.\r\n\r\nThe tilt of a tree node is defined as the absolute difference between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.\r\n\r\nThe tilt of the whole tree is defined as the sum of all nodes' tilt.\r\n\r\nExample:\r\n\r\nInput: \r\n         1\r\n       /   \\\r\n      2     3\r\nOutput: 1\r\nExplanation: \r\nTilt of node 2 : 0\r\nTilt of node 3 : 0\r\nTilt of node 1 : |2-3| = 1\r\nTilt of binary tree : 0 + 0 + 1 = 1\r\n\r\n\r\n\r\nNote:\r\n\r\nThe sum of node values in any subtree won't exceed the range of 32-bit integer. \r\nAll the tilt values won't exceed the range of 32-bit integer.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int findTilt(TreeNode* root) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int findTilt(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def findTilt(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: int\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint findTilt(struct TreeNode* root) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int FindTilt(TreeNode root) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number}\r\n */\r\nvar findTilt = function(root) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Integer}\r\ndef find_tilt(root)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func findTilt(_ root: TreeNode?) -> Int {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc findTilt(root *TreeNode) int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def findTilt(root: TreeNode): Int = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,2,3]'",
 "testable": true,
 "slug": "binary-tree-tilt",
 "category": "algorithms",
 "fname": "563.binary-tree-tilt.algorithms.py",
 "test_your": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "55 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501759262.32_784204_23"
 },
 "test_expected": {
  "code_answer": [
   "1"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501759262.34_784204_23"
 },
 "submit_chart": [
  [
   "72",
   "0.1456"
  ],
  [
   "75",
   "1.0189"
  ],
  [
   "76",
   "1.6012"
  ],
  [
   "78",
   "2.3290"
  ],
  [
   "79",
   "4.3668"
  ],
  [
   "82",
   "9.8981"
  ],
  [
   "83",
   "0.2911"
  ],
  [
   "85",
   "4.5124"
  ],
  [
   "86",
   "3.0568"
  ],
  [
   "88",
   "2.7656"
  ],
  [
   "89",
   "5.5313"
  ],
  [
   "92",
   "7.8603"
  ],
  [
   "93",
   "0.1456"
  ],
  [
   "95",
   "3.9301"
  ],
  [
   "96",
   "2.4745"
  ],
  [
   "98",
   "2.0378"
  ],
  [
   "99",
   "3.0568"
  ],
  [
   "102",
   "4.8035"
  ],
  [
   "103",
   "0.1456"
  ],
  [
   "105",
   "2.3290"
  ],
  [
   "106",
   "1.4556"
  ],
  [
   "108",
   "0.8734"
  ],
  [
   "109",
   "1.4556"
  ],
  [
   "112",
   "2.0378"
  ],
  [
   "115",
   "1.4556"
  ],
  [
   "116",
   "0.2911"
  ],
  [
   "118",
   "0.4367"
  ],
  [
   "119",
   "1.3100"
  ],
  [
   "122",
   "0.8734"
  ],
  [
   "125",
   "0.5822"
  ],
  [
   "126",
   "0.5822"
  ],
  [
   "128",
   "0.1456"
  ],
  [
   "129",
   "0.7278"
  ],
  [
   "132",
   "0.5822"
  ],
  [
   "135",
   "0.1456"
  ],
  [
   "136",
   "0.2911"
  ],
  [
   "138",
   "0.1456"
  ],
  [
   "139",
   "0.4367"
  ],
  [
   "142",
   "0.8734"
  ],
  [
   "145",
   "0.7278"
  ],
  [
   "146",
   "0.4367"
  ],
  [
   "148",
   "0.1456"
  ],
  [
   "149",
   "0.4367"
  ],
  [
   "152",
   "0.5822"
  ],
  [
   "155",
   "0.1456"
  ],
  [
   "156",
   "0.1456"
  ],
  [
   "158",
   "0.4367"
  ],
  [
   "159",
   "0.1456"
  ],
  [
   "162",
   "0.1456"
  ],
  [
   "165",
   "0.1456"
  ],
  [
   "168",
   "0.2911"
  ],
  [
   "169",
   "0.1456"
  ],
  [
   "178",
   "0.2911"
  ],
  [
   "182",
   "0.1456"
  ],
  [
   "185",
   "0.2911"
  ],
  [
   "195",
   "0.1456"
  ],
  [
   "252",
   "0.1456"
  ],
  [
   "262",
   "0.1456"
  ],
  [
   "345",
   "0.1456"
  ],
  [
   "449",
   "0.1456"
  ],
  [
   "802",
   "0.1456"
  ],
  [
   "825",
   "0.1456"
  ],
  [
   "859",
   "0.1456"
  ],
  [
   "879",
   "0.1456"
  ],
  [
   "898",
   "0.1456"
  ],
  [
   "899",
   "0.2911"
  ],
  [
   "905",
   "0.1456"
  ],
  [
   "912",
   "0.1456"
  ],
  [
   "919",
   "0.1456"
  ],
  [
   "925",
   "0.1456"
  ],
  [
   "932",
   "0.1456"
  ],
  [
   "935",
   "0.1456"
  ],
  [
   "952",
   "0.1456"
  ],
  [
   "965",
   "0.1456"
  ],
  [
   "969",
   "0.1456"
  ],
  [
   "972",
   "0.1456"
  ],
  [
   "975",
   "0.4367"
  ],
  [
   "979",
   "0.1456"
  ],
  [
   "986",
   "0.2911"
  ],
  [
   "989",
   "0.1456"
  ],
  [
   "992",
   "0.1456"
  ],
  [
   "999",
   "0.1456"
  ],
  [
   "1005",
   "0.1456"
  ],
  [
   "1008",
   "0.1456"
  ],
  [
   "1009",
   "0.1456"
  ],
  [
   "1012",
   "0.1456"
  ],
  [
   "1015",
   "0.1456"
  ],
  [
   "1016",
   "0.1456"
  ],
  [
   "1018",
   "0.2911"
  ],
  [
   "1022",
   "0.1456"
  ],
  [
   "1025",
   "0.1456"
  ],
  [
   "1032",
   "0.2911"
  ],
  [
   "1035",
   "0.4367"
  ],
  [
   "1038",
   "0.2911"
  ],
  [
   "1039",
   "0.1456"
  ],
  [
   "1045",
   "0.1456"
  ],
  [
   "1048",
   "0.2911"
  ],
  [
   "1052",
   "0.1456"
  ],
  [
   "1058",
   "0.1456"
  ],
  [
   "1062",
   "0.1456"
  ],
  [
   "1065",
   "0.1456"
  ],
  [
   "1068",
   "0.2911"
  ],
  [
   "1072",
   "0.2911"
  ],
  [
   "1078",
   "0.1456"
  ],
  [
   "1079",
   "0.1456"
  ],
  [
   "1082",
   "0.1456"
  ],
  [
   "1088",
   "0.1456"
  ],
  [
   "1089",
   "0.1456"
  ],
  [
   "1092",
   "0.2911"
  ],
  [
   "1096",
   "0.1456"
  ],
  [
   "1102",
   "0.2911"
  ],
  [
   "1112",
   "0.1456"
  ],
  [
   "1115",
   "0.1456"
  ],
  [
   "1116",
   "0.1456"
  ],
  [
   "1119",
   "0.1456"
  ],
  [
   "1122",
   "0.4367"
  ],
  [
   "1125",
   "0.1456"
  ],
  [
   "1126",
   "0.1456"
  ],
  [
   "1128",
   "0.1456"
  ],
  [
   "1129",
   "0.1456"
  ],
  [
   "1139",
   "0.1456"
  ],
  [
   "1145",
   "0.1456"
  ],
  [
   "1149",
   "0.1456"
  ],
  [
   "1152",
   "0.1456"
  ],
  [
   "1158",
   "0.1456"
  ],
  [
   "1159",
   "0.1456"
  ],
  [
   "1162",
   "0.2911"
  ],
  [
   "1168",
   "0.1456"
  ],
  [
   "1172",
   "0.1456"
  ],
  [
   "1175",
   "0.1456"
  ],
  [
   "1179",
   "0.5822"
  ],
  [
   "1182",
   "0.1456"
  ],
  [
   "1196",
   "0.1456"
  ],
  [
   "1198",
   "0.1456"
  ],
  [
   "1199",
   "0.1456"
  ],
  [
   "1205",
   "0.2911"
  ],
  [
   "1215",
   "0.1456"
  ],
  [
   "1218",
   "0.1456"
  ],
  [
   "1219",
   "0.1456"
  ],
  [
   "1222",
   "0.1456"
  ],
  [
   "1239",
   "0.1456"
  ],
  [
   "1242",
   "0.1456"
  ],
  [
   "1245",
   "0.1456"
  ],
  [
   "1249",
   "0.1456"
  ],
  [
   "1276",
   "0.1456"
  ],
  [
   "1282",
   "0.1456"
  ],
  [
   "1312",
   "0.1456"
  ],
  [
   "1316",
   "0.1456"
  ],
  [
   "1338",
   "0.1456"
  ],
  [
   "1355",
   "0.1456"
  ],
  [
   "1382",
   "0.1456"
  ],
  [
   "1386",
   "0.1456"
  ],
  [
   "1396",
   "0.1456"
  ],
  [
   "1405",
   "0.1456"
  ],
  [
   "1409",
   "0.1456"
  ],
  [
   "1452",
   "0.1456"
  ],
  [
   "1508",
   "0.1456"
  ],
  [
   "1562",
   "0.1456"
  ],
  [
   "1645",
   "0.1456"
  ],
  [
   "1799",
   "0.1456"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 75,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "78 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 75,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 563,
  "name": "Your",
  "id": 112328806
 }
}