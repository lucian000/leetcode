{
 "id": 643,
 "ids": "643",
 "state": "None",
 "name": "Maximum Average Subarray I",
 "key": "maximum-average-subarray-i",
 "link": "https://leetcode.com/problems/maximum-average-subarray-i",
 "locked": false,
 "percent": 39.36564284611823,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "5.1K",
 "totalSubmit": "13K",
 "desc": "\r\nGiven an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.\r\n\r\n\r\nExample 1:\r\n\r\nInput: [1,12,-5,-6,50,3], k = 4\r\nOutput: 12.75\r\nExplanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75\r\n\r\n\r\n\r\nNote:\r\n\r\n1 <= k <= n <= 30,000.\r\nElements of the given array will be in the range [-10,000, 10,000].\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    double findMaxAverage(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public double findMaxAverage(int[] nums, int k) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def findMaxAverage(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: float\r\n        \"\"\""
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def findMaxAverage(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: float\r\n        \"\"\""
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "double findMaxAverage(int* nums, int numsSize, int k) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public double FindMaxAverage(int[] nums, int k) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar findMaxAverage = function(nums, k) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Float}\r\ndef find_max_average(nums, k)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func findMaxAverage(nums []int, k int) float64 {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\r\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\r\n        \r\n    }\r\n}"
  }
 ],
 "testcase": "'[1,12,-5,-6,50,3]\\n4'",
 "testable": true,
 "slug": "maximum-average-subarray-i",
 "category": "algorithms",
 "fname": "643.maximum-average-subarray-i.algorithms.py",
 "test_your": {
  "code_answer": [
   "12.75000"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501773689.91_784204_7"
 },
 "test_expected": {
  "code_answer": [
   "12.75000"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501773689.92_784204_7"
 },
 "submit_chart": [
  [
   "132",
   "0.0841"
  ],
  [
   "139",
   "0.1682"
  ],
  [
   "142",
   "0.1682"
  ],
  [
   "146",
   "0.0841"
  ],
  [
   "148",
   "0.2523"
  ],
  [
   "149",
   "0.1682"
  ],
  [
   "152",
   "0.2523"
  ],
  [
   "155",
   "0.3364"
  ],
  [
   "156",
   "0.2523"
  ],
  [
   "158",
   "0.0841"
  ],
  [
   "159",
   "0.1682"
  ],
  [
   "162",
   "1.8503"
  ],
  [
   "163",
   "0.0841"
  ],
  [
   "165",
   "0.9251"
  ],
  [
   "166",
   "0.3364"
  ],
  [
   "168",
   "0.3364"
  ],
  [
   "169",
   "0.6728"
  ],
  [
   "172",
   "1.4298"
  ],
  [
   "173",
   "0.0841"
  ],
  [
   "175",
   "0.5046"
  ],
  [
   "176",
   "0.2523"
  ],
  [
   "178",
   "0.1682"
  ],
  [
   "179",
   "0.7569"
  ],
  [
   "182",
   "0.8410"
  ],
  [
   "185",
   "1.1775"
  ],
  [
   "186",
   "0.5046"
  ],
  [
   "188",
   "0.2523"
  ],
  [
   "189",
   "1.0093"
  ],
  [
   "192",
   "1.5980"
  ],
  [
   "193",
   "0.0841"
  ],
  [
   "195",
   "0.5046"
  ],
  [
   "196",
   "0.8410"
  ],
  [
   "198",
   "0.2523"
  ],
  [
   "199",
   "1.4298"
  ],
  [
   "202",
   "1.5980"
  ],
  [
   "203",
   "0.0841"
  ],
  [
   "205",
   "0.9251"
  ],
  [
   "206",
   "0.6728"
  ],
  [
   "208",
   "0.6728"
  ],
  [
   "209",
   "2.0185"
  ],
  [
   "212",
   "2.5231"
  ],
  [
   "215",
   "1.3457"
  ],
  [
   "216",
   "1.0093"
  ],
  [
   "218",
   "0.5887"
  ],
  [
   "219",
   "1.5980"
  ],
  [
   "222",
   "2.4390"
  ],
  [
   "225",
   "1.8503"
  ],
  [
   "226",
   "0.5046"
  ],
  [
   "228",
   "1.0093"
  ],
  [
   "229",
   "1.2616"
  ],
  [
   "232",
   "2.5231"
  ],
  [
   "233",
   "0.0841"
  ],
  [
   "235",
   "0.9251"
  ],
  [
   "236",
   "0.5887"
  ],
  [
   "238",
   "0.5887"
  ],
  [
   "239",
   "2.1026"
  ],
  [
   "242",
   "2.2708"
  ],
  [
   "245",
   "1.0093"
  ],
  [
   "246",
   "0.2523"
  ],
  [
   "248",
   "0.4205"
  ],
  [
   "249",
   "1.0934"
  ],
  [
   "252",
   "1.3457"
  ],
  [
   "253",
   "0.0841"
  ],
  [
   "255",
   "1.0934"
  ],
  [
   "256",
   "0.3364"
  ],
  [
   "258",
   "0.5046"
  ],
  [
   "259",
   "1.1775"
  ],
  [
   "262",
   "1.9344"
  ],
  [
   "265",
   "1.0934"
  ],
  [
   "266",
   "0.1682"
  ],
  [
   "268",
   "0.4205"
  ],
  [
   "269",
   "0.7569"
  ],
  [
   "272",
   "2.1026"
  ],
  [
   "275",
   "0.6728"
  ],
  [
   "276",
   "0.6728"
  ],
  [
   "278",
   "0.2523"
  ],
  [
   "279",
   "1.4298"
  ],
  [
   "282",
   "2.1026"
  ],
  [
   "285",
   "1.4298"
  ],
  [
   "286",
   "1.0093"
  ],
  [
   "288",
   "0.2523"
  ],
  [
   "289",
   "1.2616"
  ],
  [
   "292",
   "0.6728"
  ],
  [
   "295",
   "1.0093"
  ],
  [
   "296",
   "0.5887"
  ],
  [
   "298",
   "0.3364"
  ],
  [
   "299",
   "1.1775"
  ],
  [
   "302",
   "1.5139"
  ],
  [
   "303",
   "0.0841"
  ],
  [
   "305",
   "1.2616"
  ],
  [
   "306",
   "0.3364"
  ],
  [
   "308",
   "0.2523"
  ],
  [
   "309",
   "0.5046"
  ],
  [
   "312",
   "0.7569"
  ],
  [
   "315",
   "0.5887"
  ],
  [
   "316",
   "0.5887"
  ],
  [
   "318",
   "0.1682"
  ],
  [
   "319",
   "0.7569"
  ],
  [
   "322",
   "0.9251"
  ],
  [
   "325",
   "0.5887"
  ],
  [
   "326",
   "0.4205"
  ],
  [
   "328",
   "0.4205"
  ],
  [
   "329",
   "0.8410"
  ],
  [
   "332",
   "0.7569"
  ],
  [
   "335",
   "0.5046"
  ],
  [
   "336",
   "0.3364"
  ],
  [
   "338",
   "0.1682"
  ],
  [
   "339",
   "0.2523"
  ],
  [
   "342",
   "0.8410"
  ],
  [
   "345",
   "0.5887"
  ],
  [
   "349",
   "0.4205"
  ],
  [
   "352",
   "0.4205"
  ],
  [
   "355",
   "0.0841"
  ],
  [
   "356",
   "0.1682"
  ],
  [
   "359",
   "0.1682"
  ],
  [
   "362",
   "0.6728"
  ],
  [
   "365",
   "0.4205"
  ],
  [
   "366",
   "0.3364"
  ],
  [
   "368",
   "0.0841"
  ],
  [
   "369",
   "0.2523"
  ],
  [
   "372",
   "0.2523"
  ],
  [
   "375",
   "0.4205"
  ],
  [
   "376",
   "0.1682"
  ],
  [
   "378",
   "0.3364"
  ],
  [
   "379",
   "0.2523"
  ],
  [
   "382",
   "0.5046"
  ],
  [
   "385",
   "0.4205"
  ],
  [
   "386",
   "0.1682"
  ],
  [
   "389",
   "0.3364"
  ],
  [
   "392",
   "0.3364"
  ],
  [
   "396",
   "0.0841"
  ],
  [
   "398",
   "0.0841"
  ],
  [
   "399",
   "0.1682"
  ],
  [
   "402",
   "0.3364"
  ],
  [
   "405",
   "0.3364"
  ],
  [
   "412",
   "0.2523"
  ],
  [
   "418",
   "0.0841"
  ],
  [
   "425",
   "0.3364"
  ],
  [
   "428",
   "0.0841"
  ],
  [
   "429",
   "0.3364"
  ],
  [
   "432",
   "0.1682"
  ],
  [
   "435",
   "0.0841"
  ],
  [
   "436",
   "0.2523"
  ],
  [
   "438",
   "0.1682"
  ],
  [
   "439",
   "0.0841"
  ],
  [
   "442",
   "0.1682"
  ],
  [
   "445",
   "0.0841"
  ],
  [
   "446",
   "0.0841"
  ],
  [
   "449",
   "0.0841"
  ],
  [
   "452",
   "0.1682"
  ],
  [
   "455",
   "0.2523"
  ],
  [
   "458",
   "0.1682"
  ],
  [
   "462",
   "0.0841"
  ],
  [
   "465",
   "0.0841"
  ],
  [
   "466",
   "0.0841"
  ],
  [
   "469",
   "0.0841"
  ],
  [
   "475",
   "0.0841"
  ],
  [
   "482",
   "0.0841"
  ],
  [
   "485",
   "0.0841"
  ],
  [
   "488",
   "0.0841"
  ],
  [
   "492",
   "0.0841"
  ],
  [
   "498",
   "0.0841"
  ],
  [
   "502",
   "0.0841"
  ],
  [
   "512",
   "0.1682"
  ],
  [
   "518",
   "0.0841"
  ],
  [
   "538",
   "0.0841"
  ],
  [
   "562",
   "0.0841"
  ],
  [
   "579",
   "0.0841"
  ],
  [
   "646",
   "0.0841"
  ],
  [
   "652",
   "0.0841"
  ],
  [
   "659",
   "0.0841"
  ],
  [
   "675",
   "0.0841"
  ],
  [
   "692",
   "0.0841"
  ],
  [
   "745",
   "0.0841"
  ],
  [
   "789",
   "0.0841"
  ],
  [
   "805",
   "0.0841"
  ],
  [
   "809",
   "0.0841"
  ],
  [
   "859",
   "0.0841"
  ],
  [
   "865",
   "0.0841"
  ],
  [
   "936",
   "0.0841"
  ],
  [
   "975",
   "0.0841"
  ],
  [
   "998",
   "0.0841"
  ],
  [
   "1032",
   "0.0841"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 123,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "186 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 123,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 643,
  "name": "Your",
  "id": 112348567
 }
}