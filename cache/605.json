{
 "id": 605,
 "ids": "605",
 "state": "None",
 "name": "Can Place Flowers",
 "key": "can-place-flowers",
 "link": "https://leetcode.com/problems/can-place-flowers",
 "locked": false,
 "percent": 29.94612614221508,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "10.1K",
 "totalSubmit": "33.6K",
 "desc": "Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.\r\n\r\nGiven a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.\r\n\r\nExample 1:\r\n\r\nInput: flowerbed = [1,0,0,0,1], n = 1\r\nOutput: True\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: flowerbed = [1,0,0,0,1], n = 2\r\nOutput: False\r\n\r\n\r\n\r\nNote:\r\n\r\nThe input array won't violate no-adjacent-flowers rule.\r\nThe input array size is in the range of [1, 20000].\r\nn is a non-negative integer which won't exceed the input array size.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    bool canPlaceFlowers(vector<int>& flowerbed, int n) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def canPlaceFlowers(self, flowerbed, n):\r\n        \"\"\"\r\n        :type flowerbed: List[int]\r\n        :type n: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "python3",
   "text": "Python3",
   "defaultCode": "class Solution:\r\n    def canPlaceFlowers(self, flowerbed, n):\r\n        \"\"\"\r\n        :type flowerbed: List[int]\r\n        :type n: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public bool CanPlaceFlowers(int[] flowerbed, int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} flowerbed\r\n * @param {number} n\r\n * @return {boolean}\r\n */\r\nvar canPlaceFlowers = function(flowerbed, n) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} flowerbed\r\n# @param {Integer} n\r\n# @return {Boolean}\r\ndef can_place_flowers(flowerbed, n)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func canPlaceFlowers(_ flowerbed: [Int], _ n: Int) -> Bool {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func canPlaceFlowers(flowerbed []int, n int) bool {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def canPlaceFlowers(flowerbed: Array[Int], n: Int): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1,0,0,0,1]\\n1'",
 "testable": true,
 "slug": "can-place-flowers",
 "category": "algorithms",
 "fname": "605.can-place-flowers.algorithms.py",
 "test_your": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "42 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501652518.69_784204_28"
 },
 "test_expected": {
  "code_answer": [
   "true"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "0 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501652518.72_784204_28"
 },
 "submit_chart": [
  [
   "45",
   "0.2242"
  ],
  [
   "48",
   "0.2242"
  ],
  [
   "49",
   "0.6726"
  ],
  [
   "52",
   "2.2422"
  ],
  [
   "55",
   "4.2601"
  ],
  [
   "56",
   "2.8027"
  ],
  [
   "58",
   "3.2511"
  ],
  [
   "59",
   "7.8475"
  ],
  [
   "62",
   "11.8834"
  ],
  [
   "63",
   "0.4484"
  ],
  [
   "65",
   "6.2780"
  ],
  [
   "66",
   "3.1390"
  ],
  [
   "68",
   "3.3632"
  ],
  [
   "69",
   "7.1749"
  ],
  [
   "72",
   "7.1749"
  ],
  [
   "73",
   "0.3363"
  ],
  [
   "75",
   "5.1570"
  ],
  [
   "76",
   "2.1300"
  ],
  [
   "78",
   "1.9058"
  ],
  [
   "79",
   "2.2422"
  ],
  [
   "82",
   "3.6996"
  ],
  [
   "83",
   "0.1121"
  ],
  [
   "85",
   "2.5785"
  ],
  [
   "86",
   "2.3543"
  ],
  [
   "88",
   "1.0090"
  ],
  [
   "89",
   "1.6816"
  ],
  [
   "92",
   "2.3543"
  ],
  [
   "95",
   "1.2332"
  ],
  [
   "96",
   "1.0090"
  ],
  [
   "98",
   "0.6726"
  ],
  [
   "99",
   "0.5605"
  ],
  [
   "102",
   "1.6816"
  ],
  [
   "105",
   "0.3363"
  ],
  [
   "106",
   "0.5605"
  ],
  [
   "108",
   "0.4484"
  ],
  [
   "109",
   "0.2242"
  ],
  [
   "112",
   "0.3363"
  ],
  [
   "115",
   "0.2242"
  ],
  [
   "116",
   "0.1121"
  ],
  [
   "118",
   "0.2242"
  ],
  [
   "119",
   "0.6726"
  ],
  [
   "122",
   "0.1121"
  ],
  [
   "125",
   "0.2242"
  ],
  [
   "129",
   "0.1121"
  ],
  [
   "132",
   "0.1121"
  ],
  [
   "135",
   "0.2242"
  ],
  [
   "136",
   "0.2242"
  ],
  [
   "138",
   "0.1121"
  ],
  [
   "139",
   "0.1121"
  ],
  [
   "142",
   "0.2242"
  ],
  [
   "145",
   "0.1121"
  ],
  [
   "146",
   "0.2242"
  ],
  [
   "152",
   "0.3363"
  ],
  [
   "169",
   "0.1121"
  ],
  [
   "172",
   "0.1121"
  ],
  [
   "175",
   "0.1121"
  ],
  [
   "189",
   "0.2242"
  ],
  [
   "229",
   "0.1121"
  ],
  [
   "242",
   "0.1121"
  ],
  [
   "275",
   "0.1121"
  ],
  [
   "289",
   "0.1121"
  ],
  [
   "302",
   "0.1121"
  ],
  [
   "315",
   "0.1121"
  ],
  [
   "319",
   "0.1121"
  ],
  [
   "322",
   "0.1121"
  ],
  [
   "332",
   "0.1121"
  ],
  [
   "349",
   "0.1121"
  ],
  [
   "352",
   "0.1121"
  ],
  [
   "378",
   "0.1121"
  ],
  [
   "379",
   "0.1121"
  ],
  [
   "399",
   "0.1121"
  ],
  [
   "419",
   "0.1121"
  ],
  [
   "422",
   "0.1121"
  ],
  [
   "572",
   "0.1121"
  ],
  [
   "752",
   "0.1121"
  ],
  [
   "759",
   "0.1121"
  ],
  [
   "762",
   "0.1121"
  ],
  [
   "999",
   "0.1121"
  ],
  [
   "1759",
   "0.1121"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 123,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "82 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 123,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 605,
  "name": "Your",
  "id": 112145255
 }
}