{"id": 321, "ids": "321", "state": "None", "name": "Create Maximum Number", "key": "create-maximum-number", "link": "https://leetcode.com/problems/create-maximum-number", "locked": false, "percent": 24.420636627594366, "level": "Hard", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "\r\n    Given two arrays of length m and n with digits 0-9 representing two numbers.\r\n    Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits\r\n    from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.\r\n\r\n\r\n\r\n    Example 1:\r\n\r\n\r\n    nums1 = [3, 4, 6, 5]\r\n    nums2 = [9, 1, 2, 5, 8, 3]\r\n    k = 5\r\n    return [9, 8, 6, 5, 3]\r\n\r\n\r\n    Example 2:\r\n\r\n\r\n    nums1 = [6, 7]\r\n    nums2 = [6, 0, 4]\r\n    k = 5\r\n    return [6, 7, 6, 0, 4]\r\n\r\n\r\n    Example 3:\r\n\r\n\r\n    nums1 = [3, 9]\r\n    nums2 = [8, 9]\r\n    k = 3\r\n    return [9, 8, 9]\r\n\r\n\r\nCredits:Special thanks to @dietpepsi for adding this problem and creating all test cases.", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int[] maxNumber(int[] nums1, int[] nums2, int k) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def maxNumber(self, nums1, nums2, k):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* maxNumber(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int[] MaxNumber(int[] nums1, int[] nums2, int k) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar maxNumber = function(nums1, nums2, k) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @param {Integer} k\r\n# @return {Integer[]}\r\ndef max_number(nums1, nums2, k)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\n    func maxNumber(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func maxNumber(nums1 []int, nums2 []int, k int) []int {\n    \n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def maxNumber(nums1: Array[Int], nums2: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"}], "testcase": "[3,4,6,5]\n[9,1,2,5,8,3]\n5", "testable": true}