{
 "id": 112,
 "ids": "112",
 "state": "None",
 "name": "Path Sum",
 "key": "path-sum",
 "link": "https://leetcode.com/problems/path-sum",
 "locked": false,
 "percent": 33.84443508953726,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "167.2K",
 "totalSubmit": "494.1K",
 "desc": "\r\nGiven a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\r\n\r\n\r\nFor example:\r\nGiven the below binary tree and sum = 22,\r\n\r\n              5\r\n             / \\\r\n            4   8\r\n           /   / \\\r\n          11  13  4\r\n         /  \\      \\\r\n        7    2      1\r\n\r\n\r\n\r\nreturn true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool hasPathSum(TreeNode* root, int sum) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public boolean hasPathSum(TreeNode root, int sum) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def hasPathSum(self, root, sum):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :type sum: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool hasPathSum(struct TreeNode* root, int sum) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool HasPathSum(TreeNode root, int sum) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {number} sum\r\n * @return {boolean}\r\n */\r\nvar hasPathSum = function(root, sum) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {Integer} sum\r\n# @return {Boolean}\r\ndef has_path_sum(root, sum)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func hasPathSum(_ root: TreeNode?, _ sum: Int) -> Bool {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc hasPathSum(root *TreeNode, sum int) bool {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def hasPathSum(root: TreeNode, sum: Int): Boolean = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[]\\n1'",
 "testable": true,
 "slug": "path-sum",
 "category": "algorithms",
 "fname": "112.path-sum.algorithms.py",
 "test_your": {
  "code_answer": [
   "false"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "32 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1501233189.19_784204_10"
 },
 "test_expected": {
  "code_answer": [
   "false"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1501233189.2_784204_10"
 },
 "submit_chart": [
  [
   "52",
   "0.8137"
  ],
  [
   "53",
   "0.0904"
  ],
  [
   "55",
   "2.7125"
  ],
  [
   "56",
   "1.8083"
  ],
  [
   "58",
   "3.2550"
  ],
  [
   "59",
   "7.1429"
  ],
  [
   "62",
   "13.3816"
  ],
  [
   "63",
   "0.4521"
  ],
  [
   "65",
   "8.4991"
  ],
  [
   "66",
   "4.5208"
  ],
  [
   "68",
   "4.0687"
  ],
  [
   "69",
   "8.2278"
  ],
  [
   "72",
   "9.3128"
  ],
  [
   "75",
   "4.4304"
  ],
  [
   "76",
   "2.8029"
  ],
  [
   "78",
   "1.5371"
  ],
  [
   "79",
   "3.8879"
  ],
  [
   "82",
   "4.2495"
  ],
  [
   "83",
   "0.1808"
  ],
  [
   "85",
   "2.6221"
  ],
  [
   "86",
   "1.4467"
  ],
  [
   "88",
   "0.7233"
  ],
  [
   "89",
   "2.0796"
  ],
  [
   "92",
   "1.5371"
  ],
  [
   "95",
   "1.4467"
  ],
  [
   "96",
   "0.6329"
  ],
  [
   "98",
   "0.1808"
  ],
  [
   "99",
   "0.9946"
  ],
  [
   "102",
   "1.2658"
  ],
  [
   "105",
   "0.5425"
  ],
  [
   "106",
   "0.5425"
  ],
  [
   "108",
   "0.1808"
  ],
  [
   "109",
   "0.6329"
  ],
  [
   "112",
   "0.4521"
  ],
  [
   "115",
   "0.3617"
  ],
  [
   "118",
   "0.3617"
  ],
  [
   "119",
   "0.2712"
  ],
  [
   "122",
   "0.3617"
  ],
  [
   "125",
   "0.0904"
  ],
  [
   "126",
   "0.0904"
  ],
  [
   "128",
   "0.0904"
  ],
  [
   "129",
   "0.5425"
  ],
  [
   "132",
   "0.0904"
  ],
  [
   "148",
   "0.0904"
  ],
  [
   "152",
   "0.0904"
  ],
  [
   "159",
   "0.0904"
  ],
  [
   "165",
   "0.1808"
  ],
  [
   "169",
   "0.0904"
  ],
  [
   "182",
   "0.0904"
  ],
  [
   "199",
   "0.0904"
  ],
  [
   "202",
   "0.0904"
  ],
  [
   "262",
   "0.0904"
  ],
  [
   "315",
   "0.0904"
  ],
  [
   "392",
   "0.0904"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 114,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "95 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 114,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 112,
  "name": "Your",
  "id": 111499417
 }
}