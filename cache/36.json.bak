{"id": 36, "ids": "36", "state": "None", "name": "Valid Sudoku", "key": "valid-sudoku", "link": "https://leetcode.com/problems/valid-sudoku", "locked": false, "percent": 35.44670701546965, "level": "Medium", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.\r\n\r\nThe Sudoku board could be partially filled, where empty cells are filled with the character '.'.\r\n\r\n\r\n\r\nA partially filled sudoku which is valid.\r\n\r\n\r\nNote:\r\nA valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    bool isValidSudoku(vector<vector<char>>& board) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public boolean isValidSudoku(char[][] board) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def isValidSudoku(self, board):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :rtype: bool\r\n        \"\"\""}, {"value": "c", "text": "C", "defaultCode": "bool isValidSudoku(char** board, int boardRowSize, int boardColSize) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public bool IsValidSudoku(char[,] board) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {character[][]} board\r\n * @return {boolean}\r\n */\r\nvar isValidSudoku = function(board) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Character[][]} board\r\n# @return {Boolean}\r\ndef is_valid_sudoku(board)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\r\n    func isValidSudoku(_ board: [[Character]]) -> Bool {\r\n        \r\n    }\r\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func isValidSudoku(board [][]byte) bool {\r\n    \r\n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def isValidSudoku(board: Array[Array[Char]]): Boolean = {\n        \n    }\n}"}], "testcase": "'[\".87654321\",\"2........\",\"3........\",\"4........\",\"5........\",\"6........\",\"7........\",\"8........\",\"9........\"]'", "testable": true}