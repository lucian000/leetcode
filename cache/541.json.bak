{
 "id": 541,
 "ids": "541",
 "state": "None",
 "name": "Reverse String II",
 "key": "reverse-string-ii",
 "link": "https://leetcode.com/problems/reverse-string-ii",
 "locked": false,
 "percent": 44.07568163833002,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "18.4K",
 "totalSubmit": "41.7K",
 "desc": "\r\nGiven a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.\r\n\r\n\r\nExample:\r\n\r\nInput: s = \"abcdefg\", k = 2\r\nOutput: \"bacdfeg\"\r\n\r\n\r\n\r\nRestrictions: \r\n\r\n The string consists of lower English letters only.\r\n Length of the given string and k will in the range [1, 10000]\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    string reverseStr(string s, int k) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public String reverseStr(String s, int k) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def reverseStr(self, s, k):\r\n        \"\"\"\r\n        :type s: str\r\n        :type k: int\r\n        :rtype: str\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "char* reverseStr(char* s, int k) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public string ReverseStr(string s, int k) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {string} s\r\n * @param {number} k\r\n * @return {string}\r\n */\r\nvar reverseStr = function(s, k) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {String} s\r\n# @param {Integer} k\r\n# @return {String}\r\ndef reverse_str(s, k)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func reverseStr(_ s: String, _ k: Int) -> String {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func reverseStr(s string, k int) string {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def reverseStr(s: String, k: Int): String = {\n        \n    }\n}"
  }
 ],
 "testcase": "'\"abcdefg\"\\n2'",
 "testable": true,
 "slug": "reverse-string-ii",
 "category": "algorithms",
 "fname": "541.reverse-string-ii.algorithms.py",
 "test_your": {
  "code_answer": [
   "\"cdefg\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1502008931.03_784204_11"
 },
 "test_expected": {
  "code_answer": [
   "\"bacdfeg\""
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "49 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1502008931.61_784204_11"
 },
 "submit_chart": [
  [
   "28",
   "0.1209"
  ],
  [
   "32",
   "3.8694"
  ],
  [
   "33",
   "0.3628"
  ],
  [
   "35",
   "7.7388"
  ],
  [
   "36",
   "4.2322"
  ],
  [
   "38",
   "5.3204"
  ],
  [
   "39",
   "12.5756"
  ],
  [
   "42",
   "15.5985"
  ],
  [
   "43",
   "0.4837"
  ],
  [
   "45",
   "8.2225"
  ],
  [
   "46",
   "4.2322"
  ],
  [
   "48",
   "3.0230"
  ],
  [
   "49",
   "7.9807"
  ],
  [
   "52",
   "5.4414"
  ],
  [
   "53",
   "0.1209"
  ],
  [
   "55",
   "3.1439"
  ],
  [
   "56",
   "1.0883"
  ],
  [
   "58",
   "1.2092"
  ],
  [
   "59",
   "2.1765"
  ],
  [
   "62",
   "1.9347"
  ],
  [
   "65",
   "1.6929"
  ],
  [
   "66",
   "0.7255"
  ],
  [
   "68",
   "0.2418"
  ],
  [
   "69",
   "0.8464"
  ],
  [
   "72",
   "1.2092"
  ],
  [
   "73",
   "0.1209"
  ],
  [
   "75",
   "0.2418"
  ],
  [
   "76",
   "0.2418"
  ],
  [
   "78",
   "0.3628"
  ],
  [
   "79",
   "0.3628"
  ],
  [
   "82",
   "0.2418"
  ],
  [
   "85",
   "0.6046"
  ],
  [
   "89",
   "0.1209"
  ],
  [
   "92",
   "0.2418"
  ],
  [
   "95",
   "0.1209"
  ],
  [
   "96",
   "0.1209"
  ],
  [
   "98",
   "0.1209"
  ],
  [
   "99",
   "0.1209"
  ],
  [
   "109",
   "0.1209"
  ],
  [
   "112",
   "0.1209"
  ],
  [
   "115",
   "0.1209"
  ],
  [
   "118",
   "0.2418"
  ],
  [
   "119",
   "0.1209"
  ],
  [
   "125",
   "0.6046"
  ],
  [
   "128",
   "0.1209"
  ],
  [
   "129",
   "0.1209"
  ],
  [
   "142",
   "0.1209"
  ],
  [
   "149",
   "0.1209"
  ],
  [
   "175",
   "0.2418"
  ],
  [
   "176",
   "0.2418"
  ],
  [
   "182",
   "0.1209"
  ],
  [
   "215",
   "0.1209"
  ],
  [
   "275",
   "0.1209"
  ],
  [
   "282",
   "0.1209"
  ],
  [
   "312",
   "0.1209"
  ],
  [
   "342",
   "0.1209"
  ],
  [
   "352",
   "0.1209"
  ],
  [
   "356",
   "0.1209"
  ],
  [
   "369",
   "0.1209"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 60,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "62 ms",
  "compare_result": "111111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 60,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 541,
  "name": "Your",
  "id": 112709376
 }
}