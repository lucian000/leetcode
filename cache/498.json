{"id": 498, "ids": "498", "state": "None", "name": "Diagonal Traverse", "key": "diagonal-traverse", "link": "https://leetcode.com/problems/diagonal-traverse", "locked": false, "percent": 46.193053439125634, "level": "Medium", "starred": false, "loaded": true, "totalAC": "", "totalSubmit": "", "desc": "\r\nGiven a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image. \r\n\r\n\r\nExample:\r\n\r\nInput:\r\n[\r\n [ 1, 2, 3 ],\r\n [ 4, 5, 6 ],\r\n [ 7, 8, 9 ]\r\n]\r\nOutput:  [1,2,4,7,5,3,6,8,9]\r\nExplanation:\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\nThe total number of elements of the given matrix will not exceed 10,000.\r\n\r\n", "templates": [{"value": "cpp", "text": "C++", "defaultCode": "class Solution {\r\npublic:\r\n    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};"}, {"value": "java", "text": "Java", "defaultCode": "public class Solution {\r\n    public int[] findDiagonalOrder(int[][] matrix) {\r\n        \r\n    }\r\n}"}, {"value": "python", "text": "Python", "defaultCode": "class Solution(object):\r\n    def findDiagonalOrder(self, matrix):\r\n        \"\"\"\r\n        :type matrix: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "}, {"value": "c", "text": "C", "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findDiagonalOrder(int** matrix, int matrixRowSize, int matrixColSize, int* returnSize) {\r\n    \r\n}"}, {"value": "csharp", "text": "C#", "defaultCode": "public class Solution {\r\n    public int[] FindDiagonalOrder(int[,] matrix) {\r\n        \r\n    }\r\n}"}, {"value": "javascript", "text": "JavaScript", "defaultCode": "/**\r\n * @param {number[][]} matrix\r\n * @return {number[]}\r\n */\r\nvar findDiagonalOrder = function(matrix) {\r\n    \r\n};"}, {"value": "ruby", "text": "Ruby", "defaultCode": "# @param {Integer[][]} matrix\r\n# @return {Integer[]}\r\ndef find_diagonal_order(matrix)\r\n    \r\nend"}, {"value": "swift", "text": "Swift", "defaultCode": "class Solution {\r\n    func findDiagonalOrder(_ matrix: [[Int]]) -> [Int] {\r\n        \r\n    }\r\n}"}, {"value": "golang", "text": "Go", "defaultCode": "func findDiagonalOrder(matrix [][]int) []int {\r\n    \r\n}"}, {"value": "scala", "text": "Scala", "defaultCode": "object Solution {\n    def findDiagonalOrder(matrix: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"}], "testcase": "[[1,2,3],[4,5,6],[7,8,9]]", "testable": true}