{
 "id": 88,
 "ids": "88",
 "state": "None",
 "name": "Merge Sorted Array",
 "key": "merge-sorted-array",
 "link": "https://leetcode.com/problems/merge-sorted-array",
 "locked": false,
 "percent": 31.946547867426972,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "169.8K",
 "totalSubmit": "531.6K",
 "desc": "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\r\n\r\n\r\nNote:\r\nYou may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def merge(self, nums1, m, nums2, n):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type m: int\r\n        :type nums2: List[int]\r\n        :type n: int\r\n        :rtype: void Do not return anything, modify nums1 in-place instead.\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "void merge(int* nums1, int m, int* nums2, int n) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} nums1\r\n * @param {number} m\r\n * @param {number[]} nums2\r\n * @param {number} n\r\n * @return {void} Do not return anything, modify nums1 in-place instead.\r\n */\r\nvar merge = function(nums1, m, nums2, n) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} nums1\r\n# @param {Integer} m\r\n# @param {Integer[]} nums2\r\n# @param {Integer} n\r\n# @return {Void} Do not return anything, modify nums1 in-place instead.\r\ndef merge(nums1, m, nums2, n)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\n        \n    }\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func merge(nums1 []int, m int, nums2 []int, n int)  {\n    \n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[1]\\n1\\n[]\\n0'",
 "testable": true,
 "slug": "merge-sorted-array",
 "category": "algorithms",
 "fname": "88.merge-sorted-array.algorithms.py",
 "test_your": {
  "code_answer": [
   "[1]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "28 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500901739.93_784204_13"
 },
 "test_expected": {
  "code_answer": [
   "[1]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "26 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500901739.95_784204_13"
 },
 "submit_chart": [
  [
   "32",
   "0.2414"
  ],
  [
   "35",
   "1.8504"
  ],
  [
   "36",
   "2.1722"
  ],
  [
   "38",
   "2.9767"
  ],
  [
   "39",
   "12.4698"
  ],
  [
   "42",
   "18.5036"
  ],
  [
   "43",
   "1.6090"
  ],
  [
   "45",
   "10.8608"
  ],
  [
   "46",
   "6.1142"
  ],
  [
   "48",
   "2.5744"
  ],
  [
   "49",
   "7.5623"
  ],
  [
   "52",
   "8.9300"
  ],
  [
   "53",
   "0.4827"
  ],
  [
   "55",
   "3.2985"
  ],
  [
   "56",
   "1.9308"
  ],
  [
   "58",
   "1.3677"
  ],
  [
   "59",
   "3.8616"
  ],
  [
   "62",
   "2.8962"
  ],
  [
   "63",
   "0.1609"
  ],
  [
   "65",
   "0.8850"
  ],
  [
   "66",
   "1.1263"
  ],
  [
   "68",
   "0.9654"
  ],
  [
   "69",
   "1.4481"
  ],
  [
   "72",
   "2.0113"
  ],
  [
   "75",
   "0.2414"
  ],
  [
   "76",
   "0.1609"
  ],
  [
   "78",
   "0.3218"
  ],
  [
   "79",
   "0.7241"
  ],
  [
   "82",
   "0.6436"
  ],
  [
   "83",
   "0.0805"
  ],
  [
   "85",
   "0.1609"
  ],
  [
   "86",
   "0.1609"
  ],
  [
   "88",
   "0.0805"
  ],
  [
   "89",
   "0.0805"
  ],
  [
   "92",
   "0.0805"
  ],
  [
   "95",
   "0.0805"
  ],
  [
   "96",
   "0.0805"
  ],
  [
   "98",
   "0.0805"
  ],
  [
   "102",
   "0.1609"
  ],
  [
   "112",
   "0.0805"
  ],
  [
   "116",
   "0.0805"
  ],
  [
   "195",
   "0.0805"
  ],
  [
   "199",
   "0.0805"
  ],
  [
   "205",
   "0.0805"
  ],
  [
   "312",
   "0.0805"
  ],
  [
   "482",
   "0.0805"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 59,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "52 ms",
  "compare_result": "11111111111111111111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 59,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 88,
  "name": "Your",
  "id": 110939428
 }
}