{
 "id": 160,
 "ids": "160",
 "state": "None",
 "name": "Intersection of Two Linked Lists",
 "key": "intersection-of-two-linked-lists",
 "link": "https://leetcode.com/problems/intersection-of-two-linked-lists",
 "locked": false,
 "percent": 30.512126712505932,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "135.7K",
 "totalSubmit": "444.7K",
 "desc": "Write a program to find the node at which the intersection of two singly linked lists begins.\r\n\r\nFor example, the following two linked lists: \r\n\r\nA:          a1 \u2192 a2\r\n                   \u2198\r\n                     c1 \u2192 c2 \u2192 c3\r\n                   \u2197            \r\nB:     b1 \u2192 b2 \u2192 b3\r\n\r\nbegin to intersect at node c1.\r\n\r\nNotes:\r\n\r\nIf the two linked lists have no intersection at all, return null.\r\nThe linked lists must retain their original structure after the function returns. \r\nYou may assume there are no cycles anywhere in the entire linked structure.\r\nYour code should preferably run in O(n) time and use only O(1) memory.\r\n\r\n\r\n\r\nCredits:Special thanks to @stellari for adding this problem and creating all test cases.",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) {\r\n *         val = x;\r\n *         next = null;\r\n *     }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def getIntersectionNode(self, headA, headB):\r\n        \"\"\"\r\n        :type head1, head1: ListNode\r\n        :rtype: ListNode\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {ListNode} headA\r\n * @param {ListNode} headB\r\n * @return {ListNode}\r\n */\r\nvar getIntersectionNode = function(headA, headB) {\r\n    \r\n};"
  }
 ],
 "testcase": "'No intersection: []\\n[]'",
 "testable": false,
 "slug": "intersection-of-two-linked-lists",
 "category": "algorithms",
 "fname": "160.intersection-of-two-linked-lists.algorithms.py",
 "submit_chart": [
  [
   "329",
   "0.0773"
  ],
  [
   "332",
   "0.3091"
  ],
  [
   "335",
   "0.0773"
  ],
  [
   "336",
   "0.2318"
  ],
  [
   "338",
   "0.0773"
  ],
  [
   "339",
   "0.3091"
  ],
  [
   "342",
   "0.3864"
  ],
  [
   "345",
   "0.0773"
  ],
  [
   "346",
   "0.3091"
  ],
  [
   "348",
   "0.1546"
  ],
  [
   "349",
   "0.3864"
  ],
  [
   "352",
   "0.7728"
  ],
  [
   "355",
   "0.2318"
  ],
  [
   "356",
   "0.3864"
  ],
  [
   "358",
   "0.3864"
  ],
  [
   "359",
   "0.5410"
  ],
  [
   "362",
   "1.2365"
  ],
  [
   "365",
   "0.5410"
  ],
  [
   "366",
   "0.6182"
  ],
  [
   "368",
   "0.6955"
  ],
  [
   "369",
   "0.7728"
  ],
  [
   "372",
   "1.2365"
  ],
  [
   "375",
   "1.3910"
  ],
  [
   "376",
   "1.2365"
  ],
  [
   "378",
   "0.8501"
  ],
  [
   "379",
   "1.0819"
  ],
  [
   "382",
   "3.0912"
  ],
  [
   "385",
   "1.5456"
  ],
  [
   "386",
   "0.6955"
  ],
  [
   "388",
   "0.8501"
  ],
  [
   "389",
   "2.0866"
  ],
  [
   "392",
   "2.0093"
  ],
  [
   "395",
   "2.7821"
  ],
  [
   "396",
   "0.6182"
  ],
  [
   "398",
   "0.8501"
  ],
  [
   "399",
   "2.3184"
  ],
  [
   "402",
   "3.8640"
  ],
  [
   "405",
   "1.9320"
  ],
  [
   "406",
   "1.2365"
  ],
  [
   "408",
   "1.0819"
  ],
  [
   "409",
   "2.7821"
  ],
  [
   "412",
   "3.4776"
  ],
  [
   "415",
   "1.6229"
  ],
  [
   "416",
   "0.6955"
  ],
  [
   "418",
   "0.7728"
  ],
  [
   "419",
   "1.7774"
  ],
  [
   "422",
   "2.6275"
  ],
  [
   "425",
   "1.0819"
  ],
  [
   "426",
   "1.0819"
  ],
  [
   "428",
   "0.6182"
  ],
  [
   "429",
   "1.1592"
  ],
  [
   "432",
   "2.8594"
  ],
  [
   "435",
   "1.7774"
  ],
  [
   "436",
   "0.9274"
  ],
  [
   "438",
   "0.5410"
  ],
  [
   "439",
   "1.7002"
  ],
  [
   "442",
   "2.0866"
  ],
  [
   "445",
   "1.0046"
  ],
  [
   "446",
   "0.4637"
  ],
  [
   "448",
   "0.7728"
  ],
  [
   "449",
   "1.0046"
  ],
  [
   "452",
   "1.9320"
  ],
  [
   "455",
   "0.8501"
  ],
  [
   "456",
   "0.1546"
  ],
  [
   "458",
   "0.3091"
  ],
  [
   "459",
   "0.8501"
  ],
  [
   "462",
   "1.8547"
  ],
  [
   "465",
   "0.6182"
  ],
  [
   "466",
   "0.7728"
  ],
  [
   "468",
   "0.3091"
  ],
  [
   "469",
   "0.5410"
  ],
  [
   "472",
   "1.2365"
  ],
  [
   "475",
   "0.9274"
  ],
  [
   "476",
   "0.4637"
  ],
  [
   "478",
   "0.2318"
  ],
  [
   "479",
   "0.6955"
  ],
  [
   "482",
   "0.4637"
  ],
  [
   "485",
   "0.5410"
  ],
  [
   "486",
   "0.2318"
  ],
  [
   "488",
   "0.3091"
  ],
  [
   "489",
   "0.6182"
  ],
  [
   "492",
   "0.3864"
  ],
  [
   "495",
   "0.6182"
  ],
  [
   "496",
   "0.3091"
  ],
  [
   "498",
   "0.1546"
  ],
  [
   "499",
   "0.4637"
  ],
  [
   "502",
   "0.4637"
  ],
  [
   "505",
   "0.6182"
  ],
  [
   "506",
   "0.1546"
  ],
  [
   "508",
   "0.1546"
  ],
  [
   "509",
   "0.2318"
  ],
  [
   "512",
   "0.4637"
  ],
  [
   "515",
   "0.4637"
  ],
  [
   "516",
   "0.2318"
  ],
  [
   "518",
   "0.4637"
  ],
  [
   "519",
   "0.2318"
  ],
  [
   "522",
   "0.5410"
  ],
  [
   "525",
   "0.2318"
  ],
  [
   "526",
   "0.0773"
  ],
  [
   "528",
   "0.1546"
  ],
  [
   "529",
   "0.1546"
  ],
  [
   "532",
   "0.3864"
  ],
  [
   "535",
   "0.2318"
  ],
  [
   "536",
   "0.0773"
  ],
  [
   "538",
   "0.0773"
  ],
  [
   "539",
   "0.0773"
  ],
  [
   "542",
   "0.2318"
  ],
  [
   "545",
   "0.3091"
  ],
  [
   "548",
   "0.1546"
  ],
  [
   "549",
   "0.0773"
  ],
  [
   "552",
   "0.3091"
  ],
  [
   "555",
   "0.3864"
  ],
  [
   "562",
   "0.1546"
  ],
  [
   "565",
   "0.0773"
  ],
  [
   "568",
   "0.0773"
  ],
  [
   "569",
   "0.0773"
  ],
  [
   "572",
   "0.1546"
  ],
  [
   "575",
   "0.0773"
  ],
  [
   "576",
   "0.2318"
  ],
  [
   "578",
   "0.0773"
  ],
  [
   "579",
   "0.2318"
  ],
  [
   "582",
   "0.0773"
  ],
  [
   "585",
   "0.2318"
  ],
  [
   "589",
   "0.0773"
  ],
  [
   "592",
   "0.3091"
  ],
  [
   "596",
   "0.0773"
  ],
  [
   "599",
   "0.1546"
  ],
  [
   "602",
   "0.1546"
  ],
  [
   "608",
   "0.0773"
  ],
  [
   "609",
   "0.0773"
  ],
  [
   "612",
   "0.0773"
  ],
  [
   "616",
   "0.0773"
  ],
  [
   "619",
   "0.0773"
  ],
  [
   "622",
   "0.1546"
  ],
  [
   "625",
   "0.1546"
  ],
  [
   "632",
   "0.0773"
  ],
  [
   "635",
   "0.0773"
  ],
  [
   "639",
   "0.1546"
  ],
  [
   "642",
   "0.0773"
  ],
  [
   "646",
   "0.0773"
  ],
  [
   "649",
   "0.1546"
  ],
  [
   "655",
   "0.0773"
  ],
  [
   "662",
   "0.1546"
  ],
  [
   "666",
   "0.0773"
  ],
  [
   "669",
   "0.0773"
  ],
  [
   "672",
   "0.1546"
  ],
  [
   "678",
   "0.1546"
  ],
  [
   "682",
   "0.0773"
  ],
  [
   "688",
   "0.0773"
  ],
  [
   "692",
   "0.0773"
  ],
  [
   "702",
   "0.2318"
  ],
  [
   "705",
   "0.0773"
  ],
  [
   "706",
   "0.0773"
  ],
  [
   "709",
   "0.0773"
  ],
  [
   "719",
   "0.1546"
  ],
  [
   "722",
   "0.0773"
  ],
  [
   "729",
   "0.0773"
  ],
  [
   "735",
   "0.0773"
  ],
  [
   "742",
   "0.0773"
  ],
  [
   "749",
   "0.1546"
  ],
  [
   "768",
   "0.0773"
  ],
  [
   "775",
   "0.0773"
  ],
  [
   "795",
   "0.0773"
  ],
  [
   "815",
   "0.0773"
  ],
  [
   "822",
   "0.0773"
  ],
  [
   "859",
   "0.0773"
  ],
  [
   "862",
   "0.0773"
  ],
  [
   "865",
   "0.0773"
  ],
  [
   "892",
   "0.0773"
  ],
  [
   "915",
   "0.0773"
  ],
  [
   "922",
   "0.0773"
  ],
  [
   "945",
   "0.0773"
  ],
  [
   "958",
   "0.0773"
  ],
  [
   "976",
   "0.0773"
  ],
  [
   "979",
   "0.0773"
  ],
  [
   "1008",
   "0.0773"
  ],
  [
   "1032",
   "0.0773"
  ],
  [
   "1055",
   "0.0773"
  ],
  [
   "1082",
   "0.0773"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 42,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "519 ms",
  "compare_result": "111111111111111111111111111111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 42,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 160,
  "name": "Your",
  "id": 112712498
 }
}