{
 "id": 496,
 "ids": "496",
 "state": "None",
 "name": "Next Greater Element I",
 "key": "next-greater-element-i",
 "link": "https://leetcode.com/problems/next-greater-element-i",
 "locked": false,
 "percent": 56.90173323000737,
 "level": "Easy",
 "starred": false,
 "loaded": true,
 "totalAC": "30.1K",
 "totalSubmit": "52.9K",
 "desc": "\r\nYou are given two arrays (without duplicates) nums1 and nums2 where nums1\u2019s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2. \r\n\r\n\r\n\r\nThe Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.\r\n\r\n\r\nExample 1:\r\n\r\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2].\r\nOutput: [-1,3,-1]\r\nExplanation:\r\n    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\r\n    For number 1 in the first array, the next greater number for it in the second array is 3.\r\n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: nums1 = [2,4], nums2 = [1,2,3,4].\r\nOutput: [3,-1]\r\nExplanation:\r\n    For number 2 in the first array, the next greater number for it in the second array is 3.\r\n    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\nAll elements in nums1 and nums2 are unique.\r\nThe length of both nums1 and nums2 would not exceed 1000.\r\n\r\n",
 "templates": [
  {
   "value": "cpp",
   "text": "C++",
   "defaultCode": "class Solution {\r\npublic:\r\n    vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {\r\n        \r\n    }\r\n};"
  },
  {
   "value": "java",
   "text": "Java",
   "defaultCode": "public class Solution {\r\n    public int[] nextGreaterElement(int[] findNums, int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "python",
   "text": "Python",
   "defaultCode": "class Solution(object):\r\n    def nextGreaterElement(self, findNums, nums):\r\n        \"\"\"\r\n        :type findNums: List[int]\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "
  },
  {
   "value": "c",
   "text": "C",
   "defaultCode": "/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* nextGreaterElement(int* findNums, int findNumsSize, int* nums, int numsSize, int* returnSize) {\r\n    \r\n}"
  },
  {
   "value": "csharp",
   "text": "C#",
   "defaultCode": "public class Solution {\r\n    public int[] NextGreaterElement(int[] findNums, int[] nums) {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "javascript",
   "text": "JavaScript",
   "defaultCode": "/**\r\n * @param {number[]} findNums\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar nextGreaterElement = function(findNums, nums) {\r\n    \r\n};"
  },
  {
   "value": "ruby",
   "text": "Ruby",
   "defaultCode": "# @param {Integer[]} find_nums\r\n# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef next_greater_element(find_nums, nums)\r\n    \r\nend"
  },
  {
   "value": "swift",
   "text": "Swift",
   "defaultCode": "class Solution {\r\n    func nextGreaterElement(_ findNums: [Int], _ nums: [Int]) -> [Int] {\r\n        \r\n    }\r\n}"
  },
  {
   "value": "golang",
   "text": "Go",
   "defaultCode": "func nextGreaterElement(findNums []int, nums []int) []int {\r\n    \r\n}"
  },
  {
   "value": "scala",
   "text": "Scala",
   "defaultCode": "object Solution {\n    def nextGreaterElement(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}"
  }
 ],
 "testcase": "'[4,1,2]\\n[1,3,4,2]'",
 "testable": true,
 "slug": "next-greater-element-i",
 "category": "algorithms",
 "fname": "496.next-greater-element-i.algorithms.py",
 "test_your": {
  "code_answer": [
   "[-1,3,-1]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "35 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Your",
  "id": "interpret_1500818262.97_784204_24"
 },
 "test_expected": {
  "code_answer": [
   "[-1,3,-1]"
  ],
  "code_output": [],
  "status_code": 10,
  "status_runtime": "29 ms",
  "run_success": true,
  "state": "SUCCESS",
  "total_correct": null,
  "display_runtime": "",
  "total_testcases": null,
  "name": "Expected",
  "id": "interpret_expected_1500818262.99_784204_24"
 },
 "submit_chart": [
  [
   "42",
   "0.7512"
  ],
  [
   "45",
   "2.6291"
  ],
  [
   "46",
   "1.4085"
  ],
  [
   "48",
   "1.9718"
  ],
  [
   "49",
   "4.4131"
  ],
  [
   "52",
   "6.9484"
  ],
  [
   "53",
   "0.3756"
  ],
  [
   "55",
   "3.1925"
  ],
  [
   "56",
   "2.4413"
  ],
  [
   "58",
   "1.6901"
  ],
  [
   "59",
   "2.9108"
  ],
  [
   "62",
   "2.2535"
  ],
  [
   "63",
   "0.0939"
  ],
  [
   "65",
   "1.7840"
  ],
  [
   "66",
   "0.5634"
  ],
  [
   "68",
   "1.5023"
  ],
  [
   "69",
   "1.6901"
  ],
  [
   "72",
   "2.7230"
  ],
  [
   "75",
   "1.5962"
  ],
  [
   "76",
   "1.2207"
  ],
  [
   "78",
   "0.6573"
  ],
  [
   "79",
   "1.5023"
  ],
  [
   "82",
   "2.1596"
  ],
  [
   "83",
   "0.0939"
  ],
  [
   "85",
   "0.8451"
  ],
  [
   "86",
   "0.6573"
  ],
  [
   "88",
   "0.2817"
  ],
  [
   "89",
   "1.6901"
  ],
  [
   "92",
   "1.8779"
  ],
  [
   "93",
   "0.0939"
  ],
  [
   "95",
   "1.3146"
  ],
  [
   "96",
   "0.6573"
  ],
  [
   "98",
   "0.4695"
  ],
  [
   "99",
   "1.9718"
  ],
  [
   "102",
   "2.4413"
  ],
  [
   "103",
   "0.0939"
  ],
  [
   "105",
   "1.4085"
  ],
  [
   "106",
   "0.6573"
  ],
  [
   "108",
   "1.1268"
  ],
  [
   "109",
   "1.1268"
  ],
  [
   "112",
   "2.2535"
  ],
  [
   "115",
   "1.2207"
  ],
  [
   "116",
   "1.2207"
  ],
  [
   "118",
   "0.3756"
  ],
  [
   "119",
   "1.0329"
  ],
  [
   "122",
   "1.9718"
  ],
  [
   "125",
   "0.5634"
  ],
  [
   "126",
   "0.3756"
  ],
  [
   "128",
   "0.2817"
  ],
  [
   "129",
   "0.6573"
  ],
  [
   "132",
   "0.9390"
  ],
  [
   "135",
   "0.4695"
  ],
  [
   "136",
   "0.0939"
  ],
  [
   "138",
   "0.7512"
  ],
  [
   "139",
   "0.0939"
  ],
  [
   "142",
   "0.6573"
  ],
  [
   "145",
   "0.6573"
  ],
  [
   "146",
   "0.3756"
  ],
  [
   "148",
   "0.2817"
  ],
  [
   "149",
   "0.7512"
  ],
  [
   "152",
   "0.9390"
  ],
  [
   "155",
   "0.2817"
  ],
  [
   "156",
   "0.0939"
  ],
  [
   "158",
   "0.0939"
  ],
  [
   "159",
   "0.1878"
  ],
  [
   "162",
   "0.4695"
  ],
  [
   "165",
   "0.6573"
  ],
  [
   "166",
   "0.1878"
  ],
  [
   "168",
   "0.2817"
  ],
  [
   "169",
   "0.2817"
  ],
  [
   "172",
   "0.4695"
  ],
  [
   "175",
   "0.1878"
  ],
  [
   "176",
   "0.1878"
  ],
  [
   "182",
   "0.3756"
  ],
  [
   "185",
   "0.2817"
  ],
  [
   "188",
   "0.0939"
  ],
  [
   "189",
   "0.1878"
  ],
  [
   "195",
   "0.1878"
  ],
  [
   "196",
   "0.0939"
  ],
  [
   "198",
   "0.0939"
  ],
  [
   "199",
   "0.0939"
  ],
  [
   "202",
   "0.4695"
  ],
  [
   "205",
   "0.1878"
  ],
  [
   "208",
   "0.0939"
  ],
  [
   "209",
   "0.1878"
  ],
  [
   "212",
   "0.2817"
  ],
  [
   "215",
   "0.3756"
  ],
  [
   "218",
   "0.2817"
  ],
  [
   "219",
   "0.0939"
  ],
  [
   "222",
   "0.1878"
  ],
  [
   "228",
   "0.0939"
  ],
  [
   "229",
   "0.1878"
  ],
  [
   "232",
   "0.0939"
  ],
  [
   "235",
   "0.0939"
  ],
  [
   "236",
   "0.2817"
  ],
  [
   "238",
   "0.0939"
  ],
  [
   "239",
   "0.1878"
  ],
  [
   "242",
   "0.0939"
  ],
  [
   "245",
   "0.1878"
  ],
  [
   "246",
   "0.0939"
  ],
  [
   "248",
   "0.0939"
  ],
  [
   "249",
   "0.0939"
  ],
  [
   "252",
   "0.2817"
  ],
  [
   "255",
   "0.1878"
  ],
  [
   "256",
   "0.0939"
  ],
  [
   "258",
   "0.0939"
  ],
  [
   "259",
   "0.0939"
  ],
  [
   "262",
   "0.6573"
  ],
  [
   "263",
   "0.0939"
  ],
  [
   "265",
   "0.0939"
  ],
  [
   "266",
   "0.1878"
  ],
  [
   "268",
   "0.0939"
  ],
  [
   "269",
   "0.1878"
  ],
  [
   "272",
   "0.0939"
  ],
  [
   "273",
   "0.0939"
  ],
  [
   "275",
   "0.0939"
  ],
  [
   "276",
   "0.0939"
  ],
  [
   "278",
   "0.1878"
  ],
  [
   "279",
   "0.0939"
  ],
  [
   "282",
   "0.0939"
  ],
  [
   "285",
   "0.1878"
  ],
  [
   "292",
   "0.0939"
  ],
  [
   "298",
   "0.0939"
  ],
  [
   "302",
   "0.1878"
  ],
  [
   "305",
   "0.0939"
  ],
  [
   "306",
   "0.0939"
  ],
  [
   "308",
   "0.0939"
  ],
  [
   "312",
   "0.0939"
  ],
  [
   "315",
   "0.0939"
  ],
  [
   "316",
   "0.0939"
  ],
  [
   "319",
   "0.4695"
  ],
  [
   "322",
   "0.0939"
  ],
  [
   "323",
   "0.0939"
  ],
  [
   "325",
   "0.1878"
  ],
  [
   "326",
   "0.0939"
  ],
  [
   "328",
   "0.0939"
  ],
  [
   "329",
   "0.0939"
  ],
  [
   "336",
   "0.0939"
  ],
  [
   "342",
   "0.1878"
  ],
  [
   "345",
   "0.0939"
  ],
  [
   "349",
   "0.0939"
  ],
  [
   "352",
   "0.2817"
  ],
  [
   "353",
   "0.0939"
  ],
  [
   "359",
   "0.3756"
  ],
  [
   "362",
   "0.1878"
  ],
  [
   "363",
   "0.0939"
  ],
  [
   "365",
   "0.0939"
  ],
  [
   "369",
   "0.1878"
  ],
  [
   "372",
   "0.2817"
  ],
  [
   "375",
   "0.1878"
  ],
  [
   "379",
   "0.0939"
  ],
  [
   "382",
   "0.2817"
  ],
  [
   "385",
   "0.0939"
  ],
  [
   "386",
   "0.1878"
  ],
  [
   "389",
   "0.2817"
  ],
  [
   "392",
   "0.0939"
  ],
  [
   "396",
   "0.0939"
  ],
  [
   "398",
   "0.0939"
  ],
  [
   "399",
   "0.2817"
  ],
  [
   "406",
   "0.0939"
  ],
  [
   "412",
   "0.0939"
  ],
  [
   "415",
   "0.1878"
  ],
  [
   "419",
   "0.0939"
  ],
  [
   "422",
   "0.0939"
  ],
  [
   "432",
   "0.0939"
  ],
  [
   "445",
   "0.0939"
  ],
  [
   "452",
   "0.1878"
  ],
  [
   "458",
   "0.0939"
  ],
  [
   "462",
   "0.0939"
  ],
  [
   "472",
   "0.0939"
  ],
  [
   "479",
   "0.0939"
  ],
  [
   "482",
   "0.0939"
  ],
  [
   "485",
   "0.0939"
  ],
  [
   "486",
   "0.0939"
  ],
  [
   "489",
   "0.0939"
  ],
  [
   "492",
   "0.0939"
  ],
  [
   "505",
   "0.0939"
  ],
  [
   "508",
   "0.0939"
  ],
  [
   "512",
   "0.0939"
  ],
  [
   "532",
   "0.1878"
  ],
  [
   "538",
   "0.0939"
  ],
  [
   "565",
   "0.0939"
  ],
  [
   "572",
   "0.0939"
  ],
  [
   "579",
   "0.0939"
  ],
  [
   "602",
   "0.0939"
  ],
  [
   "652",
   "0.0939"
  ],
  [
   "693",
   "0.0939"
  ],
  [
   "712",
   "0.1878"
  ],
  [
   "756",
   "0.0939"
  ],
  [
   "792",
   "0.0939"
  ],
  [
   "835",
   "0.0939"
  ]
 ],
 "submit_your": {
  "lang": "python",
  "total_testcases": 17,
  "user_id": 784204,
  "code_output": "",
  "status_code": 10,
  "status_runtime": "66 ms",
  "compare_result": "11111111111111111",
  "display_runtime": "",
  "state": "SUCCESS",
  "total_correct": 17,
  "run_success": true,
  "judge_type": "large",
  "std_output": "",
  "question_id": 496,
  "name": "Your",
  "id": 110802324
 }
}