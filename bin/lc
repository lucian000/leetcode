#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
for using leetcode easily
author: Lucian
"""
#%% import and setup
try: # for using arrow keys, don't remove this line!
    import gnureadline 
except:
    import readline
import time
import shutil # for copyong file
import json
import numpy as np
import progressbar as pb
import webbrowser
import os
import sys
import matplotlib.pyplot as plt

os.chdir(sys.path[0]+'/../') # change dir to the root dir
dc = os.path.expanduser('~/.lc/') # dir of cache of leetcode
d='./source/' #dir of saved source files
dsave='./cache/' # dir of the cache of this program
dt='./time/' # dir for time records
lc_cli = './leetcode-cli/leetcode '
editor = 'vim '

if not os.path.exists(dc):
    os.makedirs(dc)
if not os.path.exists(d):
    os.makedirs(d)
if not os.path.exists(dsave):
    os.makedirs(dsave)
if not os.path.exists(dt):
    os.makedirs(dt)
if not os.path.exists('./submitted/'):
    os.makedirs('./submitted/')

welcome='''
#######################################
LeetCode Helper
Version 1.0
By Lucian
Basing on leetcode-cli v0.10.1-dfa8759
#######################################
'''


hlp='''
exit: exit this program
h/help: get the help infomation  
d/do: do an excercise! Some letters can follow, including:
    e(easy),m(medium),h(hard),d(done),s(starred)
    Uppercase means negative, e.g. D(not done)
    If not, it will automatically choose the easiest level left.
sh: execute a command after 'sh'.
download: download 'algorithm' souce files to the dir 'source'.
    If you want to download others (like 'shell', 'databass'), use 'download all'
    You can also type 'download shell databass'.
indent: make all json files have indent

If you use Python, you can add the following to ~/.vimrc:
:set ts=4
:set expandtab

You can also input the following codes:
'''
#%% functions for print
def pry(string):
    'print in yellow'
    print('\033[1;33m' +string+ '\033[0m')
def addy(string):
    'add yellow to a string'
    return '\033[1;33m' +string+ '\033[0m'
def prr(string):
    'print in red'
    print('\033[1;31m' +string+ '\033[0m')
def addr(string):
    'add red to a string'
    return '\033[1;31m' +string+ '\033[0m'

#%% functions about file (or command) 
def store(fname,data):
    if os.path.exists(fname):
        shutil.copy(fname, fname+'.bak')
    with open(fname, 'w') as json_file:
        json_file.write(json.dumps(data, indent=True))
def load(fname):
    with open(fname) as json_file:
        data = json.load(json_file)
    return data
def readfile(fname):
    with open(fname) as f:
        text = f.read()
    return text
def get_cmd(cmd):
    'get the output of shell code "cmd"'
    with os.popen(cmd) as f:
        texts = f.readlines()
    return texts
#%% get the list
def get_list(n=0,q='',cat=["algorithms"]):
    '''
    n=index
    q=
        e(easy),m(medium),h(hard),d(done),l(locked),s(starred)
        Uppercase means negative, e.g. D(not done)
    cat= 'all' : get all categories
        [a,b,c]: get categories a, b, and c
    '''
    if not os.path.exists(dc+'problems.json'):
        get_cmd(lc_cli + 'list')
    all_ = load(dc+'problems.json')
    if n>0:
        for i in all_:
            if i['id']==n:
                return i
    else:
        if cat =='all':
            lst = all_
        else:
            lst = [i for i in all_ if i["category"] in cat]
        if 'e' in q:
            lst = [i for i in lst if i['level']=='Easy']
        if 'E' in q:
            lst = [i for i in lst if i['level']!='Easy']
        if 'm' in q:
            lst = [i for i in lst if i['level']=='Medium']
        if 'M' in q:
            lst = [i for i in lst if i['level']!='Medium']
        if 'h' in q:
            lst = [i for i in lst if i['level']=='Hard']
        if 'H' in q:
            lst = [i for i in lst if i['level']!='Hard']
        if 'D' in q:
            lst = [i for i in lst if i['state']=='None']
        if 'd' in q:
            lst = [i for i in lst if i['state']!='None']
        if 's' in q:
            lst = [i for i in lst if i['starred']]
        if 'S' in q:
            lst = [i for i in lst if not i['starred']]
        if 'l' in q:
            lst = [i for i in lst if i['locked']]
        if 'L' in q:
            lst = [i for i in lst if not i['locked']]
    return lst

    
#%% refresh a dir
def rm_dir(dire,exception=[]):
    if not input('Refresh '+dire+'? (y/n) ').startswith('y'):
        return -1
    if dire == dc:
        exception.append('.user.json')
    if os.path.exists(dire+'bak/'):
        shutil.rmtree(dire+'bak/')
    os.mkdir(dire+'bak/')
    for i in os.listdir(dire):
        if (i!='bak') and (i not in exception):
            shutil.move(dire+i,dire+'bak/')

#%% define class
if os.path.exists('./debug_mode'):
    db = ' -vv'
else:
    db = ''
class problem(object):
    def __init__(self,n):
        # n can be both int or str!
        self.id = int(n) # index - int
        self.ids = str(n) # index -str
        self.__dict__.update(get_list(self.id))
        self.fname = self.ids+'.'+self.slug+'.'+self.category+'.py'
        self.loaded = False
    def load(self):
        'load all information about the problem'
        f1 = dc+self.ids+'.'+self.slug+'.'+self.category+'.json'
        f2 = d + self.ids+'.json'
        if os.path.exists(f1):
            self.__dict__.update(load(f1))
        else:
            if os.path.exists(f2):
                self.__dict__.update(load(f2))
            else:
                get_cmd(lc_cli + 'show '+self.ids)
                self.__dict__.update(load(f1))
        self.testcase = "'"+self.testcase.replace('\n',r'\n')+"'"   
        self.loaded=True
        self.cache()
    def download(self):
        'if cannot find json file in path d, save it'
        f1 = dc+self.ids+'.'+self.slug+'.'+self.category+'.json'
        f2 = d + self.ids+'.json'
        find = True
        if not os.path.exists(f1):
            get_cmd(lc_cli + 'show '+self.ids)
            find = False
        if not os.path.exists(f2):
            shutil.copy(dc+self.ids+'.'+self.slug+'.'+self.category+'.json', d+self.ids+'.json')
            find = False
        return find
    def cache(self):
        if not self.loaded:
            self.load()
        fname = dsave+self.ids+'.json'
        if os.path.exists(fname):
            dict0 = load(fname)
            dict0.update(self.__dict__)
            store(fname,dict0)
        else:
            store(fname,self.__dict__)
    def show(self,pr = True):
        if not self.loaded:
            self.load()
        txt = '['+self.ids+'] '+self.name+'\n'
        txt += '* '+self.level+'('+str(round(self.percent,2))+'%)'
        txt += '\n\n'
        txt += self.desc.strip()
        if pr:
            print(txt)
        return(txt)
    def write(self):
        if not self.loaded:
            self.load()
        if os.path.exists(self.fname):
            print('There is a file here! Please check.')
            return -1
        try:
            codes = [i['defaultCode'] for i in self.templates if i['value']=='python3'][0]
        except:
            codes = [i['defaultCode'] for i in self.templates if i['value']=='python'][0]
        txt = '#\n['+self.ids+'] '+self.name
        txt += '\n'
        txt += '\n* '+self.level+'('+str(round(self.percent,5))+'%)'
        txt += '\n* Testcase Example: ' + self.testcase
        txt += '\n* URL: ' + self.link
        txt += '\n'
        txt += '\n'+self.desc.strip()
        txt += '\n'
        txt = txt.replace('\n','\n# ')
        txt += '\n'+ codes
        txt = txt.replace('\r\n','\n')
        with open(self.fname,'w') as f:
            f.write(txt)
        return 0
    def write_time(self,t):
        f = dt+self.ids+'.json'
        if not os.path.exists(f):
            store(f,[t])
        else:
            ts = load(f)
            ts.append(t)
            store(f, ts)
    def edit(self): #use editor to edit codes, and save the time used
        time0 = time.time()
        os.system(editor+''+self.fname)
        self.write_time(time.time()-time0)# store the time used
    def test(self): #test
        if not self.testable:
            prr('This question is not testable, please submit to check.')
            return 1
        os.system(lc_cli + 'test '+self.fname+' -t '+self.testcase+db)
        if os.path.exists('test_results.tmp'):
            test_results = load('test_results.tmp')
            self.test_your = test_results[0]
            self.test_expected = test_results[1]
            os.remove('test_results.tmp')
        else:
            prr('Something is wrong!')
            return -1
        self.cache()
        return 0
    def submit(self):
        os.system(lc_cli + 'submit '+self.fname+db)
        if os.path.exists('dist_chart.tmp'):
            submit_info = load('dist_chart.tmp')
            self.submit_chart = submit_info[0]['distributionChart']['distribution']
            self.submit_your = submit_info[1]
            os.remove('dist_chart.tmp')
        else:
            prr('Something is wrong!')
            return -1
        self.plot_chart()
        self.cache()
        return 0
    def plot_chart(self):
        if ((not 'submit_chart' in self.__dict__) or (not 'submit_your' in self.__dict__)):
            prr('Data are not enough!')
            return -1
        x,y = zip(*self.submit_chart)
        x,y = [float(i) for i in x],[float(i) for i in y]
        yourx = self.submit_your['status_runtime']
        yourx = float(yourx.replace('ms',''))
        beat = 0
        for i,xi in enumerate(x):
            if xi>yourx:
                beat += y[i]
        plt.figure()
        bound = max(y)*1.2
        plt.ylim([0,bound])
        plt.bar(x,y,width=1)
        plt.plot(x,y,'g',alpha=0.5)
        plt.vlines(yourx,min(y),bound,'r',alpha=0.7)
        plt.xlabel('Runtime (ms)')
        plt.ylabel('Frequency (%)') 
        plt.title('Your runtime beats '+str(round(beat,4))+'% of python submissions')
        plt.text(yourx,bound*0.95,str(yourx)+' ms')
        plt.show()
#%% checking dependence
if not os.path.exists('./do_not_check'):
    pry('Checking node and editor...')
    if os.system("node -v")!=0:
        prr('Can not find node.js!')
        prr('Please read:')
        print('https://nodejs.org/')
        exit()
    if os.system(editor+' --version')!=0:
        prr('Can not find the editor!')
        exit()

#%% functions for the codes accepted
def h():
    'help'
    print(hlp)
    os.system(lc_cli + 'help')

def indent(d):
    fs = [i for i in os.listdir(d) if i.endswith('.json')]
    for f in fs:
        store(d+f, load(d+f))

def down(ps,p):
    'download all source files'
    rm_dir(dc)
    rm_dir(d)
    #rm_dir(dsave)
    if p.strip()=='all':
        lst = get_list(cat='all')
    elif len(ps)>0:
        lst = get_list(cat=ps)
    else:
        lst = get_list()
    idlst = [i['id'] for i in lst if not i['locked']]
    pry('Downloading...')
    pba = pb.progressbarClass(len(idlst), '=')
    pba.progress(0)
    for ni,i in enumerate(idlst):
        p = problem(i)
        find = p.download()
        p.cache()
        pba.progress(ni+1, find)
    pba.done()
    pry('Finished.')

 
def do_all(ps,p,resume=False):
    'automatically solve a question'
    if not resume:
        pry('Checking the question list...')
        if len(ps)>0:
            lst = get_list(q=p)
        else:
            lst = get_list(q='LDe')
            if len(lst)==0:
                lst = get_list(q='LDm')
                if len(lst)==0:
                    lst = get_list(q='LDh')
        if len(lst)==0:
            prr('No unlocked questions are found!')
            return 
        ind = np.random.choice([i['id'] for i in lst]) # index of question
    else:
        if len(ps)==0:
            prr('Please enter an index after the code!')
            return -1
        try:
            ind = int(p)
        except:
            prr('Please enter an int!')
            return -1
    prob = problem(ind)
    prob.load()
    print('\n')
    prob.show()
    if not resume:
        returncode = prob.write()
        if returncode== -1:
            return -1
    else:
        if not os.path.exists(prob.fname):
            if os.path.exists('./submitted/'+prob.fname):
                shutil.move('./submitted/'+prob.fname,prob.fname)
            else:
                prr('Can not find '+prob.fname+' here or in ./submitted/.')
                return -1
    # webbrowser.open_new_tab(prob.link)
    while True:
        pry('\nPlease write your codes in vim, remember to save it...')
        # the time used
        prob.edit()
        prob.test()
        pry('What do you want next?')
        pry('c/[Enter] = change codes, s = submit, e = exit')
        ip2 = input(addy('?> '))
        if ip2.startswith('c') or ip2=='':
            continue
        elif ip2.startswith('e'):
            return
        elif ip2.startswith('s'):
            prob.submit()
            pry('Change your answer?')
            pry('y=yes, n=no')
            if input(addy('?> ')).startswith('n'):
                break
            else:
                continue
    if os.path.exists('./submitted/'+prob.fname): 
        print('File exists error!')
        return
    shutil.move(prob.fname,'./submitted/'+prob.fname)
    webbrowser.open(prob.link+'/#/discuss')
    prob.cache()
    os.system(lc_cli + 'stat')
    os.system(lc_cli + 'stat -g')

#%%############################
# main program
###############################
if not os.path.exists('./not_welcome'):
    pry(welcome)
for i in os.listdir(): # check if file needs resume
    ipart = i.split('.')
    if ipart[0].isdigit() and ipart[-1]=='py':
        pry("File "+i+" exists.")
        if input('Resume? (y=yes,n/[Enter]=no) ').startswith('y'):
            do_all([ipart[0]],ipart[0],resume=True)
while(True):
    ip = input(addy('\nlc >> '))
    ips = ip.split()
    if ips==[]:
        continue
    cmd = ips[0]
    pars = ips[1:]
    par = " ".join(pars)
    if cmd in ['exit','e']:
        break
    elif cmd in ['h','help']:
        h()
    elif cmd in ['d','do']:
        do_all(pars,par)
    elif cmd in ['resume','rs']:
        do_all(pars,par,resume=True)
    elif cmd=='sh':
        os.system(par)
    elif cmd=='download':
        down(pars,par)
    elif cmd=='cwd':
        print(sys.path[0])
    elif cmd=='indent':
        indent(d),indent(dsave),indent(dt)
    else:
        os.system(lc_cli +ip)
